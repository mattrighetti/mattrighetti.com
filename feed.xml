<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://mattrighetti.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mattrighetti.com/" rel="alternate" type="text/html" /><updated>2023-06-03T18:25:27+00:00</updated><id>https://mattrighetti.com/feed.xml</id><title type="html">mattrighetti</title><subtitle>Just another programming blog</subtitle><author><name>Mattia Righetti</name></author><entry><title type="html">GSoC 2023: Week 4 (Actix Extractors)</title><link href="https://mattrighetti.com/2023/06/02/gsoc-week-4.html" rel="alternate" type="text/html" title="GSoC 2023: Week 4 (Actix Extractors)" /><published>2023-06-02T00:00:00+00:00</published><updated>2023-06-02T00:00:00+00:00</updated><id>https://mattrighetti.com/2023/06/02/gsoc-week-4</id><content type="html" xml:base="https://mattrighetti.com/2023/06/02/gsoc-week-4.html"><![CDATA[<div class="paragraph">
<p>Here we are with another update, we&#8217;re starting to get serious this time around.</p>
</div>
<div class="paragraph">
<p>Let me start with the easy part: this week I&#8217;ve created the very first
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/networkstatusapi/-/wikis/Metrics-Mappings">wiki</a>
page of the project, it&#8217;s a description of the mappings that bind fields in
responses with table columns.</p>
</div>
<div class="paragraph">
<p>After that, I&#8217;ve finally started coding, for real :) first of all I&#8217;ve created
some more files to keep code consistent, at Tor we&#8217;re using
<a href="https://editorconfig.org/">editorconfig</a>. I did not know about this tool before,
but it&#8217;s turning out to be super useful. When I&#8217;m not using vim I&#8217;m 99% on
VSCode and there&#8217;s even an editorconfig plugin for that. It triggers on file
save and it applied what you specified in
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/networkstatusapi/-/blob/dev/.editorconfig"><code>.editorconfig</code></a>
file. In my case not that much really but it&#8217;s still really useful, I hate to
see diffs containing removed trailing whitespaces, this is a good enough reason
to adopt it.</p>
</div>
<div class="paragraph">
<p>A good project should be tested thoroughly, but I&#8217;m lazy and I forget things,
like running <code>cargo test</code> every time I push stuff remotely. Luckily enough with
little effort I&#8217;ve created a very simple CI/CD pipeline that does two things:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Checks that file satisfies editorconfig constraints</p>
</li>
<li>
<p>Runs tests for you, both for nightly and stable rust releases</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>I&#8217;ve never setup a CI/CD on GitLab but they seem way more intuitive than the
GitHub alternative. The config file at least is much more readable imo.</p>
</div>
<div class="paragraph">
<p>Now comes the meaty part: actual APIs coding.</p>
</div>
<div class="paragraph">
<p>I&#8217;ve spent these nights working on the query parameters that the service is
going to expose. There are a bunch of query params to support, you can find a
list on the current
<a href="https://metrics.torproject.org/onionoo.html#parameter">onionoo</a> wiki. A lot of
these actually have a lot of constraints, and Rust makes the process of working
with these super cool, let me tell you why.</p>
</div>
<div class="paragraph">
<p>Let me start things off by giving you a refresher on how the server looks like:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="nn">App</span><span class="p">::</span><span class="nf">new</span><span class="p">()</span>
	<span class="c1">// ...</span>
    <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/summary"</span><span class="p">)</span>
        <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
    <span class="p">)</span>
    <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/details"</span><span class="p">)</span>
        <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
    <span class="p">)</span>
    <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/bandwidth"</span><span class="p">)</span>
        <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
    <span class="p">)</span>
    <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/weights"</span><span class="p">)</span>
        <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
    <span class="p">)</span>
    <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/clients"</span><span class="p">)</span>
        <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
    <span class="p">)</span>
    <span class="c1">// More endpoints ...</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This should look familiar if you&#8217;ve ever worked on some kind of REST APIs
before. You&#8217;re basically telling the server which function should handle the
request that hit an endpoint with a certain HTTP method. Forget for a minute
that each one of them get passed to <code>not_implemented()</code> right now as this was
just the project setup.</p>
</div>
<div class="paragraph">
<p>Take <code>/summary</code> for example. If that endpoint gets hit with a <code>GET</code> request,
it&#8217;s going to trigger its <code>not_implemented</code> method. A quick look at the docs
will tell you what kind of function <code>.to()</code> will take:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="k">pub</span> <span class="k">fn</span> <span class="n">to</span><span class="o">&lt;</span><span class="n">F</span><span class="p">,</span> <span class="n">Args</span><span class="o">&gt;</span><span class="p">(</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">handler</span><span class="p">:</span> <span class="n">F</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span>
<span class="k">where</span>
    <span class="n">F</span><span class="p">:</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">Args</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="n">Args</span><span class="p">:</span> <span class="n">FromRequest</span> <span class="o">+</span> <span class="k">'static</span><span class="p">,</span>
    <span class="nn">F</span><span class="p">::</span><span class="n">Output</span><span class="p">:</span> <span class="n">Responder</span> <span class="o">+</span> <span class="k">'static</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>So <code>.to()</code> takes a function of type <code>Handler</code> that has <code>Args</code> as input and that
returns a <code>Responder</code>, plus, <code>Args</code> is something that does implement the
<code>FromRequest</code> trait. This might seem a little complicated at first but I&#8217;ll cite
the docs to make things a little bit clearer:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>A handler is just an async function that receives request-based arguments, in
any order, and returns something that can be converted to a response.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Keep in mind the following definition, it&#8217;s going to be useful later.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>A type that implements <code>FromRequest</code> is called an <strong>extractor</strong> and can extract
data from the request.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Now, let&#8217;s jump into some more code so that you can have a better understanding
of how a simple handler as <code>not_implemented</code> looks like</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="k">pub</span> <span class="k">async</span> <span class="k">fn</span> <span class="nf">not_implemented</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="k">impl</span> <span class="n">Responder</span> <span class="p">{</span>
    <span class="nn">HttpResponse</span><span class="p">::</span><span class="nf">InternalServerError</span><span class="p">()</span>
        <span class="nf">.body</span><span class="p">(</span><span class="s">"method has not been implemented"</span><span class="p">)</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The function takes no arguments in this case and it always returns a simple
<code>500 Internal Server Error</code> with a message body that tells you that the endpoint logic has not
been implemented yet. As we said before, the function needs to be <code>async</code> and
return something that implements <code>Responder</code>. Hopefully, things should be a
little bit less scarier than before, but now that you got this I&#8217;ll take a jump
back to my initial problem and show you how cool <code>actix_web</code> is.</p>
</div>
<div class="paragraph">
<p>We&#8217;re working with query params and we want each of the endpoints above to
potentially have those in each request. <code>actix_web</code> has a special extractor for
query params that will give us a lot of things for free. I&#8217;m talking about the
<a href="https://actix.rs/docs/extractors#query"><code>web::Query&lt;T&gt;</code></a> extractor. It takes a
generic argument and it&#8217;s going to try extract data based on the type that we
specify as its generic argument and give it back to us, filled with the
extracted data. This is the struct that reflects all the possible query params
that the server has to deal with in each request:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="nd">#[derive(Debug,</span> <span class="nd">Serialize,</span> <span class="nd">Deserialize)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">QueryParams</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="n">r</span><span class="err">#</span><span class="k">type</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">running</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">bool</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">search</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">lookup</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">country</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">r</span><span class="err">#</span><span class="k">as</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">as_name</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">flag</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">first_seen_days</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">last_seen_days</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">first_seen_since</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">last_seen_since</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">contact</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">family</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">version</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">os</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">host_name</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">recommended_version</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">fields</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">order</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">offset</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">limit</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Since in this case there can be no query params, all of them are marked as
optionals. We can make use of this <code>QueryParams</code> type in each of our
handler functions like this</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="k">pub</span> <span class="k">async</span> <span class="k">fn</span> <span class="nf">summary_function</span><span class="p">(</span><span class="n">params</span><span class="p">:</span> <span class="nn">web</span><span class="p">::</span><span class="n">Query</span><span class="o">&lt;</span><span class="n">QueryParams</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">impl</span> <span class="n">Responder</span> <span class="p">{</span>
    <span class="c1">// Logic goes here</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>actix_web</code> will now extract query params for us and we can access them through
the <code>params</code> argument. The thing that&#8217;s even more cool is that <code>actix_web</code> will
return a <code>400 Bad Request</code> in case extraction goes wrong. Let&#8217;s say that a user
tries to use a query params named <code>network=public</code>, you can clearly see that the
struct I defined above does not have such a field, therefore extraction is going
to fail and an error will be returned. Same happens if you try to pass a query
param with an unexpected type, e.g. <code>offset=threehundred</code>. How cool is
that? This all comes for free, we just declared the signature of a function and
a struct and we get a lot of things from just those two things!</p>
</div>
<div class="paragraph">
<p>I don&#8217;t want to ruin the party, but things might still be tedious to work with
right now. You may recall that those query params have a lot of constraints to
satisfy in order for them to be valid. Just to name a few:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>country</code> must be a valid 2 chars identifier</p>
</li>
<li>
<p><code>version</code> must satisfy the format of <a href="https://gitlab.torproject.org/tpo/core/torspec/-/blob/main/version-spec.txt">valid Tor versions</a></p>
</li>
<li>
<p><code>lookup</code> must be a 40 hex chars long identifier</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Sorry, but <code>QueryParams</code> struct won&#8217;t check those boxes for us. At the moment
<code>lookup</code> could be a 30 chars string, or an empty one too. <code>version</code> could be
<code>"1.2.3_dev"</code>, which is clearly an invalid Tor version.</p>
</div>
<div class="paragraph">
<p>You get the point, we are not done yet and we need to add some validation logic.</p>
</div>
<div class="paragraph">
<p>This is where the true power and beauty of Rust and <code>actix_web</code> comes out, we
don&#8217;t have to throw away what we got for free above, but we can build up on it.
What I want to do is implement a new struct that&#8217;s equivalent to the
<code>QueryParams</code> above, with the only difference that it will only contain valid
stuff. I&#8217;m going to achieve this with what is called type-safety.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>In Rust, type-safety refers to the language&#8217;s ability to prevent certain types
of runtime errors by enforcing strict compile-time checks on types. It ensures
that programs are free from certain classes of errors related to incorrect type
usage, such as type mismatches, null pointer dereferences, and memory safety
issues.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>I&#8217;m now going to create some types that represent valid query params, let&#8217;s jump
right into some examples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="cd">/// String wrapper that always returns a lowercase, non-emtpy String</span>
<span class="nd">#[derive(Debug)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="nf">CaseInsensitiveString</span><span class="p">(</span><span class="nb">String</span><span class="p">);</span>

<span class="k">impl</span> <span class="n">TryFrom</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">CaseInsensitiveString</span> <span class="p">{</span>
    <span class="k">type</span> <span class="n">Error</span> <span class="o">=</span> <span class="nb">String</span><span class="p">;</span>

    <span class="k">fn</span> <span class="nf">try_from</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="k">Self</span><span class="p">,</span> <span class="k">Self</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">value</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Err</span><span class="p">(</span><span class="s">"case insensitive string cannot be empty"</span><span class="nf">.to_string</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="nf">Ok</span><span class="p">(</span><span class="k">Self</span><span class="p">(</span><span class="n">value</span><span class="nf">.to_lowercase</span><span class="p">()))</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="cd">/// Wrapper for full fingerprints or hashed fingerprints</span>
<span class="cd">/// consisting of 40 hex characters.</span>
<span class="cd">/// Lookups are case-insensitive.</span>
<span class="nd">#[derive(Debug)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="nf">LookupString</span><span class="p">(</span><span class="n">CaseInsensitiveString</span><span class="p">);</span>

<span class="k">impl</span> <span class="n">TryFrom</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">LookupString</span> <span class="p">{</span>
    <span class="k">type</span> <span class="n">Error</span> <span class="o">=</span> <span class="nb">String</span><span class="p">;</span>

    <span class="k">fn</span> <span class="nf">try_from</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="k">Self</span><span class="p">,</span> <span class="k">Self</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">value</span><span class="nf">.len</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">40</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Err</span><span class="p">(</span><span class="s">"lookup param must be a 40 char long string containing hex chars"</span><span class="nf">.to_string</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="nf">Ok</span><span class="p">(</span><span class="k">Self</span><span class="p">(</span><span class="nf">CaseInsensitiveString</span><span class="p">(</span><span class="n">value</span><span class="p">)))</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="cd">/// Wrapper for Country code string of length 2, case-insensitive</span>
<span class="nd">#[derive(Debug)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="nf">CountryCode</span><span class="p">(</span><span class="n">CaseInsensitiveString</span><span class="p">);</span>

<span class="k">impl</span> <span class="n">TryFrom</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">CountryCode</span> <span class="p">{</span>
    <span class="k">type</span> <span class="n">Error</span> <span class="o">=</span> <span class="nb">String</span><span class="p">;</span>

    <span class="k">fn</span> <span class="nf">try_from</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="k">Self</span><span class="p">,</span> <span class="k">Self</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">value</span><span class="nf">.len</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">2</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Err</span><span class="p">(</span><span class="s">"country code must be two chars long."</span><span class="nf">.to_string</span><span class="p">())</span>
        <span class="p">}</span>

        <span class="nf">Ok</span><span class="p">(</span><span class="k">Self</span><span class="p">(</span><span class="nf">CaseInsensitiveString</span><span class="p">(</span><span class="n">value</span><span class="p">)))</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="cd">/// Wrapper for valid Tor Version</span>
<span class="cd">/// Specs can be found at</span>
<span class="cd">/// https://gitlab.torproject.org/tpo/core/torspec/-/blob/main/version-spec.txt</span>
<span class="nd">#[derive(Debug,</span> <span class="nd">Serialize,</span> <span class="nd">Deserialize,</span> <span class="nd">PartialEq,</span> <span class="nd">Eq)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">Version</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="n">major</span><span class="p">:</span> <span class="nb">u8</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">minor</span><span class="p">:</span> <span class="nb">u8</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">micro</span><span class="p">:</span> <span class="nb">u8</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">patchlevel</span><span class="p">:</span> <span class="nb">u8</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">cvs</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">TryFrom</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Version</span> <span class="p">{</span>
    <span class="k">type</span> <span class="n">Error</span> <span class="o">=</span> <span class="nb">String</span><span class="p">;</span>

    <span class="k">fn</span> <span class="nf">try_from</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="k">Self</span><span class="p">,</span> <span class="k">Self</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="nd">lazy_static!</span> <span class="p">{</span>
            <span class="k">static</span> <span class="k">ref</span> <span class="n">RE</span><span class="p">:</span> <span class="n">Regex</span> <span class="o">=</span> <span class="nn">Regex</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">r"^(?P&lt;MAJOR&gt;\d+)\.(?P&lt;MINOR&gt;\d+)\.(?P&lt;MICRO&gt;\d+)\.(?P&lt;PATCHLEVEL&gt;\d+)(?P&lt;CVS&gt;-[A-Za-z]+)*$"</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="n">caps</span> <span class="o">=</span> <span class="k">match</span> <span class="n">RE</span><span class="nf">.captures</span><span class="p">(</span><span class="o">&amp;</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="nb">None</span> <span class="k">=&gt;</span> <span class="k">return</span> <span class="nf">Err</span><span class="p">(</span><span class="s">"invalid version."</span><span class="nf">.to_string</span><span class="p">()),</span>
            <span class="nf">Some</span><span class="p">(</span><span class="n">caps</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="n">caps</span><span class="p">,</span>
        <span class="p">};</span>

        <span class="nf">Ok</span><span class="p">(</span><span class="k">Self</span> <span class="p">{</span>
            <span class="n">major</span><span class="p">:</span> <span class="n">caps</span><span class="p">[</span><span class="s">"MAJOR"</span><span class="p">]</span><span class="nf">.parse</span><span class="p">()</span><span class="nf">.map_err</span><span class="p">(|</span><span class="n">_</span><span class="p">|</span> <span class="s">"major version is nan."</span><span class="p">)</span><span class="o">?</span><span class="p">,</span>
            <span class="n">minor</span><span class="p">:</span> <span class="n">caps</span><span class="p">[</span><span class="s">"MINOR"</span><span class="p">]</span><span class="nf">.parse</span><span class="p">()</span><span class="nf">.map_err</span><span class="p">(|</span><span class="n">_</span><span class="p">|</span> <span class="s">"minor version is nan."</span><span class="p">)</span><span class="o">?</span><span class="p">,</span>
            <span class="n">micro</span><span class="p">:</span> <span class="n">caps</span><span class="p">[</span><span class="s">"MICRO"</span><span class="p">]</span><span class="nf">.parse</span><span class="p">()</span><span class="nf">.map_err</span><span class="p">(|</span><span class="n">_</span><span class="p">|</span> <span class="s">"micro version is nan."</span><span class="p">)</span><span class="o">?</span><span class="p">,</span>
            <span class="n">patchlevel</span><span class="p">:</span> <span class="n">caps</span><span class="p">[</span><span class="s">"PATCHLEVEL"</span><span class="p">]</span><span class="nf">.parse</span><span class="p">()</span><span class="nf">.map_err</span><span class="p">(|</span><span class="n">_</span><span class="p">|</span> <span class="s">"patchlevel version is nan."</span><span class="p">)</span><span class="o">?</span><span class="p">,</span>
            <span class="n">cvs</span><span class="p">:</span> <span class="n">caps</span><span class="nf">.name</span><span class="p">(</span><span class="s">"CVS"</span><span class="p">)</span><span class="nf">.map</span><span class="p">(|</span><span class="n">v</span><span class="p">|</span> <span class="n">v</span><span class="nf">.as_str</span><span class="p">()</span><span class="nf">.into</span><span class="p">())</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>These are just some of the constraints that I&#8217;ve implemented, if you&#8217;re
interested you can check them all out at
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/networkstatusapi/-/blob/dev/src/models/query/domain.rs">domain.rs</a>,
nothing exciting really, just some validation logic.</p>
</div>
<div class="paragraph">
<p>Now that we have those type-safe structs we can define the type-safe
representation of <code>QueryParams</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="nd">#[derive(Debug,</span> <span class="nd">Default)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">QueryFilters</span> <span class="p">{</span>
    <span class="c1">// More params...</span>
    <span class="k">pub</span> <span class="n">lookup</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">LookupString</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">country</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">CountryCode</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">version</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">VersionType</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="c1">// Even more params...</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Can you see where I&#8217;m getting at? Remember that we don&#8217;t want to trash what we
got for free above, we still want to work with our beloved <code>QueryParams</code> struct
and extract data from it, that&#8217;s why I&#8217;ll implement a <code>TryFrom&lt;QueryParams&gt;</code> for
<code>QueryFilters</code> that will do just that, if everything goes smoothly then we&#8217;re
going to get a valid <code>QueryFilters</code>, otherwise a nice <code>Err</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="k">impl</span> <span class="n">TryFrom</span><span class="o">&lt;</span><span class="n">QueryParams</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">QueryFilters</span> <span class="p">{</span>
    <span class="k">type</span> <span class="n">Error</span> <span class="o">=</span> <span class="nb">String</span><span class="p">;</span>

    <span class="k">fn</span> <span class="nf">try_from</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">QueryParams</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="k">Self</span><span class="p">,</span> <span class="k">Self</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">s</span> <span class="o">=</span> <span class="k">Self</span><span class="p">::</span><span class="nf">default</span><span class="p">();</span>

        <span class="c1">// ...</span>

        <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">lookup</span><span class="p">)</span> <span class="o">=</span> <span class="n">value</span><span class="py">.lookup</span> <span class="p">{</span>
            <span class="n">s</span><span class="py">.lookup</span> <span class="o">=</span> <span class="nf">Some</span><span class="p">(</span>
                <span class="nn">LookupString</span><span class="p">::</span><span class="nf">try_from</span><span class="p">(</span><span class="n">lookup</span><span class="p">)</span><span class="o">?</span>
            <span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">country</span><span class="p">)</span> <span class="o">=</span> <span class="n">value</span><span class="py">.country</span> <span class="p">{</span>
            <span class="n">s</span><span class="py">.country</span> <span class="o">=</span> <span class="nf">Some</span><span class="p">(</span>
                <span class="nn">CountryCode</span><span class="p">::</span><span class="nf">try_from</span><span class="p">(</span><span class="n">country</span><span class="p">)</span><span class="o">?</span>
            <span class="p">)</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">version</span><span class="p">)</span> <span class="o">=</span> <span class="n">value</span><span class="py">.version</span> <span class="p">{</span>
            <span class="n">s</span><span class="py">.version</span> <span class="o">=</span> <span class="nf">Some</span><span class="p">(</span>
                <span class="nn">VersionType</span><span class="p">::</span><span class="nf">try_from</span><span class="p">(</span><span class="n">version</span><span class="p">)</span><span class="o">?</span>
            <span class="p">)</span>
        <span class="p">}</span>

        <span class="c1">// ...</span>

        <span class="nf">Ok</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This is as clean as it gets (if you got a cleaner solution, please reach out, I
want to know your wizardly way). We have a shiny new method that takes a
<code>QueryParams</code> and returns a <code>Result&lt;QueryFilters, String&gt;</code>, that&#8217;s all we need
for the remaining step.</p>
</div>
<div class="paragraph">
<p>With this new <code>try_from()</code> we can go back to our handler function and adjust the
code to validate our stuff</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="k">pub</span> <span class="k">async</span> <span class="k">fn</span> <span class="nf">summary_function</span><span class="p">(</span><span class="n">params</span><span class="p">:</span> <span class="nn">web</span><span class="p">::</span><span class="n">Query</span><span class="o">&lt;</span><span class="n">QueryParams</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">impl</span> <span class="n">Responder</span> <span class="p">{</span>
    <span class="k">match</span> <span class="nn">QueryFilters</span><span class="p">::</span><span class="nf">try_from</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">Ok</span><span class="p">(</span><span class="n">filters</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
            <span class="c1">// Successfully validated all the query params</span>
            <span class="c1">// More logic here</span>
        <span class="p">},</span>
        <span class="nf">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
            <span class="nn">HttpResponse</span><span class="p">::</span><span class="nf">BadRequest</span><span class="p">()</span><span class="nf">.body</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see I&#8217;m validating stuff inside the function, in case
something is invalid we&#8217;re returning a <code>400 Bad Request</code> with the error message
in its body. This is not that bad, but this will inevitably lead to a lot of
redundant, duplicated code, and that&#8217;s not what I want.</p>
</div>
<div class="paragraph">
<p>Recall extractors? Yes, we can implement our own! We just need to implement
<code>FromRequest</code> after all. That way we can use <code>actix_web</code> magic to hide this
validation logic. To implement <code>FromRequest</code> for our <code>QueryFilters</code> type we just
need to implement <code>from_request</code>, which is a method that will return a <code>Future</code>
of type <code>Ready&lt;Result&lt;QueryFilters, actix_web::Error&gt;&gt;</code>. Don&#8217;t be scared of the
verbosity of Rust, it&#8217;s easier than what you may think.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="k">impl</span> <span class="n">FromRequest</span> <span class="k">for</span> <span class="n">QueryFilters</span> <span class="p">{</span>
    <span class="k">type</span> <span class="n">Error</span> <span class="o">=</span> <span class="nn">actix_web</span><span class="p">::</span><span class="n">Error</span><span class="p">;</span>
    <span class="k">type</span> <span class="n">Future</span> <span class="o">=</span> <span class="n">Ready</span><span class="o">&lt;</span><span class="nb">Result</span><span class="o">&lt;</span><span class="k">Self</span><span class="p">,</span> <span class="k">Self</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="p">;</span>

    <span class="k">fn</span> <span class="nf">from_request</span><span class="p">(</span><span class="n">req</span><span class="p">:</span> <span class="o">&amp;</span><span class="nn">actix_web</span><span class="p">::</span><span class="n">HttpRequest</span><span class="p">,</span> <span class="n">_</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="nn">actix_web</span><span class="p">::</span><span class="nn">dev</span><span class="p">::</span><span class="n">Payload</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span><span class="p">::</span><span class="n">Future</span> <span class="p">{</span>
        <span class="c1">// 1. Extract `QueryParams` from the request, this</span>
        <span class="c1">//    is the same thing that happens in the very first</span>
        <span class="c1">//    handler implementation with `web::Query&lt;QueryParams&gt;`</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">query_params</span><span class="p">)</span> <span class="o">=</span> <span class="nn">web</span><span class="p">::</span><span class="nn">Query</span><span class="p">::</span><span class="o">&lt;</span><span class="n">QueryParams</span><span class="o">&gt;</span><span class="p">::</span><span class="nf">extract</span><span class="p">(</span><span class="n">req</span><span class="p">)</span><span class="nf">.into_inner</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">match</span> <span class="nn">QueryFilters</span><span class="p">::</span><span class="nf">try_from</span><span class="p">(</span><span class="n">query_params</span><span class="nf">.into_inner</span><span class="p">())</span> <span class="p">{</span>
                <span class="c1">// 2. Try to validate data</span>
                <span class="nf">Ok</span><span class="p">(</span><span class="n">filters</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nf">ready</span><span class="p">(</span><span class="nf">Ok</span><span class="p">(</span><span class="n">filters</span><span class="p">)),</span>
                <span class="c1">// 3. If data is invalid return 400 Bad Request</span>
                <span class="nf">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nf">ready</span><span class="p">(</span><span class="nf">Err</span><span class="p">(</span><span class="nf">ErrorBadRequest</span><span class="p">(</span><span class="n">e</span><span class="p">)))</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// 4. If initial `QueryParams` is incorrect, still return 400 Bad Request</span>
        <span class="nf">ready</span><span class="p">(</span><span class="nf">Err</span><span class="p">(</span><span class="nf">ErrorBadRequest</span><span class="p">(</span><span class="s">"incorrect query params."</span><span class="p">)))</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>QueryFilters</code> now has got superpowers in the land of <code>actix_web</code>, let&#8217;s put it to use.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="k">pub</span> <span class="k">async</span> <span class="k">fn</span> <span class="nf">summary_function</span><span class="p">(</span><span class="n">params</span><span class="p">:</span> <span class="n">QueryFilters</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">impl</span> <span class="n">Responder</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>I mean, how cool is that?! By using Rust type-safety and <code>actix_web</code> extractors
we&#8217;re now guaranteed that if that function will ever get triggered, it will
contain valid query params. If not, the user will be yeeted with a specific
error message that points out what is wrong with the first query param that did
not succeed validation.</p>
</div>
<div class="paragraph">
<p>If you reached this point, thank you! I would like to show another cool
extractor example that I&#8217;ve used in other projects that needed JWT
authentication just to give you an idea of what you can actually achieve with
these cool little objects.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="nd">#[derive(Serialize,</span> <span class="nd">Deserialize)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">AuthenticationToken</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="n">email</span><span class="p">:</span> <span class="nb">String</span>
<span class="p">}</span>

<span class="nd">#[derive(Debug,</span> <span class="nd">Serialize,</span> <span class="nd">Deserialize)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">Claims</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="n">email</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="k">pub</span> <span class="n">exp</span><span class="p">:</span> <span class="nb">i64</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">FromRequest</span> <span class="k">for</span> <span class="n">AuthenticationToken</span> <span class="p">{</span>
    <span class="k">type</span> <span class="n">Error</span> <span class="o">=</span> <span class="nn">actix_web</span><span class="p">::</span><span class="n">Error</span><span class="p">;</span>
    <span class="k">type</span> <span class="n">Future</span> <span class="o">=</span> <span class="n">Ready</span><span class="o">&lt;</span><span class="nb">Result</span><span class="o">&lt;</span><span class="k">Self</span><span class="p">,</span> <span class="k">Self</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="p">;</span>

    <span class="k">fn</span> <span class="nf">from_request</span><span class="p">(</span><span class="n">req</span><span class="p">:</span> <span class="o">&amp;</span><span class="nn">actix_web</span><span class="p">::</span><span class="n">HttpRequest</span><span class="p">,</span> <span class="n">_</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="nn">actix_web</span><span class="p">::</span><span class="nn">dev</span><span class="p">::</span><span class="n">Payload</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span><span class="p">::</span><span class="n">Future</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">bearer</span><span class="p">)</span> <span class="o">=</span> <span class="nn">BearerAuth</span><span class="p">::</span><span class="nf">extract</span><span class="p">(</span><span class="n">req</span><span class="p">)</span><span class="nf">.into_inner</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">secret</span> <span class="o">=</span> <span class="n">req</span><span class="py">.app_data</span><span class="p">::</span><span class="o">&lt;</span><span class="nn">web</span><span class="p">::</span><span class="n">Data</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;&gt;</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">();</span>

            <span class="k">let</span> <span class="n">decode</span><span class="p">:</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">TokenData</span><span class="o">&lt;</span><span class="n">Claims</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">JwtError</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nn">decode</span><span class="p">::</span><span class="o">&lt;</span><span class="n">Claims</span><span class="o">&gt;</span><span class="p">(</span>
                <span class="n">bearer</span><span class="nf">.token</span><span class="p">(),</span>
                <span class="o">&amp;</span><span class="nn">DecodingKey</span><span class="p">::</span><span class="nf">from_secret</span><span class="p">(</span><span class="n">secret</span><span class="nf">.as_str</span><span class="p">()</span><span class="nf">.as_ref</span><span class="p">()),</span>
                <span class="o">&amp;</span><span class="nn">Validation</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="nn">jsonwebtoken</span><span class="p">::</span><span class="nn">Algorithm</span><span class="p">::</span><span class="n">HS256</span><span class="p">)</span>
            <span class="p">);</span>

            <span class="k">return</span> <span class="k">match</span> <span class="n">decode</span> <span class="p">{</span>
                <span class="nf">Ok</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nf">ready</span><span class="p">(</span><span class="nf">Ok</span><span class="p">(</span><span class="n">AuthenticationToken</span> <span class="p">{</span> <span class="n">email</span><span class="p">:</span> <span class="n">token</span><span class="py">.claims.email</span> <span class="p">})),</span>
                <span class="nf">Err</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nf">ready</span><span class="p">(</span><span class="nf">Err</span><span class="p">(</span><span class="nf">ErrorUnauthorized</span><span class="p">(</span><span class="s">"Invalid token"</span><span class="p">)))</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nf">ready</span><span class="p">(</span><span class="nf">Err</span><span class="p">(</span><span class="nf">ErrorUnauthorized</span><span class="p">(</span><span class="s">"Unauthorized"</span><span class="p">)))</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This is an extractor that can be used to take the <code>Authentication: Bearer
&lt;token&gt;</code> from each request that the server receives, check that it&#8217;s a valid
token, extract the data that&#8217;s in it and return a type-safe struct containing
that data. If you want to protect and endpoint you just have to include
<code>AuthorizationToken</code> in your handler function, just like this</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="k">pub</span> <span class="k">async</span> <span class="k">fn</span> <span class="nf">protected_route</span><span class="p">(</span><span class="n">auth</span><span class="p">:</span> <span class="n">AuthenticationToken</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">impl</span> <span class="n">Responder</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Yet again, super clean and intuitive, now you can code your logic inside that
function knowing that if a request reaches that point it&#8217;s going to be from an
authenticated user, granted 100%.</p>
</div>
<div class="paragraph">
<p>I&#8217;ve worked with a lot of frameworks in the past, with all kinds of different
languages, but this is a game changer for me, and I didn&#8217;t even scratch the
surface of what you can actually do with <code>actix_web</code> and Rust. I&#8217;m starting to see
why this is praised this much.</p>
</div>
<div class="paragraph">
<p>Hope you enjoyed this <em>deep dive</em> into what I&#8217;m doing and how, I&#8217;ll see you next
week with more updates on the APIs!</p>
</div>]]></content><author><name>Mattia Righetti</name></author><summary type="html"><![CDATA[Here we are with another update, we&#8217;re starting to get serious this time around.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattrighetti.com/assets/images/gsoc-thumb.jpg" /><media:content medium="image" url="https://mattrighetti.com/assets/images/gsoc-thumb.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GSoC 2023: Week 3</title><link href="https://mattrighetti.com/2023/05/25/gsoc-week-3.html" rel="alternate" type="text/html" title="GSoC 2023: Week 3" /><published>2023-05-25T00:00:00+00:00</published><updated>2023-05-25T00:00:00+00:00</updated><id>https://mattrighetti.com/2023/05/25/gsoc-week-3</id><content type="html" xml:base="https://mattrighetti.com/2023/05/25/gsoc-week-3.html"><![CDATA[<div class="paragraph">
<p>Hey there! This has been yet another <em>reading code</em> week, again :) but bear with
me a little longer.</p>
</div>
<div class="paragraph">
<p>If you read the previous articles you already know that coding should start on
the 29th of May, before that date you should spend time bonding with the
community and other people participating in GSoC 2023.</p>
</div>
<div class="paragraph">
<p>I did write some more (very little) filtering logic for query params that might
come with each request, you can find all those in the
<a href="https://metrics.torproject.org/onionoo.html#parameters">onionoo protocol
specifications</a>. Later this week I&#8217;m also going to setup an initial CI/CD
pipeline to automatically test code when commits are pushed to any remote branch
so that I&#8217;m sure I&#8217;m not pushing broken stuff.</p>
</div>
<div class="paragraph">
<p>Plus, I&#8217;ve also started to lay down another crucial thing that I
talked about last week: <strong>responses &#8594; table columns</strong> mappings.</p>
</div>
<div class="paragraph">
<p>Right now the Network Status Team is loading data into their databases and we&#8217;re
going to have access to the new instance
<a href="https://gitlab.torproject.org/tpo/tpa/team/-/issues/41167">next week</a> as the
issue is getting noticed and is moving forward.</p>
</div>
<div class="paragraph">
<p>I had to write down where data is to be queried and how, because there were some
mismatches in responses field names and table columns. A first attempt to
illustrate the mappings is provided in this
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/networkstatusapi/-/issues/1">issue</a>
and is now being discussed with other community members.</p>
</div>
<div class="paragraph">
<p>This docs will be necessary when I&#8217;ll have to actually query the databases to
contruct the responses that the service returns. I still don&#8217;t have access to pg
as you know, but I can replicate a mirrored instance locally with docker since I have the
entire
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/descriptorParser/-/tree/main/src/main/sql">database
schema</a> at my disposal, and you have too of course.</p>
</div>
<div class="paragraph">
<p>This is how the database currently looks
(<a href="https://mattrighetti.com/assets/images/tor_metrics_postgres.png">full image</a>)</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/images/tor_metrics_postgres.png" alt="tor metrics postgres">
</div>
</div>
<div class="paragraph">
<p>Things are going smoothly for the moment, the project is almost 100%
setup and soon I&#8217;ll start to code the APIs. I&#8217;ve now participated in more
than two weekly meetings and I&#8217;m starting to understand more of how the Tor
Project community operates and I&#8217;m happy to be part of it.</p>
</div>
<div class="paragraph">
<p>See you next week for more updates!</p>
</div>]]></content><author><name>Mattia Righetti</name></author><summary type="html"><![CDATA[Hey there! This has been yet another reading code week, again :) but bear with me a little longer.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattrighetti.com/assets/images/gsoc-thumb.jpg" /><media:content medium="image" url="https://mattrighetti.com/assets/images/gsoc-thumb.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GSoC 2023: Week 2</title><link href="https://mattrighetti.com/2023/05/18/gsoc-week-2.html" rel="alternate" type="text/html" title="GSoC 2023: Week 2" /><published>2023-05-18T00:00:00+00:00</published><updated>2023-05-18T00:00:00+00:00</updated><id>https://mattrighetti.com/2023/05/18/gsoc-week-2</id><content type="html" xml:base="https://mattrighetti.com/2023/05/18/gsoc-week-2.html"><![CDATA[<div class="paragraph">
<p>Week #2 is still supposed to be dedicated to community bonding and other prepping
stuff that&#8217;s going to be needed before the coding part starts (29th May).</p>
</div>
<div class="paragraph">
<p>This is not strictly enforced and nobody prevents you from actually writing some
code before May 29th. I&#8217;ve indeed started coding this week, not a lot but the
bare minimum project setup.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s start by saying that the service is going to be almost identical to the
current <strong>onionoo</strong> protocol, which currently exposes six different endpoints:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>/summary</code></p>
</li>
<li>
<p><code>/details</code></p>
</li>
<li>
<p><code>/bandwidth</code></p>
</li>
<li>
<p><code>/weights</code></p>
</li>
<li>
<p><code>/clients</code></p>
</li>
<li>
<p><code>/uptime</code></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Plus, the new service is adding historical data querying, so we&#8217;re introducing
two more endpoints:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>/history/summary</code></p>
</li>
<li>
<p><code>/history/clients</code></p>
</li>
</ol>
</div>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>Well, actually this is not yet decided. We'll have to see if we want two more endpoints or just add more query params to handle this.</p>
          </div>
        </div>
<div class="paragraph">
<p>Each endpoint accepts HTTP <code>GET</code> methods. With all this info I went ahead and
coded this very small part of the webserver.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s start with the least number of dependencies which in this case are
<code>actix_web</code>, <code>sqlx</code>, <code>tokio</code> and <code>env_logger</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="toml"><span class="nn">[dependencies]</span>
<span class="py">actix-web</span> <span class="p">=</span> <span class="s">"4"</span>
<span class="nn">tokio</span> <span class="o">=</span> <span class="p">{</span> <span class="py">version</span> <span class="p">=</span> <span class="s">"1"</span><span class="p">,</span> <span class="py">features</span> <span class="p">=</span> <span class="p">[</span><span class="s">"macros"</span><span class="p">,</span> <span class="s">"rt-multi-thread"</span><span class="p">]</span> <span class="p">}</span>
<span class="nn">reqwest</span> <span class="o">=</span> <span class="p">{</span> <span class="py">version</span> <span class="p">=</span> <span class="s">"0.11"</span><span class="p">,</span> <span class="py">features</span> <span class="p">=</span> <span class="nn">["json"]</span> <span class="p">}</span>
<span class="nn">serde</span> <span class="o">=</span> <span class="p">{</span> <span class="py">version</span> <span class="p">=</span> <span class="s">"1"</span><span class="p">,</span> <span class="py">features</span> <span class="p">=</span> <span class="nn">["derive"]</span> <span class="p">}</span>
<span class="py">env_logger</span> <span class="p">=</span> <span class="s">"0.10.0"</span>

<span class="nn">[dependencies.sqlx]</span>
<span class="py">version</span> <span class="p">=</span> <span class="s">"0.6"</span>
<span class="py">default-features</span> <span class="p">=</span> <span class="kc">false</span>
<span class="py">features</span> <span class="p">=</span> <span class="p">[</span>
    <span class="s">"runtime-tokio-rustls"</span><span class="p">,</span>
    <span class="s">"macros"</span><span class="p">,</span>
    <span class="s">"postgres"</span><span class="p">,</span>
    <span class="s">"uuid"</span><span class="p">,</span>
    <span class="s">"chrono"</span><span class="p">,</span>
    <span class="s">"migrate"</span><span class="p">,</span>
    <span class="s">"offline"</span>
<span class="p">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>For those of you who don&#8217;t know: <code>actix_web</code> is the web framework that I&#8217;m going
to use for this project, <code>tokio</code> is the async runtime that integrates perfectly
with <code>actix_web</code> and is the de-facto standard in Rust and <code>sqlx</code> is my framework
of choice when I have to work with databases.</p>
</div>
<div class="paragraph">
<p>With all the above I should have the bare minimum configuration to get started with the basics of
the project.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="rust"><span class="k">pub</span> <span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="n">listener</span><span class="p">:</span> <span class="n">TcpListener</span><span class="p">,</span> <span class="n">db_pool</span><span class="p">:</span> <span class="n">PgPool</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Server</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">db_pool</span> <span class="o">=</span> <span class="nn">web</span><span class="p">::</span><span class="nn">Data</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">db_pool</span><span class="p">);</span>

    <span class="nn">std</span><span class="p">::</span><span class="nn">env</span><span class="p">::</span><span class="nf">set_var</span><span class="p">(</span><span class="s">"RUST_LOG"</span><span class="p">,</span> <span class="s">"actix_web=info"</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="nn">env_logger</span><span class="p">::</span><span class="nf">try_init</span><span class="p">();</span>

    <span class="k">let</span> <span class="n">server</span> <span class="o">=</span> <span class="nn">HttpServer</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="k">move</span> <span class="p">||</span> <span class="p">{</span>
        <span class="nn">App</span><span class="p">::</span><span class="nf">new</span><span class="p">()</span>
            <span class="nf">.wrap</span><span class="p">(</span><span class="nn">middleware</span><span class="p">::</span><span class="nn">Logger</span><span class="p">::</span><span class="nf">default</span><span class="p">())</span>
            <span class="nf">.app_data</span><span class="p">(</span><span class="n">db_pool</span><span class="nf">.clone</span><span class="p">())</span>
            <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/summary"</span><span class="p">)</span>
                <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
            <span class="p">)</span>
            <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/details"</span><span class="p">)</span>
                <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
            <span class="p">)</span>
            <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/bandwidth"</span><span class="p">)</span>
                <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
            <span class="p">)</span>
            <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/weights"</span><span class="p">)</span>
                <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
            <span class="p">)</span>
            <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/clients"</span><span class="p">)</span>
                <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
            <span class="p">)</span>
            <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/uptime"</span><span class="p">)</span>
                <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
            <span class="p">)</span>
            <span class="nf">.service</span><span class="p">(</span>
                <span class="nn">web</span><span class="p">::</span><span class="nf">scope</span><span class="p">(</span><span class="s">"/history"</span><span class="p">)</span>
                    <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/summary"</span><span class="p">)</span>
                        <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
                    <span class="p">)</span>
                    <span class="nf">.service</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">resource</span><span class="p">(</span><span class="s">"/clients"</span><span class="p">)</span>
                        <span class="nf">.route</span><span class="p">(</span><span class="nn">web</span><span class="p">::</span><span class="nf">get</span><span class="p">()</span><span class="nf">.to</span><span class="p">(</span><span class="n">not_implemented</span><span class="p">))</span>
                    <span class="p">)</span>
            <span class="p">)</span>
    <span class="p">})</span>
    <span class="nf">.listen</span><span class="p">(</span><span class="n">listener</span><span class="p">)</span><span class="o">?</span>
    <span class="nf">.run</span><span class="p">();</span>

    <span class="nf">Ok</span><span class="p">(</span><span class="n">server</span><span class="p">)</span>
<span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>I&#8217;ve created this <code>run</code> method that spins up the server by taking a <code>TcpListener</code> and the database pool, this
will come in handy for testing where we would like to bind the webserver to different ports and addresses and maybe
use a local database instance.</p>
</div>
<div class="paragraph">
<p>As you can see, I&#8217;m creating multiple different services. Each one of those will
get triggered when an HTTP GET request hits the endpoint as the <code>web::get()</code>
points out (more on that in future articles). This is all you need to start a
simple server with Rust and <code>actix_web</code>!</p>
</div>
<div class="paragraph">
<p>I&#8217;m currently not going to implement much more than this as I am still going through
the current onionoo service and waiting for
<a href="https://gitlab.torproject.org/tpo/tpa/team/-/issues/41167">Postgres access</a>.</p>
</div>
<div class="paragraph">
<p>I&#8217;ve also went ahead and wrote down the response structs along with their docs,
that took a strong hour just to type everything out as some
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/networkstatusapi/-/tree/dev/src/models/responses">responses</a>
are pretty big and going back and forth to copy the documentation took a bit of
time, no big deal.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s take a look at the current
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/onionoo">onionoo</a>
project instead. It&#8217;s written in Java and it seems to be using Servlets. Since it&#8217;s a
web protocol there must be an entry-point that handles HTTP requests</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell session">$ tree src/main/java/org/torproject/metrics/onionoo/ -L1
.
├── cron
├── docs
├── package-info.java
├── server
├── updater
├── util
└── writer</code></pre>
</div>
</div>
<div class="paragraph">
<p>If we inspect the server package we can see that there&#8217;s a Java class named
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/onionoo/-/blob/master/src/main/java/org/torproject/metrics/onionoo/server/ServerMain.java"><code>ServerMain</code></a>
that does start the server. Also,
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/onionoo/-/blob/master/src/main/java/org/torproject/metrics/onionoo/server/ServerMain.java"><code>ResourceServlet</code></a>
is the class that handles the current HTTP GET requests. It wraps the request in
an <a href="https://gitlab.torproject.org/tpo/network-health/metrics/onionoo/-/blob/master/src/main/java/org/torproject/metrics/onionoo/server/HttpServletRequestWrapper.java"><code>HttpServletRequestWrapper</code></a>
which exposes useful getters for the incoming request.</p>
</div>
<div class="paragraph">
<p><code>ResourceServlet</code>
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/onionoo/-/blob/master/src/main/java/org/torproject/metrics/onionoo/server/ResourceServlet.java#L115-135">determines</a>
which kind of request it received and then goes through a lot of logic, a lot of
that involves building different kind of responses depending on which query
parameters the requestor is providing, and eventually returns a
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/onionoo/-/blob/master/src/main/java/org/torproject/metrics/onionoo/server/ResourceServlet.java#L453-459">response</a>.</p>
</div>
<div class="paragraph">
<p>I&#8217;m not gonna bore you with the details, you can take a look at the servlet if
you want to.</p>
</div>
<div class="paragraph">
<p>As I said before, I&#8217;m waiting for TLS access to the Postgres instance, but until
that&#8217;s a thing I have the
<a href="https://gitlab.torproject.org/tpo/network-health/metrics/descriptorParser/-/tree/main/src/main/sql">database
schema</a> so I can replicate it locally. This will be especially useful
in the future when I&#8217;m going to use <code>sqlx</code> macros to statically check SQL
queries.</p>
</div>
<div class="paragraph">
<p>That&#8217;s it for this week, things are still a bit quiet for the moment as I&#8217;m
basically going through pre-existing codebases but that must be done to get the
whole picture but it&#8217;s also a good exercise for every software dev, reading
other&#8217;s people code is hard :) ! So, the more you do it, the better you get at
it.</p>
</div>
<div class="paragraph">
<p>See you next week for more updates!</p>
</div>]]></content><author><name>Mattia Righetti</name></author><summary type="html"><![CDATA[Week #2 is still supposed to be dedicated to community bonding and other prepping stuff that&#8217;s going to be needed before the coding part starts (29th May).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattrighetti.com/assets/images/gsoc-thumb.jpg" /><media:content medium="image" url="https://mattrighetti.com/assets/images/gsoc-thumb.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GSoC 2023: Week 1</title><link href="https://mattrighetti.com/2023/05/11/gsoc-week-1.html" rel="alternate" type="text/html" title="GSoC 2023: Week 1" /><published>2023-05-11T00:00:00+00:00</published><updated>2023-05-11T00:00:00+00:00</updated><id>https://mattrighetti.com/2023/05/11/gsoc-week-1</id><content type="html" xml:base="https://mattrighetti.com/2023/05/11/gsoc-week-1.html"><![CDATA[<div class="paragraph">
<p>Since I&#8217;m trying to write more and more, I decided to try and commit to keep you
up-to-date with the progress of the project I&#8217;m working on for GSoC 2023.</p>
</div>
<div class="paragraph">
<p>This could be a nice opportunity for me to talk about the project, the tech
stack that I&#8217;m using and issues I&#8217;m going to deal with during the entire
journey. And also give you some little insights on the Tor Project, why not?</p>
</div>
<div class="paragraph">
<p>Let&#8217;s start off by saying that community members try to keep discussions about
everything that concerns the project on publicly accessible channels:
communication happens mostly on IRC, specifically on <a href="https://www.oftc.net">oftc</a>.</p>
</div>
<div class="paragraph">
<p>There are three main channels:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>#tor-project</code> is the main channel where community members talk about the
project in general</p>
</li>
<li>
<p><code>#tor-dev</code> where people talk about dev related topics</p>
</li>
<li>
<p><code>#tor-meeting</code> where each monday different teams at different time slots give
updates on their progress on different projects</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Each of those IRC channels is also mirrored on <a href="https://matrix.org">Matrix</a> if you
prefer that.</p>
</div>
<div class="paragraph">
<p>Week 1 is the so-called <strong>community bonding</strong> period, which is probably the best
thing that you can get out of GSoC accoring to a lot of people that did it in
the past (<a href="https://news.ycombinator.com/item?id=35194002">see here</a>).</p>
</div>
<div class="paragraph">
<p>That&#8217;s what I did, I spent this week getting to know my mentors and the Tor
Project itself, me and other GSoC mentees participated in a meeting where we
explained what we are going to work on and why. I&#8217;ve coded very little during
this period, it&#8217;s not what you should do at this very stage really so I don&#8217;t
have a lot to share about that.</p>
</div>
<div class="paragraph">
<p>Before leaving, I would like to talk a bit more about the project for those of
you who want a TLDR of the proposal that I linked last week in my
<a href="https://mattrighetti.com/2023/05/05/i-am-officially-a-gsoc-2023-contributor.html">article</a>.</p>
</div>
<div class="paragraph">
<p>If you take a look at the <a href="https://metrics.torproject.org/rs.html#search">Tor relay
search</a> page, you can query a lot of different info about Tor relays and
bridges. That page uses the <a href="https://metrics.torproject.org/onionoo.html">onionoo</a>
protocol to get all the data about the Tor network.</p>
</div>
<div class="paragraph">
<p>The issue that the Network Status team is facing is that the data retrivial
process on the backend is very I/O bound since it works by creating files and
aggregating data from them in responses. This of course uses a lot of resources
and is slowing down the service. In order to solve this, a lot of the data in
those files are now being moved to a big Postgres instance so that the service
can scale accordingly to user demand. Not only that, but data is also going to
be pushed in a VictoriaMetrics timeseries database so that we can provide
historical data about relays and bridges.</p>
</div>
<div class="paragraph">
<p>The project I&#8217;m working on does exactly that: exposes APIs that will return data
queried from those two instances, hopefully making onionoo obsolete. We decided
to go for Rust and <code>actix_web</code> for the service framework because it&#8217;s
<a href="https://www.techempower.com/benchmarks/#section=data-r21">one of the the fastes</a>
and reliable out there, both crucial factors in this case. I&#8217;ve used <code>actix_web</code>
a couple of times for simpler personal services before so I&#8217;m in no way an
expert of the framework but that&#8217;s the very reason why I applied for this exact
project: learn more about <code>actix_web</code> and work with Rust, all of this
contributing to the FOSS community.</p>
</div>
<div class="paragraph">
<p>I&#8217;ll see you next week with more updates.</p>
</div>]]></content><author><name>Mattia Righetti</name></author><summary type="html"><![CDATA[Since I&#8217;m trying to write more and more, I decided to try and commit to keep you up-to-date with the progress of the project I&#8217;m working on for GSoC 2023.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattrighetti.com/assets/images/gsoc-thumb.jpg" /><media:content medium="image" url="https://mattrighetti.com/assets/images/gsoc-thumb.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">I’m Officially a GSoC 2023 Contributor</title><link href="https://mattrighetti.com/2023/05/05/i-am-officially-a-gsoc-2023-contributor.html" rel="alternate" type="text/html" title="I’m Officially a GSoC 2023 Contributor" /><published>2023-05-05T00:00:00+00:00</published><updated>2023-05-05T00:00:00+00:00</updated><id>https://mattrighetti.com/2023/05/05/i-am-officially-a-gsoc-2023-contributor</id><content type="html" xml:base="https://mattrighetti.com/2023/05/05/i-am-officially-a-gsoc-2023-contributor.html"><![CDATA[<div class="paragraph">
<p>I&#8217;m super excited to annouce that my proposal for
<a href="https://summerofcode.withgoogle.com">Google Summer of Code 2023</a> has been
accepted and I will work with the <a href="https://www.torproject.org">Tor project</a> org.,
specifically I will design their <strong>Network Status APIs</strong> from the ground-up
(kind-of) using <a href="https://actix.rs"><code>actix_web</code></a> and Rust.</p>
</div>
<div class="paragraph">
<p>The Tor Project is a non-profit organization that develops and maintains the Tor
network, which is a free and open-source software project that helps to protect
user privacy and security online.</p>
</div>
<div class="paragraph">
<p>Tor works by encrypting user traffic and routing it through a series of relays,
making it difficult for anyone to trace the user&#8217;s internet activity back to
their physical location. This makes it an effective tool for protecting against
surveillance, censorship, and other forms of online tracking.</p>
</div>
<div class="paragraph">
<p><strong>The Tor network is particularly useful for journalists, activists, and other
individuals who need to communicate or access information securely and
anonymously. It can also be used by anyone who is concerned about their online
privacy and wants to avoid being tracked by third parties, such as advertisers
or governments.</strong></p>
</div>
<div class="paragraph">
<p>In addition to the Tor network, the Tor Project also develops and maintains a
number of related tools and services, such as the Tor Browser, which is a web
browser that allows users to access the internet through the Tor network. They
also provide resources and support for developers who want to incorporate Tor
into their own applications or services.</p>
</div>
<div class="paragraph">
<p>Overall, the Tor Project is a valuable resource for anyone who wants to protect
their online privacy and security, and it plays an important role in promoting
freedom of expression and access to information online.</p>
</div>
<div class="paragraph">
<p>I&#8217;ve been using Tor for at least 7 solid years and this was one of the driving
factors that got me interested in the project, being a privacy maniac myself
it&#8217;s something that I&#8217;ve always wanted to contribute to.</p>
</div>
<div class="paragraph">
<p>Moving to the program itself, for those of you who don&#8217;t know what GSoC is:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Google Summer of Code is a global, online mentoring program focused on
introducing new contributors to open source software development. GSoC
contributors work on a 12+ week programming project with the guidance of mentors
from their open source organization.  During Google Summer of Code,
participating contributors are paired with mentors from open source
organizations, gaining exposure to real-world software development techniques.</p>
</div>
<div class="paragraph">
<p>Contributors will learn from experienced open source developers while writing
code for real-world projects! A small stipend is provided as an incentive.</p>
</div>
<div class="paragraph">
<p>Participating organizations use the program to identify and bring in new,
excited developers. Many of those new developers will continue to contribute to
their new communities and open source long after GSoC is over.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>I applied for GSoC back in March, it&#8217;s usually a bit late to apply because in
order to maximize your chances you should start to interact with the community
~1-2 months before submitting your proposal and/or contributing with PRs to
current projects. But I had nothing to loose and I really wanted to work on this
project and be part of this big open-source community, so I spent 3 days working
on this document full-time and submitted a PR to another project that my mentors
were working on. That turned out to be time super well spent! So, next year, if
you&#8217;re unsure about submitting your proposal, remember that it&#8217;s never too late.</p>
</div>
<div class="paragraph">
<p>If you&#8217;re interested in the proposal I submitted and everything that concerns
the project, you can find it
<a href="https://mattrighetti.com/assets/docs/gsoc2023.pdf">here</a>.</p>
</div>
<div class="paragraph">
<p>I will try to keep you posted during this journey and talk about what I learn
during the process, but I&#8217;m super excited to work with Rust and <code>actix_web</code> but
mostly to be a contributor of Tor Project which is vital for so many people all
around the world!</p>
</div>]]></content><author><name>Mattia Righetti</name></author><summary type="html"><![CDATA[I&#8217;m super excited to annouce that my proposal for Google Summer of Code 2023 has been accepted and I will work with the Tor project org., specifically I will design their Network Status APIs from the ground-up (kind-of) using actix_web and Rust.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattrighetti.com/assets/images/gsoc-thumb.jpg" /><media:content medium="image" url="https://mattrighetti.com/assets/images/gsoc-thumb.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ulry is Now Available on the App Store</title><link href="https://mattrighetti.com/2023/04/24/ulry-is-now-available-on-the-app-store.html" rel="alternate" type="text/html" title="Ulry is Now Available on the App Store" /><published>2023-04-24T00:00:00+00:00</published><updated>2023-04-24T00:00:00+00:00</updated><id>https://mattrighetti.com/2023/04/24/ulry-is-now-available-on-the-app-store</id><content type="html" xml:base="https://mattrighetti.com/2023/04/24/ulry-is-now-available-on-the-app-store.html"><![CDATA[<div class="paragraph">
<p>After a long wait I can finally say that Ulry has been release to the public and
can be <a href="https://apps.apple.com/it/app/ulry/id1603982621?l=en">downloaded</a> from the
App Store in this very moment.</p>
</div>
<div class="paragraph">
<p>This is without a doubt the biggest project I&#8217;ve shipped and also the second
most used one (for now), it may not seem a lot but it certainly is for me.</p>
</div>
<div class="paragraph">
<p>I&#8217;ve been working on Ulry for a long time, it&#8217;s a tool that I use daily and it
has served me well. Let me tell you the whole story of how it came to be.</p>
</div>
<div class="paragraph">
<p>A couple of years ago I started to be an active community member of HN and every
single day I started to read a bunch of articles that I found interesting. It
didn&#8217;t take long until I couldn&#8217;t keep up with the amount of cool links that are
shared there, I just couldn&#8217;t read them all, so I started to use the <em>Add To
Reading List</em> feature of Safari and that&#8217;s when it all started.</p>
</div>
<div class="paragraph">
<p>I remember that a week later the <em>Read It Later</em> section of the browser was
filled with approximately 50 articles that were interesting to me when I saved
them. Which one do I read? Why did I save this article? Why did I find this
interesting? These were the questions that I kept asking myself for the majority
of the links that were in there waiting to be read. The browser feature couldn&#8217;t
help me at all with that, let alone the poor user interface of it.</p>
</div>
<div class="paragraph">
<p>Is there a better way? Well, kind of. I started to organize links in folders and
kept them in my browser&#8217;s bookmarks section.</p>
</div>
<div class="paragraph">
<p>This lasted a couple of weeks, until I realized that in the long run I would
have ended up with hundreds of links in a single folder, that&#8217;s not easy to
navigate and to go through. I gave this alternative a chance but I knew way in
advance that I wouldn&#8217;t have liked it. The bookmarks section to me is something
that has to contain websites that you actually visit almost on a daily basis,
not something to keep a read-it-later list with hundreds of articles and
folders. That felt messy and I gave up trying.</p>
</div>
<div class="paragraph">
<p>Other solutions out there had bad UI/UX and had features that I did not want or
needed, like <em>suggest me what to read next</em>. No thanks, I don&#8217;t need an
algorithm to suggest me stuff that I will 99% of the time have no interest in
reading. I see that a lot of the read-it-later apps also try to scrape text from
the article itself so that you can totally bypass the owner&#8217;s website and a lot
of them fail at it badly by presenting you broken text or even HTML-entities
that were not processes correctly. I prefer to read content from the owner&#8217;s
website, most of the time they have cool fonts, nicer/original interfaces and/or
content that can&#8217;t be displayed on a native application.</p>
</div>
<div class="paragraph">
<p>I couldn&#8217;t find a simple but nice app that just saved links and made them easily
indexable and organizable. That&#8217;s when I decided to create my own, just for me.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell session">commit 4d5fafea6b62070bbabb9ee34f445344f6d0b2ff

Author: Mattia Righetti &lt;----------------&gt;
Date:   Thu Dec 23 15:05:51 2021 +0100

    Initial Commit</code></pre>
</div>
</div>
<div class="paragraph">
<p>This is the very first commit. After many iterations of the app and many months
later, I appreciate the time that I put into this project for a bunch of
different reasons. Mostly because now I have a tool that I enjoy using and
actually helps me manage my links. Not only that, but I got to know a bunch of
persons that liked the idea and found the app useful and use it to this day.</p>
</div>
<div class="paragraph">
<p>What makes Ulry different? It does what it&#8217;s meant for, nothing else. It&#8217;s a
link archiver, its feature is to save your links without too many hurdles,
that&#8217;s it. Well, to be fair, it also makes it easy to search for them and
organize them with categories/tags/notes but nothing more than that. If you
noticed, Ulry basically answers the questions that I kept asking myself
previously:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Which one do I read? Pick a tag and a category that you feel you want to read
and choose a link that&#8217;s in them.</p>
</li>
<li>
<p>Why did I save this/find this interesting? Read the note that you (hopefully)
attached to the link when you saved it.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Overall, it&#8217;s been a great journey and I&#8217;ve now reached a point where I feel
like the app is stable, has enough features to make me like it and can be
released to public.</p>
</div>
<div class="paragraph">
<p>I spent these final months over-obsessing over the fact that some more tests
were needed before launching it and that maybe <em>that</em> feature could be a deal
breaker if it made it to the first public release. I started to notice that I
was over complicating stuff when there was no need for it, so I decided to just
stop implementing and testing stuff, finished those little things that needed to
be done before release (mostly fixing alerts text) and submitted the app for
review to Apple.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>"If it doesn&#8217;t ship, it doesn&#8217;t exist"</p>
</div>
</blockquote>
<div class="attribution">
&#8212; Elad Gil
</div>
</div>
<div class="paragraph">
<p>Finally, I would like to thank each and every one of you that sent bug reports
and sent me kind emails during the development stage. Thanks for patiently
hanging around for this long. Now I&#8217;m going to take a little break before
introducing new features (I&#8217;ll stick around for hotfixes though :) ). In the
meantime, for those that enjoy Ulry, reviews are very welcome!</p>
</div>
<div class="paragraph">
<p>Thanks again folks!</p>
</div>]]></content><author><name>Mattia Righetti</name></author><summary type="html"><![CDATA[After a long wait I can finally say that Ulry has been release to the public and can be downloaded from the App Store in this very moment.]]></summary></entry><entry><title type="html">Notes on Python</title><link href="https://mattrighetti.com/2023/03/16/notes-on-python.html" rel="alternate" type="text/html" title="Notes on Python" /><published>2023-03-16T00:00:00+00:00</published><updated>2023-03-16T00:00:00+00:00</updated><id>https://mattrighetti.com/2023/03/16/notes-on-python</id><content type="html" xml:base="https://mattrighetti.com/2023/03/16/notes-on-python.html"><![CDATA[<div class="paragraph">
<p>Python is my main language when I&#8217;m solving leetcode problems, because I don&#8217;t
want to focus too much on language when I&#8217;m just trying to nail the quiz. I&#8217;ve
been leetcoding for a few weeks now and I wanted to show some useful methods
that I&#8217;ve learned during the process.</p>
</div>
<div class="paragraph">
<p>I&#8217;m writing this more as a personal note than an actual article, with the aim of
keeping it up-to-date for my future self. Despite my best efforts, I tend to
forget many of these things when I visit Leetcode and I haven&#8217;t been practicing
in a while.</p>
</div>
<div class="paragraph">
<p>Some of them are trivial, I know, but I used different ways to get the same
result. These are just more elegant and sometimes effortless alternatives.</p>
</div>
<div class="paragraph">
<p><strong>Last edited 16 Mar 2023</strong></p>
</div>
<hr>
<div class="sect2">
<h3 id="bit-count">Bit count</h3>
<div class="paragraph">
<p>(Python &gt;3.10)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="python"><span class="n">n</span> <span class="o">=</span> <span class="mi">4329</span>      <span class="c1"># 0b1000011101001
</span><span class="n">n</span><span class="p">.</span><span class="n">bit_count</span><span class="p">()</span> <span class="c1"># 6</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="check-if-str-is-a-number">Check if <code>str</code> is a number</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="python"><span class="s">"10"</span><span class="p">.</span><span class="n">isnumeric</span><span class="p">()</span>         <span class="c1"># True
</span><span class="s">"notAnumber"</span><span class="p">.</span><span class="n">isnumeric</span><span class="p">()</span> <span class="c1"># False</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="set-operations">Set Operations</h3>
<div class="ulist">
<ul>
<li>
<p>Intersection</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="python"><span class="nb">set</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span> <span class="o">&amp;</span> <span class="nb">set</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>  <span class="c1"># set([1,2])
</span><span class="nb">set</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]).</span><span class="n">intersection</span><span class="p">(</span><span class="nb">set</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]))</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Contains</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="python"><span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">])</span> <span class="c1"># True
</span><span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="nb">set</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>             <span class="c1"># False
</span><span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;</span> <span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>            <span class="c1"># False</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Union</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="python"><span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span> <span class="o">|</span> <span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>      <span class="c1"># set([1,2,3,4])
</span><span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]).</span><span class="n">union</span><span class="p">(</span><span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]))</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="iterate-backwards">Iterate backwards</h3>
<div class="paragraph">
<p>There are multiple ways to do this, but this is very nice imo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="python"><span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="o">~</span><span class="n">i</span><span class="p">])</span> <span class="c1"># 4 3 2 1</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="iterate-matrix-single-index">Iterate Matrix (single index)</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="python"><span class="n">mat</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>
<span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mat</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span> <span class="o">*</span> <span class="n">n</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="o">//</span><span class="n">n</span><span class="p">][</span><span class="n">i</span><span class="o">%</span><span class="n">n</span><span class="p">])</span> <span class="c1"># 0 2 3 4 5 0</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="merge-two-dictionaries">Merge two dictionaries</h3>
<div class="paragraph">
<p>(Python &gt;3.9)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="python"><span class="n">s</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="s">"abcd"</span><span class="p">}</span>
<span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="s">"lol"</span><span class="p">}</span>
<span class="n">z</span> <span class="o">=</span> <span class="n">s</span> <span class="o">|</span> <span class="n">d</span> <span class="c1"># {'a':0, 'b':0, 'c':0, 'd':0, 'l':1, 'o':1}</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="counter-intersections">Counter intersections</h3>
<div class="paragraph">
<p>Final result is going to have the keys that both <code>Counter</code> have, if
they have different values the min one is going to be kept.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="s">"heeeere"</span><span class="p">))</span>  <span class="c1"># {h: 1, e: 4, r: 1}
</span><span class="n">b</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="s">"here!"</span><span class="p">))</span>    <span class="c1"># {h: 1, e: 2, r: 1, !: 1}
</span><span class="n">z</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>                     <span class="c1"># {h: 1, e: 2, r: 1}</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="permutations-combinations">Permutations &amp; Combinations</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="python"><span class="kn">import</span> <span class="nn">itertools</span>

<span class="c1"># Order matters
</span><span class="n">c</span> <span class="o">=</span> <span class="n">itertools</span><span class="p">.</span><span class="n">combinations</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># [(0, 1), (0, 2), (1, 2)]
</span>
<span class="c1"># Order doesn't matter
</span><span class="n">p</span> <span class="o">=</span> <span class="n">itertools</span><span class="p">.</span><span class="n">permutations</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># [(0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1)]</span></code></pre>
</div>
</div>
</div>]]></content><author><name>Mattia Righetti</name></author><summary type="html"><![CDATA[Python is my main language when I&#8217;m solving leetcode problems, because I don&#8217;t want to focus too much on language when I&#8217;m just trying to nail the quiz. I&#8217;ve been leetcoding for a few weeks now and I wanted to show some useful methods that I&#8217;ve learned during the process.]]></summary></entry><entry><title type="html">I Have Been Doing CDN Caching Wrong</title><link href="https://mattrighetti.com/2023/03/05/i-have-been-doing-cdn-caching-wrong.html" rel="alternate" type="text/html" title="I Have Been Doing CDN Caching Wrong" /><published>2023-03-05T00:00:00+00:00</published><updated>2023-03-05T00:00:00+00:00</updated><id>https://mattrighetti.com/2023/03/05/i-have-been-doing-cdn-caching-wrong</id><content type="html" xml:base="https://mattrighetti.com/2023/03/05/i-have-been-doing-cdn-caching-wrong.html"><![CDATA[<div class="paragraph">
<p>One of the nice things that reaching the HN frontpage gives you is that your website,
or content in general, will get flooded by requests by the community. This is so frequent
that it gained the name <strong>Hug of Death</strong> among the HN members, because usually servers are
not able to keep up with the overwhelming clicks of the HN users and they either crash or
make you wait for minutes to get a response back.</p>
</div>
<div class="paragraph">
<p>For people that love graphs and data, this is an exciting moment because you see that cool
spike in the requests graph, going from hundreds of requests per hour to thousands. This may
be less exciting if your website is hosted on a service that will charge you based on the amount
of bandwidth that you use to serve content to your readers. It&#8217;s not my case, I don&#8217;t have to
worry about bandwidth because I host all my precious content on GitHub pages, but I still care
about performance.</p>
</div>
<div class="paragraph">
<p>The performance of my website is not that bad, on computer. On average,
<a href="https://pagespeed.web.dev">PageSpeed</a> reports a score of &gt;= 98 on computer, but
it&#8217;s not as good on mobile, which on average scores &gt;= 89.</p>
</div>
<div class="paragraph">
<p>At the time of writing, my domain is registered on Cloudflare, you can check by
yourself if you don&#8217;t trust me</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell session">$ dig NS mattrighetti.com +nostats

; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; NS mattrighetti.com +nostats
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 58683
;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;mattrighetti.com.		IN	NS

;; ANSWER SECTION:
mattrighetti.com.	42469	IN	NS	barbara.ns.cloudflare.com.
mattrighetti.com.	42469	IN	NS	jermaine.ns.cloudflare.com.</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>barbara</code> and <code>jasmine</code> are the Cloudflare nameservers, that&#8217;s the proof.</p>
</div>
<div class="paragraph">
<p>Cloudflare offers a plethora of useful features, including the visually
appealing analytics graphs that I mentioned earlier. But what really sets it
apart is its content caching capability and the ability to function as a
full-fledged CDN if you so desire.</p>
</div>
<div class="paragraph">
<p>Enough with the praising, let&#8217;s take a look at the graphs and see if everything
is working as expected.</p>
</div>
        <div class="dialog professor" title="Professor">
          <div class="dialog-head">
          <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 80 80" width="240px" height="240px"><path d="M 22.912109 9 C 19.960756 9 16.358303 9.7221658 13.375 11.421875 C 10.391697 13.121584 8 15.945797 8 19.863281 C 8 23.912396 10.891498 29.481134 13.701172 34.283203 C 16.296271 38.718537 18.669822 42.066616 19.050781 42.601562 C 17.846834 43.88996 17.980826 45.617638 18.001953 46.048828 C 18.091373 47.889143 19.090293 49.025828 20.119141 50.009766 C 21.147988 50.993703 22.29396 52.003168 23.417969 54.146484 C 23.539513 54.378162 24.004424 55.269066 24.628906 56.189453 C 25.24048 57.090816 25.918145 58.062135 27 58.542969 L 27 62 A 1.0001 1.0001 0 1 0 29 62 L 29 58.896484 C 29.354145 58.891575 29.868383 58.864096 30.429688 58.5625 C 31.787375 57.836032 31.951153 56.396403 31.988281 56.148438 A 1.0001 1.0001 0 1 0 30.011719 55.851562 C 29.992849 55.977598 29.808687 56.625296 29.484375 56.798828 A 1.0001 1.0001 0 0 0 29.484375 56.800781 C 29.32398 56.886961 29.109495 56.908203 28.824219 56.908203 C 28.42168 56.908203 28.114506 56.845583 27.839844 56.730469 A 1.0001 1.0001 0 0 0 27.837891 56.730469 C 27.590274 56.626904 26.829471 55.871519 26.283203 55.066406 C 25.736935 54.261294 25.312909 53.452119 25.189453 53.216797 C 23.919462 50.795113 22.489106 49.508516 21.501953 48.564453 C 20.5148 47.62039 20.058624 47.197857 19.998047 45.951172 C 19.976167 45.504675 19.999847 44.424134 20.576172 43.884766 C 21.028522 43.465344 21.714425 43.416172 22.232422 43.408203 C 23.766212 43.383873 24.938922 44.373548 25.3125 44.726562 A 1.0002743 1.0002743 0 1 0 26.6875 43.273438 C 26.275119 42.883757 25.089926 41.848234 23.351562 41.519531 C 23.684054 41.310892 24.051927 41.094628 24.453125 40.890625 C 25.797547 40.207705 29.03107 39.122361 33.191406 38.230469 C 33.362903 39.669244 33.848762 40.995803 34.662109 41.990234 C 35.637853 43.183182 36.971947 44 38.431641 44 L 47 44 L 47 43.970703 C 47.165836 43.983009 47.331031 44 47.5 44 C 51.713438 44 55 40.110516 55 35.5 C 55 35.333552 54.986972 35.170279 54.978516 35.005859 C 55.073803 35.01009 56.315831 35.06789 58.087891 35.404297 C 59.928007 35.753621 62.199459 36.410722 63.869141 37.503906 C 65.629152 38.655646 66.920293 40.814446 67.544922 42.654297 C 67.845362 43.539246 67.971865 44.326947 67.982422 44.830078 C 67.8245 44.776948 67.775568 44.787958 67.476562 44.662109 C 66.877167 44.409819 66.00089 44.047905 64.669922 43.699219 C 63.396201 43.366066 62.05944 43.286417 60.980469 43.095703 C 59.901498 42.904989 59.211917 42.607238 58.945312 42.208984 C 58.739458 41.900705 58.727505 41.54692 58.730469 41.353516 L 58.730469 41.351562 C 58.747339 40.563466 59.456845 39.915621 59.625 39.78125 A 1.0004882 1.0004882 0 1 0 58.375 38.21875 C 58.105295 38.434268 56.766737 39.493484 56.730469 41.3125 A 1.0001 1.0001 0 0 0 56.730469 41.316406 C 56.729579 41.371576 56.669939 42.401916 57.283203 43.320312 A 1.0001 1.0001 0 0 0 57.283203 43.322266 C 58.065599 44.491012 59.390783 44.844917 60.632812 45.064453 C 61.206024 45.165771 61.701344 45.250974 62.261719 45.326172 A 1.0001 1.0001 0 0 0 62.365234 45.669922 C 62.365234 45.669922 64.86532 50.149397 70.380859 52.326172 C 70.066178 52.387382 69.842456 52.467172 69.421875 52.509766 C 67.775834 52.676464 65.347141 52.681641 61.869141 52.681641 C 60.410926 52.681641 59.025939 52.816151 57.824219 53.234375 C 56.622499 53.652599 55.548945 54.41984 55.070312 55.630859 A 1.0001 1.0001 0 1 0 56.929688 56.367188 C 57.147056 55.817206 57.616939 55.425526 58.480469 55.125 C 59.343999 54.824474 60.544355 54.681641 61.869141 54.681641 C 62.686115 54.681641 63.272154 54.67395 63.980469 54.671875 C 63.991735 54.744254 64 54.705608 64 55 C 64 55.437053 63.877671 55.664997 63.5625 55.982422 C 63.247329 56.299847 62.713826 56.63574 62.078125 56.990234 C 60.806723 57.699222 59.073341 58.493869 58.189453 60.285156 C 56.857013 62.98452 55.733424 64.124354 53.070312 65.472656 C 51.996454 66.016788 51.078649 66.994555 50.269531 68.115234 C 49.460414 69.235914 48.788791 70.501858 48.398438 71.6875 A 1.0001 1.0001 0 1 0 50.296875 72.3125 C 50.602522 71.384142 51.198696 70.24818 51.892578 69.287109 C 52.58646 68.326039 53.408468 67.542727 53.974609 67.255859 C 56.877498 65.786161 58.534815 64.106558 59.984375 61.169922 C 60.491487 60.142209 61.715387 59.48209 63.052734 58.736328 C 63.721408 58.363447 64.404296 57.972872 64.980469 57.392578 C 65.556642 56.812284 66 55.971947 66 55 C 66 54.863078 65.984562 54.780633 65.980469 54.662109 C 67.402198 54.642097 68.628908 54.600673 69.623047 54.5 C 71.455256 54.314448 72.78119 53.916388 73.710938 52.974609 A 1.0001 1.0001 0 0 0 73.199219 51.291016 C 68.046363 50.247259 65.904396 47.324169 65.021484 45.927734 C 65.635572 46.129085 66.311463 46.339874 66.701172 46.503906 C 67.290277 46.751872 67.803666 47 68.490234 47 C 69.069103 47 69.600788 46.524089 69.783203 46.121094 C 69.965618 45.718098 70 45.334232 70 44.916016 C 70 44.079583 69.804185 43.091793 69.4375 42.011719 C 68.93179 40.522147 68.087632 38.874396 66.859375 37.494141 C 67.586499 36.16648 68 34.528283 68 32.751953 C 68 30.707785 67.458226 28.840877 66.513672 27.423828 C 65.569118 26.00678 64.148 25 62.5 25 C 62.198677 25 61.907673 25.043753 61.623047 25.107422 C 60.608562 23.557292 58.772228 22.865658 57.222656 22.474609 C 55.724809 22.096614 54.696278 22.068044 54.404297 22.054688 C 53.369258 20.624763 51.713906 19.85094 50.222656 19.474609 C 48.853601 19.129115 48.072381 19.115957 47.646484 19.091797 C 46.698895 17.029339 44.859694 15.934026 43.265625 15.457031 C 41.714286 14.992823 40.640372 15.046519 40.339844 15.052734 C 40.200011 14.970291 37.831103 13.568401 34.46875 12.085938 C 31.009066 10.56056 26.67809 9 22.912109 9 z M 22.912109 11 C 26.103129 11 30.317543 12.43944 33.662109 13.914062 C 36.591489 15.205629 38.559962 16.332428 39.078125 16.632812 C 39.031274 16.749234 39 16.874603 39 17 C 39 17.26 39.109063 17.520937 39.289062 17.710938 L 39.439453 17.830078 C 39.499453 17.870078 39.559141 17.899922 39.619141 17.919922 C 39.679141 17.949922 39.740781 17.970469 39.800781 17.980469 C 39.870781 17.990469 39.94 18 40 18 C 40.26 18 40.520938 17.890937 40.710938 17.710938 C 40.879411 17.533105 40.977202 17.29191 40.990234 17.048828 C 41.462183 17.094999 42.05333 17.182117 42.691406 17.373047 C 44.090367 17.791659 45.481694 18.583147 46.050781 20.3125 A 1.0001 1.0001 0 0 0 46.136719 20.503906 C 46.115766 20.542254 46.092861 20.580793 46.080078 20.619141 C 46.050078 20.679141 46.029531 20.740547 46.019531 20.810547 C 46.009531 20.870547 46 20.94 46 21 C 46 21.26 46.109063 21.520937 46.289062 21.710938 C 46.479062 21.890938 46.74 22 47 22 C 47.13 22 47.260859 21.979922 47.380859 21.919922 C 47.510859 21.869922 47.620937 21.800937 47.710938 21.710938 C 47.86877 21.544337 47.957243 21.320799 47.980469 21.09375 C 48.470812 21.153682 49.078329 21.246548 49.734375 21.412109 C 51.191603 21.779855 52.640369 22.505079 53.103516 23.443359 A 1.0001 1.0001 0 0 0 53.966797 24 C 53.966797 24 55.277147 24.04436 56.734375 24.412109 C 57.726571 24.6625 58.706905 25.080934 59.382812 25.617188 C 58.824296 25.86258 58.539744 25.98812 57.689453 26.361328 C 56.959362 26.681778 56.226486 27.003639 55.669922 27.248047 C 55.113358 27.492455 54.829216 27.614987 54.699219 27.673828 L 54.695312 27.675781 L 54.691406 27.677734 C 53.992541 28.001013 53.204998 28.546857 52.652344 29.335938 C 51.318755 27.899257 49.518306 27 47.5 27 C 46.088192 27 44.784831 27.445042 43.669922 28.199219 L 43.619141 28.074219 C 43.619141 28.074219 41.839903 28.806549 40.052734 29.541016 C 39.15915 29.908249 38.263012 30.277439 37.587891 30.554688 C 37.25033 30.69331 36.967179 30.808775 36.767578 30.890625 C 36.667778 30.931555 36.589701 30.964028 36.535156 30.986328 C 36.507886 30.997478 36.486666 31.006019 36.472656 31.011719 L 36.46875 31.013672 C 34.671404 31.696821 33.47822 33.590501 33.173828 36.177734 C 28.67056 37.106859 25.2554 38.241503 23.546875 39.109375 C 21.798376 39.998459 20.656347 40.983978 20.472656 41.144531 C 19.868962 40.289449 17.808667 37.342736 15.427734 33.273438 C 12.672408 28.564256 10 22.859167 10 19.863281 C 10 16.735766 11.783287 14.629244 14.365234 13.158203 C 16.947182 11.687162 20.298462 11 22.912109 11 z M 19 16 A 2 2 0 0 0 19 20 A 2 2 0 0 0 19 16 z M 35.697266 16.384766 C 35.567734 16.369922 35.433281 16.379922 35.300781 16.419922 C 34.770781 16.579922 34.470859 17.139922 34.630859 17.669922 C 34.760859 18.099922 35.159844 18.380859 35.589844 18.380859 C 35.679844 18.380859 35.779141 18.369844 35.869141 18.339844 C 36.399141 18.179844 36.700781 17.619609 36.550781 17.099609 C 36.430781 16.702109 36.085859 16.429297 35.697266 16.384766 z M 31.787109 18.501953 C 31.532109 18.481953 31.270547 18.560234 31.060547 18.740234 C 30.640547 19.100234 30.589219 19.740156 30.949219 20.160156 C 31.149219 20.390156 31.430937 20.5 31.710938 20.5 C 31.940937 20.5 32.169375 20.419766 32.359375 20.259766 C 32.779375 19.899766 32.830703 19.269609 32.470703 18.849609 C 32.290703 18.639609 32.042109 18.521953 31.787109 18.501953 z M 43.460938 20.029297 C 42.900937 20.079297 42.489297 20.549609 42.529297 21.099609 C 42.569297 21.629609 42.999297 22.029297 43.529297 22.029297 L 43.599609 22.029297 C 44.149609 21.989297 44.559531 21.510938 44.519531 20.960938 C 44.479531 20.410937 44.010937 19.999297 43.460938 20.029297 z M 40.207031 20.570312 C 40.0775 20.557344 39.943047 20.569375 39.810547 20.609375 C 39.280547 20.779375 38.990391 21.339375 39.150391 21.859375 C 39.280391 22.289375 39.679375 22.570312 40.109375 22.570312 C 40.199375 22.570312 40.300391 22.549531 40.400391 22.519531 C 40.930391 22.359531 41.220547 21.799531 41.060547 21.269531 C 40.940547 20.872031 40.595625 20.609219 40.207031 20.570312 z M 28.90625 22.005859 C 28.808594 22.015547 28.711641 22.040078 28.619141 22.080078 C 28.499141 22.130078 28.389063 22.199063 28.289062 22.289062 C 28.109062 22.479062 28 22.74 28 23 C 28 23.13 28.030078 23.260859 28.080078 23.380859 C 28.130078 23.510859 28.199063 23.610937 28.289062 23.710938 C 28.389062 23.800938 28.499141 23.869922 28.619141 23.919922 C 28.739141 23.969922 28.87 24 29 24 C 29.26 24 29.520938 23.890938 29.710938 23.710938 C 29.800938 23.610938 29.869922 23.510859 29.919922 23.380859 C 29.979922 23.260859 30 23.13 30 23 C 30 22.74 29.890937 22.479063 29.710938 22.289062 C 29.500937 22.079062 29.199219 21.976797 28.90625 22.005859 z M 37.169922 22.267578 C 36.914922 22.252578 36.654219 22.334531 36.449219 22.519531 C 36.039219 22.889531 35.999141 23.519453 36.369141 23.939453 C 36.569141 24.159453 36.839141 24.269531 37.119141 24.269531 C 37.349141 24.269531 37.589297 24.179766 37.779297 24.009766 C 38.189297 23.639766 38.229375 23.009609 37.859375 22.599609 C 37.674375 22.394609 37.424922 22.282578 37.169922 22.267578 z M 18.5 24 A 1.5 1.5 0 0 0 18.5 27 A 1.5 1.5 0 0 0 18.5 24 z M 34.800781 25.019531 C 34.740781 25.029531 34.679141 25.050078 34.619141 25.080078 C 34.559141 25.100078 34.499453 25.129922 34.439453 25.169922 C 34.389453 25.199922 34.339062 25.249063 34.289062 25.289062 C 34.109062 25.479062 34 25.74 34 26 C 34 26.26 34.109063 26.520937 34.289062 26.710938 C 34.339063 26.750938 34.389453 26.800078 34.439453 26.830078 C 34.499453 26.870078 34.559141 26.899922 34.619141 26.919922 C 34.679141 26.949922 34.740781 26.970469 34.800781 26.980469 C 34.870781 26.990469 34.94 27 35 27 C 35.06 27 35.129219 26.990469 35.199219 26.980469 C 35.259219 26.970469 35.320859 26.949922 35.380859 26.919922 C 35.440859 26.899922 35.500547 26.870078 35.560547 26.830078 C 35.610547 26.800078 35.660938 26.750937 35.710938 26.710938 C 35.750938 26.660938 35.800078 26.610547 35.830078 26.560547 C 35.870078 26.500547 35.899922 26.440859 35.919922 26.380859 C 35.949922 26.320859 35.970469 26.259219 35.980469 26.199219 C 35.990469 26.129219 36 26.06 36 26 C 36 25.94 35.990469 25.870781 35.980469 25.800781 C 35.970469 25.740781 35.949922 25.679141 35.919922 25.619141 C 35.899922 25.559141 35.870078 25.499453 35.830078 25.439453 C 35.800078 25.389453 35.750937 25.339063 35.710938 25.289062 C 35.660937 25.249062 35.610547 25.199922 35.560547 25.169922 C 35.500547 25.129922 35.440859 25.100078 35.380859 25.080078 C 35.320859 25.050078 35.259219 25.029531 35.199219 25.019531 C 35.069219 24.989531 34.930781 24.989531 34.800781 25.019531 z M 62.5 27 C 63.337 27 64.165413 27.504798 64.849609 28.53125 C 65.533805 29.557702 66 31.068121 66 32.751953 C 66 34.00733 65.737519 35.160765 65.320312 36.09375 C 65.200872 36.006694 65.089403 35.911589 64.964844 35.830078 C 63.115425 34.619215 60.926832 33.96549 59.054688 33.570312 C 59.029888 33.300341 59 33.032794 59 32.751953 C 59 31.068121 59.466195 29.557702 60.150391 28.53125 C 60.834587 27.504798 61.663 27 62.5 27 z M 57.916016 28.445312 C 57.328962 29.690383 57 31.166369 57 32.751953 C 57 32.906001 57.009389 33.055718 57.015625 33.207031 C 55.772365 33.037808 54.913216 33 54.912109 33 A 1.0001 1.0001 0 0 0 54.673828 33.027344 C 54.498232 32.374737 54.249591 31.758461 53.947266 31.179688 L 53.982422 31.185547 C 54.0947 30.58994 54.973824 29.750039 55.53125 29.492188 C 55.45871 29.525108 55.922938 29.320384 56.474609 29.078125 C 56.871683 28.903755 57.404225 28.670009 57.916016 28.445312 z M 47.5 29 C 50.466269 29 53 31.826245 53 35.5 C 53 39.173755 50.466269 42 47.5 42 C 44.533731 42 42 39.173755 42 35.5 C 42 31.826245 44.533731 29 47.5 29 z M 40.976562 31.322266 C 40.355891 32.56516 40 33.991941 40 35.5 C 40 38.077287 41.028118 40.426794 42.669922 42 L 38.431641 42 C 37.756334 42 36.895938 41.562119 36.210938 40.724609 C 35.525937 39.8871 35.042969 38.697103 35.042969 37.390625 C 35.042969 34.679516 36.061342 33.310422 37.177734 32.884766 C 37.177734 32.884766 37.179688 32.882812 37.179688 32.882812 C 37.226627 32.865252 37.212823 32.868871 37.226562 32.863281 C 37.242672 32.856681 37.265109 32.849281 37.292969 32.837891 C 37.348679 32.815111 37.427234 32.781294 37.527344 32.740234 C 37.727564 32.658134 38.009936 32.542986 38.347656 32.404297 C 39.023097 32.126919 39.918835 31.757892 40.8125 31.390625 C 40.894854 31.35678 40.894409 31.356021 40.976562 31.322266 z M 52.027344 45.986328 A 1.0001 1.0001 0 0 0 51.001953 47.056641 C 51.12024 49.123838 50.810157 50.953649 50.085938 52.595703 A 1.0001 1.0001 0 0 0 50.083984 52.597656 C 49.747402 53.362036 49.483444 53.693798 49.085938 54.595703 C 48.224157 56.549649 47.86824 58.719838 48.001953 61.056641 A 1.0001 1.0001 0 1 0 49.998047 60.943359 C 49.87976 58.876162 50.189842 57.046351 50.914062 55.404297 A 1.0001 1.0001 0 0 0 50.916016 55.402344 C 51.249338 54.645539 51.513827 54.312598 51.914062 53.404297 C 52.775843 51.450351 53.13176 49.280162 52.998047 46.943359 A 1.0001 1.0001 0 0 0 52.027344 45.986328 z M 27.988281 47.988281 A 1.0001 1.0001 0 0 0 27.167969 49.554688 C 27.834713 50.554304 28.500713 51.554304 29.167969 52.554688 A 1.0001 1.0001 0 1 0 30.832031 51.445312 C 30.165287 50.445696 29.499287 49.445696 28.832031 48.445312 A 1.0001 1.0001 0 0 0 27.988281 47.988281 z M 28 64.330078 C 27.45 64.330078 27 64.780078 27 65.330078 C 27 65.890078 27.45 66.330078 28 66.330078 C 28.55 66.330078 29 65.890078 29 65.330078 C 29 64.780078 28.55 64.330078 28 64.330078 z M 28 67.669922 C 27.45 67.669922 27 68.119922 27 68.669922 C 27 69.219922 27.45 69.669922 28 69.669922 C 28.55 69.669922 29 69.219922 29 68.669922 C 29 68.119922 28.55 67.669922 28 67.669922 z M 28.09375 71.005859 C 27.800781 70.976797 27.499063 71.079062 27.289062 71.289062 L 27.169922 71.439453 C 27.129922 71.499453 27.100078 71.559141 27.080078 71.619141 C 27.050078 71.679141 27.029531 71.740781 27.019531 71.800781 C 27.009531 71.870781 27 71.93 27 72 C 27 72.13 27.030078 72.260859 27.080078 72.380859 C 27.130078 72.500859 27.199063 72.610938 27.289062 72.710938 C 27.479062 72.890937 27.74 73 28 73 C 28.13 73 28.260859 72.969922 28.380859 72.919922 C 28.500859 72.869922 28.610937 72.800938 28.710938 72.710938 C 28.800938 72.610937 28.869922 72.500859 28.919922 72.380859 C 28.969922 72.260859 29 72.13 29 72 C 29 71.93 28.990469 71.870781 28.980469 71.800781 C 28.970469 71.740781 28.949922 71.679141 28.919922 71.619141 C 28.899922 71.559141 28.870078 71.499453 28.830078 71.439453 L 28.710938 71.289062 C 28.610938 71.199063 28.500859 71.130078 28.380859 71.080078 C 28.288359 71.040078 28.191406 71.015547 28.09375 71.005859 z"/></svg>
          </div>
          <div class="dialog-text">
          <p>Hmmm, what are your expectations though?</p>
          </div>
        </div>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>Well, everything that is served on this domain is an HTML page that does not change until I push something on GitHub, so I expect that at least the great majority of files is cached and served through Cloudflare</p>
          </div>
        </div>
<div class="paragraph">
<p>To actually see what&#8217;s really going on behind the scenes we can go to the
dashboard, and this is what it&#8217;s looking like right now.</p>
</div>
<div class="charts-container">
    <div class="chart-single-container">
        <h4>Content Type Breakdown</h4>
        <div class="ct-chart" id="chart1"></div>
    </div>
    <div class="chart-single-container">
        <h4>Bandwidth Saved</h4>
        <div class="ct-chart" id="chart2"></div>
    </div>
</div>
<script>
    var sum = function(a,b) { return a+b};
    var served_data = {
        labels: ['HTML', 'CSS', 'Empty', 'SVG', 'Other'],
        series: [45, 22, 16, 14, 2]
    };


    var cached_data = {
        labels: ['Cached', 'Uncached'],
        series: [13, 87]
    }

    var options1 = {
        chartPadding: 30,
        showLabel: true,
        height: 300,
        labelInterpolationFnc: function(value) {
            return value + ' ' + Math.round(served_data.series[served_data.labels.indexOf(value)] / served_data.series.reduce((a,b) => a+b) * 100) + '%';
        }
    };

    var options2 = {
        chartPadding: 30,
        showLabel: true,
        height: 300,
        labelInterpolationFnc: function(value) {
            return value + ' ' + Math.round(cached_data.series[cached_data.labels.indexOf(value)] / cached_data.series.reduce((a,b) => a+b) * 100) + '%';
        }
    };

    new Chartist.Pie('#chart1', served_data, options1);
    new Chartist.Pie('#chart2', cached_data, options2);
</script>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>Ouch, I did not expect this much uncached content from a completely static website!  I must be doing something wrong, right?</p>
          </div>
        </div>
<div class="paragraph">
<p>The first thing that comes to my mind is to take a look at some HTTP response headers
so that I can have a better understanding of what Cloudflare is returning upon
each request.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell session">$ curl -s \
  -D - \
  -o /dev/null \
  "https://mattrighetti.com/2023/02/22/asciidoc-liquid-and-jekyll.HTML"</code></pre>
</div>
</div>
<div class="paragraph">
<p>Let&#8217;s break down this <code>curl</code> command while we&#8217;re at it:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-s</code> &#8594; Avoid showing progress bar</p>
</li>
<li>
<p><code>-D -</code> &#8594; Dump headers to a file, but <code>-</code> sends it to stdout</p>
</li>
<li>
<p><code>-o /dev/null</code> &#8594; Ignore response body</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This is what is returned</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="response headers">&gt; HTTP/2 200
&gt; date: Fri, 24 Feb 2023 16:39:25 GMT
&gt; content-type: text/HTML; charset=utf-8
&gt; last-modified: Fri, 24 Feb 2023 09:10:51 GMT
&gt; access-control-allow-origin: *
&gt; expires: Fri, 24 Feb 2023 09:24:40 GMT
&gt; cache-control: max-age=600
&gt; x-proxy-cache: HIT
&gt; x-githubX-id: 9C30:13193:13500B1:140FF03:63F8800F
&gt; via: 1.1 varnish
&gt; age: 101
&gt; x-served-by: cache-mxp6980-MXP
&gt; x-cache: HIT
&gt; x-cache-hits: 1
&gt; x-timer: S1677256766.539307,VS0,VE1
&gt; vary: Accept-Encoding
&gt; x-fastlyX-id: 06820b4614d533aabf6555f2718a5a637c542140
&gt; cf-cache-status: DYNAMIC
&gt; server-timing: cf-q-config;dur=7.0000005507609e-06
&gt; report-to: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v3?s=O3nGiCEgvqmF7T4qHerl1eoB%2B%2BUqpM2Zz5sXuQpoOlwE38ntJnQaC0nnQkJf62iNWOJ7f16AUHlbBp2g3ePFu3%2BAOu8quDj1dM0A2F3PQsnZBnYsHjNYOhcEq7gSYSyj%2FX6E"}],"group":"cf-nel","max_age":604800}
&gt; nel: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
&gt; server: cloudflare
&gt; cf-ray: 79e9a3207ea983b2-MXP
&gt; alt-svc: h3=":443"; ma=86400, h3-29=":443"; ma=86400</code></pre>
</div>
</div>
<div class="paragraph">
<p>Most of the response headers above are garbage and are not useful for this
particular scenario. The top most ones are basically telling us that we&#8217;re using
<code>HTTP/2</code>, that the content returned is <code>text/html</code> and that the content at that
URL was last modified on a specific date.</p>
</div>
<div class="paragraph">
<p>Let me take out the most important ones by piping the previous command to <code>grep cache</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="response headers">&gt; x-proxy-cache: HIT
&gt; x-served-by: cache-mxp6980-MXP
&gt; x-cache: HIT
&gt; x-cache-hits: 1
&gt; cf-cache-status: DYNAMIC</code></pre>
</div>
</div>
<div class="paragraph">
<p>It looks like some cache is getting HIT, but CF definitely showed us the
opposite.</p>
</div>
<div class="paragraph">
<p>This would be a good time to go through their documentation, but I&#8217;ve already
done that for you so I&#8217;m going to explain what&#8217;s going on here. Quoting the
<a href="https://developers.cloudflare.com/cache/about/default-cache-behavior/">CF default
cache behavior</a>.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Cloudflare respects the origin web server&#8217;s cache headers in the following order
unless an Edge Cache TTL page rule overrides the headers.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Cloudflare does cahe the resource when:</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>The <code>Cache-Control</code> header is set to public and <code>max-age</code> is greater than 0.
Note that Cloudflare does cache the resource even if there is no <code>Cache-Control</code>
header based on status codes.</p>
</li>
<li>
<p>The <code>Expires</code> header is set to a future date.</p>
</li>
</ol>
</div>
</li>
</ol>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>I see no issue here since these two points are satisfied, but if we
go on reading we find an interesting culprit.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Cloudflare only caches based on file extension and not by MIME type. <strong>The
Cloudflare CDN does not cache HTML by default.</strong></p>
</div>
</blockquote>
</div>
        <div class="dialog professor" title="Professor">
          <div class="dialog-head">
          <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 80 80" width="240px" height="240px"><path d="M 22.912109 9 C 19.960756 9 16.358303 9.7221658 13.375 11.421875 C 10.391697 13.121584 8 15.945797 8 19.863281 C 8 23.912396 10.891498 29.481134 13.701172 34.283203 C 16.296271 38.718537 18.669822 42.066616 19.050781 42.601562 C 17.846834 43.88996 17.980826 45.617638 18.001953 46.048828 C 18.091373 47.889143 19.090293 49.025828 20.119141 50.009766 C 21.147988 50.993703 22.29396 52.003168 23.417969 54.146484 C 23.539513 54.378162 24.004424 55.269066 24.628906 56.189453 C 25.24048 57.090816 25.918145 58.062135 27 58.542969 L 27 62 A 1.0001 1.0001 0 1 0 29 62 L 29 58.896484 C 29.354145 58.891575 29.868383 58.864096 30.429688 58.5625 C 31.787375 57.836032 31.951153 56.396403 31.988281 56.148438 A 1.0001 1.0001 0 1 0 30.011719 55.851562 C 29.992849 55.977598 29.808687 56.625296 29.484375 56.798828 A 1.0001 1.0001 0 0 0 29.484375 56.800781 C 29.32398 56.886961 29.109495 56.908203 28.824219 56.908203 C 28.42168 56.908203 28.114506 56.845583 27.839844 56.730469 A 1.0001 1.0001 0 0 0 27.837891 56.730469 C 27.590274 56.626904 26.829471 55.871519 26.283203 55.066406 C 25.736935 54.261294 25.312909 53.452119 25.189453 53.216797 C 23.919462 50.795113 22.489106 49.508516 21.501953 48.564453 C 20.5148 47.62039 20.058624 47.197857 19.998047 45.951172 C 19.976167 45.504675 19.999847 44.424134 20.576172 43.884766 C 21.028522 43.465344 21.714425 43.416172 22.232422 43.408203 C 23.766212 43.383873 24.938922 44.373548 25.3125 44.726562 A 1.0002743 1.0002743 0 1 0 26.6875 43.273438 C 26.275119 42.883757 25.089926 41.848234 23.351562 41.519531 C 23.684054 41.310892 24.051927 41.094628 24.453125 40.890625 C 25.797547 40.207705 29.03107 39.122361 33.191406 38.230469 C 33.362903 39.669244 33.848762 40.995803 34.662109 41.990234 C 35.637853 43.183182 36.971947 44 38.431641 44 L 47 44 L 47 43.970703 C 47.165836 43.983009 47.331031 44 47.5 44 C 51.713438 44 55 40.110516 55 35.5 C 55 35.333552 54.986972 35.170279 54.978516 35.005859 C 55.073803 35.01009 56.315831 35.06789 58.087891 35.404297 C 59.928007 35.753621 62.199459 36.410722 63.869141 37.503906 C 65.629152 38.655646 66.920293 40.814446 67.544922 42.654297 C 67.845362 43.539246 67.971865 44.326947 67.982422 44.830078 C 67.8245 44.776948 67.775568 44.787958 67.476562 44.662109 C 66.877167 44.409819 66.00089 44.047905 64.669922 43.699219 C 63.396201 43.366066 62.05944 43.286417 60.980469 43.095703 C 59.901498 42.904989 59.211917 42.607238 58.945312 42.208984 C 58.739458 41.900705 58.727505 41.54692 58.730469 41.353516 L 58.730469 41.351562 C 58.747339 40.563466 59.456845 39.915621 59.625 39.78125 A 1.0004882 1.0004882 0 1 0 58.375 38.21875 C 58.105295 38.434268 56.766737 39.493484 56.730469 41.3125 A 1.0001 1.0001 0 0 0 56.730469 41.316406 C 56.729579 41.371576 56.669939 42.401916 57.283203 43.320312 A 1.0001 1.0001 0 0 0 57.283203 43.322266 C 58.065599 44.491012 59.390783 44.844917 60.632812 45.064453 C 61.206024 45.165771 61.701344 45.250974 62.261719 45.326172 A 1.0001 1.0001 0 0 0 62.365234 45.669922 C 62.365234 45.669922 64.86532 50.149397 70.380859 52.326172 C 70.066178 52.387382 69.842456 52.467172 69.421875 52.509766 C 67.775834 52.676464 65.347141 52.681641 61.869141 52.681641 C 60.410926 52.681641 59.025939 52.816151 57.824219 53.234375 C 56.622499 53.652599 55.548945 54.41984 55.070312 55.630859 A 1.0001 1.0001 0 1 0 56.929688 56.367188 C 57.147056 55.817206 57.616939 55.425526 58.480469 55.125 C 59.343999 54.824474 60.544355 54.681641 61.869141 54.681641 C 62.686115 54.681641 63.272154 54.67395 63.980469 54.671875 C 63.991735 54.744254 64 54.705608 64 55 C 64 55.437053 63.877671 55.664997 63.5625 55.982422 C 63.247329 56.299847 62.713826 56.63574 62.078125 56.990234 C 60.806723 57.699222 59.073341 58.493869 58.189453 60.285156 C 56.857013 62.98452 55.733424 64.124354 53.070312 65.472656 C 51.996454 66.016788 51.078649 66.994555 50.269531 68.115234 C 49.460414 69.235914 48.788791 70.501858 48.398438 71.6875 A 1.0001 1.0001 0 1 0 50.296875 72.3125 C 50.602522 71.384142 51.198696 70.24818 51.892578 69.287109 C 52.58646 68.326039 53.408468 67.542727 53.974609 67.255859 C 56.877498 65.786161 58.534815 64.106558 59.984375 61.169922 C 60.491487 60.142209 61.715387 59.48209 63.052734 58.736328 C 63.721408 58.363447 64.404296 57.972872 64.980469 57.392578 C 65.556642 56.812284 66 55.971947 66 55 C 66 54.863078 65.984562 54.780633 65.980469 54.662109 C 67.402198 54.642097 68.628908 54.600673 69.623047 54.5 C 71.455256 54.314448 72.78119 53.916388 73.710938 52.974609 A 1.0001 1.0001 0 0 0 73.199219 51.291016 C 68.046363 50.247259 65.904396 47.324169 65.021484 45.927734 C 65.635572 46.129085 66.311463 46.339874 66.701172 46.503906 C 67.290277 46.751872 67.803666 47 68.490234 47 C 69.069103 47 69.600788 46.524089 69.783203 46.121094 C 69.965618 45.718098 70 45.334232 70 44.916016 C 70 44.079583 69.804185 43.091793 69.4375 42.011719 C 68.93179 40.522147 68.087632 38.874396 66.859375 37.494141 C 67.586499 36.16648 68 34.528283 68 32.751953 C 68 30.707785 67.458226 28.840877 66.513672 27.423828 C 65.569118 26.00678 64.148 25 62.5 25 C 62.198677 25 61.907673 25.043753 61.623047 25.107422 C 60.608562 23.557292 58.772228 22.865658 57.222656 22.474609 C 55.724809 22.096614 54.696278 22.068044 54.404297 22.054688 C 53.369258 20.624763 51.713906 19.85094 50.222656 19.474609 C 48.853601 19.129115 48.072381 19.115957 47.646484 19.091797 C 46.698895 17.029339 44.859694 15.934026 43.265625 15.457031 C 41.714286 14.992823 40.640372 15.046519 40.339844 15.052734 C 40.200011 14.970291 37.831103 13.568401 34.46875 12.085938 C 31.009066 10.56056 26.67809 9 22.912109 9 z M 22.912109 11 C 26.103129 11 30.317543 12.43944 33.662109 13.914062 C 36.591489 15.205629 38.559962 16.332428 39.078125 16.632812 C 39.031274 16.749234 39 16.874603 39 17 C 39 17.26 39.109063 17.520937 39.289062 17.710938 L 39.439453 17.830078 C 39.499453 17.870078 39.559141 17.899922 39.619141 17.919922 C 39.679141 17.949922 39.740781 17.970469 39.800781 17.980469 C 39.870781 17.990469 39.94 18 40 18 C 40.26 18 40.520938 17.890937 40.710938 17.710938 C 40.879411 17.533105 40.977202 17.29191 40.990234 17.048828 C 41.462183 17.094999 42.05333 17.182117 42.691406 17.373047 C 44.090367 17.791659 45.481694 18.583147 46.050781 20.3125 A 1.0001 1.0001 0 0 0 46.136719 20.503906 C 46.115766 20.542254 46.092861 20.580793 46.080078 20.619141 C 46.050078 20.679141 46.029531 20.740547 46.019531 20.810547 C 46.009531 20.870547 46 20.94 46 21 C 46 21.26 46.109063 21.520937 46.289062 21.710938 C 46.479062 21.890938 46.74 22 47 22 C 47.13 22 47.260859 21.979922 47.380859 21.919922 C 47.510859 21.869922 47.620937 21.800937 47.710938 21.710938 C 47.86877 21.544337 47.957243 21.320799 47.980469 21.09375 C 48.470812 21.153682 49.078329 21.246548 49.734375 21.412109 C 51.191603 21.779855 52.640369 22.505079 53.103516 23.443359 A 1.0001 1.0001 0 0 0 53.966797 24 C 53.966797 24 55.277147 24.04436 56.734375 24.412109 C 57.726571 24.6625 58.706905 25.080934 59.382812 25.617188 C 58.824296 25.86258 58.539744 25.98812 57.689453 26.361328 C 56.959362 26.681778 56.226486 27.003639 55.669922 27.248047 C 55.113358 27.492455 54.829216 27.614987 54.699219 27.673828 L 54.695312 27.675781 L 54.691406 27.677734 C 53.992541 28.001013 53.204998 28.546857 52.652344 29.335938 C 51.318755 27.899257 49.518306 27 47.5 27 C 46.088192 27 44.784831 27.445042 43.669922 28.199219 L 43.619141 28.074219 C 43.619141 28.074219 41.839903 28.806549 40.052734 29.541016 C 39.15915 29.908249 38.263012 30.277439 37.587891 30.554688 C 37.25033 30.69331 36.967179 30.808775 36.767578 30.890625 C 36.667778 30.931555 36.589701 30.964028 36.535156 30.986328 C 36.507886 30.997478 36.486666 31.006019 36.472656 31.011719 L 36.46875 31.013672 C 34.671404 31.696821 33.47822 33.590501 33.173828 36.177734 C 28.67056 37.106859 25.2554 38.241503 23.546875 39.109375 C 21.798376 39.998459 20.656347 40.983978 20.472656 41.144531 C 19.868962 40.289449 17.808667 37.342736 15.427734 33.273438 C 12.672408 28.564256 10 22.859167 10 19.863281 C 10 16.735766 11.783287 14.629244 14.365234 13.158203 C 16.947182 11.687162 20.298462 11 22.912109 11 z M 19 16 A 2 2 0 0 0 19 20 A 2 2 0 0 0 19 16 z M 35.697266 16.384766 C 35.567734 16.369922 35.433281 16.379922 35.300781 16.419922 C 34.770781 16.579922 34.470859 17.139922 34.630859 17.669922 C 34.760859 18.099922 35.159844 18.380859 35.589844 18.380859 C 35.679844 18.380859 35.779141 18.369844 35.869141 18.339844 C 36.399141 18.179844 36.700781 17.619609 36.550781 17.099609 C 36.430781 16.702109 36.085859 16.429297 35.697266 16.384766 z M 31.787109 18.501953 C 31.532109 18.481953 31.270547 18.560234 31.060547 18.740234 C 30.640547 19.100234 30.589219 19.740156 30.949219 20.160156 C 31.149219 20.390156 31.430937 20.5 31.710938 20.5 C 31.940937 20.5 32.169375 20.419766 32.359375 20.259766 C 32.779375 19.899766 32.830703 19.269609 32.470703 18.849609 C 32.290703 18.639609 32.042109 18.521953 31.787109 18.501953 z M 43.460938 20.029297 C 42.900937 20.079297 42.489297 20.549609 42.529297 21.099609 C 42.569297 21.629609 42.999297 22.029297 43.529297 22.029297 L 43.599609 22.029297 C 44.149609 21.989297 44.559531 21.510938 44.519531 20.960938 C 44.479531 20.410937 44.010937 19.999297 43.460938 20.029297 z M 40.207031 20.570312 C 40.0775 20.557344 39.943047 20.569375 39.810547 20.609375 C 39.280547 20.779375 38.990391 21.339375 39.150391 21.859375 C 39.280391 22.289375 39.679375 22.570312 40.109375 22.570312 C 40.199375 22.570312 40.300391 22.549531 40.400391 22.519531 C 40.930391 22.359531 41.220547 21.799531 41.060547 21.269531 C 40.940547 20.872031 40.595625 20.609219 40.207031 20.570312 z M 28.90625 22.005859 C 28.808594 22.015547 28.711641 22.040078 28.619141 22.080078 C 28.499141 22.130078 28.389063 22.199063 28.289062 22.289062 C 28.109062 22.479062 28 22.74 28 23 C 28 23.13 28.030078 23.260859 28.080078 23.380859 C 28.130078 23.510859 28.199063 23.610937 28.289062 23.710938 C 28.389062 23.800938 28.499141 23.869922 28.619141 23.919922 C 28.739141 23.969922 28.87 24 29 24 C 29.26 24 29.520938 23.890938 29.710938 23.710938 C 29.800938 23.610938 29.869922 23.510859 29.919922 23.380859 C 29.979922 23.260859 30 23.13 30 23 C 30 22.74 29.890937 22.479063 29.710938 22.289062 C 29.500937 22.079062 29.199219 21.976797 28.90625 22.005859 z M 37.169922 22.267578 C 36.914922 22.252578 36.654219 22.334531 36.449219 22.519531 C 36.039219 22.889531 35.999141 23.519453 36.369141 23.939453 C 36.569141 24.159453 36.839141 24.269531 37.119141 24.269531 C 37.349141 24.269531 37.589297 24.179766 37.779297 24.009766 C 38.189297 23.639766 38.229375 23.009609 37.859375 22.599609 C 37.674375 22.394609 37.424922 22.282578 37.169922 22.267578 z M 18.5 24 A 1.5 1.5 0 0 0 18.5 27 A 1.5 1.5 0 0 0 18.5 24 z M 34.800781 25.019531 C 34.740781 25.029531 34.679141 25.050078 34.619141 25.080078 C 34.559141 25.100078 34.499453 25.129922 34.439453 25.169922 C 34.389453 25.199922 34.339062 25.249063 34.289062 25.289062 C 34.109062 25.479062 34 25.74 34 26 C 34 26.26 34.109063 26.520937 34.289062 26.710938 C 34.339063 26.750938 34.389453 26.800078 34.439453 26.830078 C 34.499453 26.870078 34.559141 26.899922 34.619141 26.919922 C 34.679141 26.949922 34.740781 26.970469 34.800781 26.980469 C 34.870781 26.990469 34.94 27 35 27 C 35.06 27 35.129219 26.990469 35.199219 26.980469 C 35.259219 26.970469 35.320859 26.949922 35.380859 26.919922 C 35.440859 26.899922 35.500547 26.870078 35.560547 26.830078 C 35.610547 26.800078 35.660938 26.750937 35.710938 26.710938 C 35.750938 26.660938 35.800078 26.610547 35.830078 26.560547 C 35.870078 26.500547 35.899922 26.440859 35.919922 26.380859 C 35.949922 26.320859 35.970469 26.259219 35.980469 26.199219 C 35.990469 26.129219 36 26.06 36 26 C 36 25.94 35.990469 25.870781 35.980469 25.800781 C 35.970469 25.740781 35.949922 25.679141 35.919922 25.619141 C 35.899922 25.559141 35.870078 25.499453 35.830078 25.439453 C 35.800078 25.389453 35.750937 25.339063 35.710938 25.289062 C 35.660937 25.249062 35.610547 25.199922 35.560547 25.169922 C 35.500547 25.129922 35.440859 25.100078 35.380859 25.080078 C 35.320859 25.050078 35.259219 25.029531 35.199219 25.019531 C 35.069219 24.989531 34.930781 24.989531 34.800781 25.019531 z M 62.5 27 C 63.337 27 64.165413 27.504798 64.849609 28.53125 C 65.533805 29.557702 66 31.068121 66 32.751953 C 66 34.00733 65.737519 35.160765 65.320312 36.09375 C 65.200872 36.006694 65.089403 35.911589 64.964844 35.830078 C 63.115425 34.619215 60.926832 33.96549 59.054688 33.570312 C 59.029888 33.300341 59 33.032794 59 32.751953 C 59 31.068121 59.466195 29.557702 60.150391 28.53125 C 60.834587 27.504798 61.663 27 62.5 27 z M 57.916016 28.445312 C 57.328962 29.690383 57 31.166369 57 32.751953 C 57 32.906001 57.009389 33.055718 57.015625 33.207031 C 55.772365 33.037808 54.913216 33 54.912109 33 A 1.0001 1.0001 0 0 0 54.673828 33.027344 C 54.498232 32.374737 54.249591 31.758461 53.947266 31.179688 L 53.982422 31.185547 C 54.0947 30.58994 54.973824 29.750039 55.53125 29.492188 C 55.45871 29.525108 55.922938 29.320384 56.474609 29.078125 C 56.871683 28.903755 57.404225 28.670009 57.916016 28.445312 z M 47.5 29 C 50.466269 29 53 31.826245 53 35.5 C 53 39.173755 50.466269 42 47.5 42 C 44.533731 42 42 39.173755 42 35.5 C 42 31.826245 44.533731 29 47.5 29 z M 40.976562 31.322266 C 40.355891 32.56516 40 33.991941 40 35.5 C 40 38.077287 41.028118 40.426794 42.669922 42 L 38.431641 42 C 37.756334 42 36.895938 41.562119 36.210938 40.724609 C 35.525937 39.8871 35.042969 38.697103 35.042969 37.390625 C 35.042969 34.679516 36.061342 33.310422 37.177734 32.884766 C 37.177734 32.884766 37.179688 32.882812 37.179688 32.882812 C 37.226627 32.865252 37.212823 32.868871 37.226562 32.863281 C 37.242672 32.856681 37.265109 32.849281 37.292969 32.837891 C 37.348679 32.815111 37.427234 32.781294 37.527344 32.740234 C 37.727564 32.658134 38.009936 32.542986 38.347656 32.404297 C 39.023097 32.126919 39.918835 31.757892 40.8125 31.390625 C 40.894854 31.35678 40.894409 31.356021 40.976562 31.322266 z M 52.027344 45.986328 A 1.0001 1.0001 0 0 0 51.001953 47.056641 C 51.12024 49.123838 50.810157 50.953649 50.085938 52.595703 A 1.0001 1.0001 0 0 0 50.083984 52.597656 C 49.747402 53.362036 49.483444 53.693798 49.085938 54.595703 C 48.224157 56.549649 47.86824 58.719838 48.001953 61.056641 A 1.0001 1.0001 0 1 0 49.998047 60.943359 C 49.87976 58.876162 50.189842 57.046351 50.914062 55.404297 A 1.0001 1.0001 0 0 0 50.916016 55.402344 C 51.249338 54.645539 51.513827 54.312598 51.914062 53.404297 C 52.775843 51.450351 53.13176 49.280162 52.998047 46.943359 A 1.0001 1.0001 0 0 0 52.027344 45.986328 z M 27.988281 47.988281 A 1.0001 1.0001 0 0 0 27.167969 49.554688 C 27.834713 50.554304 28.500713 51.554304 29.167969 52.554688 A 1.0001 1.0001 0 1 0 30.832031 51.445312 C 30.165287 50.445696 29.499287 49.445696 28.832031 48.445312 A 1.0001 1.0001 0 0 0 27.988281 47.988281 z M 28 64.330078 C 27.45 64.330078 27 64.780078 27 65.330078 C 27 65.890078 27.45 66.330078 28 66.330078 C 28.55 66.330078 29 65.890078 29 65.330078 C 29 64.780078 28.55 64.330078 28 64.330078 z M 28 67.669922 C 27.45 67.669922 27 68.119922 27 68.669922 C 27 69.219922 27.45 69.669922 28 69.669922 C 28.55 69.669922 29 69.219922 29 68.669922 C 29 68.119922 28.55 67.669922 28 67.669922 z M 28.09375 71.005859 C 27.800781 70.976797 27.499063 71.079062 27.289062 71.289062 L 27.169922 71.439453 C 27.129922 71.499453 27.100078 71.559141 27.080078 71.619141 C 27.050078 71.679141 27.029531 71.740781 27.019531 71.800781 C 27.009531 71.870781 27 71.93 27 72 C 27 72.13 27.030078 72.260859 27.080078 72.380859 C 27.130078 72.500859 27.199063 72.610938 27.289062 72.710938 C 27.479062 72.890937 27.74 73 28 73 C 28.13 73 28.260859 72.969922 28.380859 72.919922 C 28.500859 72.869922 28.610937 72.800938 28.710938 72.710938 C 28.800938 72.610937 28.869922 72.500859 28.919922 72.380859 C 28.969922 72.260859 29 72.13 29 72 C 29 71.93 28.990469 71.870781 28.980469 71.800781 C 28.970469 71.740781 28.949922 71.679141 28.919922 71.619141 C 28.899922 71.559141 28.870078 71.499453 28.830078 71.439453 L 28.710938 71.289062 C 28.610938 71.199063 28.500859 71.130078 28.380859 71.080078 C 28.288359 71.040078 28.191406 71.015547 28.09375 71.005859 z"/></svg>
          </div>
          <div class="dialog-text">
          <p>Aha! So that is why we're not getting the content from the CF cache!</p>
          </div>
        </div>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>I guess so, I didn't make any changes to my CF account, so I think I didn't even try to cache stuff at this point</p>
          </div>
        </div>
<div class="paragraph">
<p>At the moment, no caching is being done <strong>by default</strong> on HTML files. If we
check what <code>DYNAMIC</code> means in that response header we can get another
confirmation:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p><code>DYNAMIC</code>: Cloudflare does not consider the asset eligible to cache and your
Cloudflare settings do not explicitly instruct Cloudflare to cache the asset.
Instead, the asset was requested from the origin web server. Use Page Rules to
implement custom caching options.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Well, the problem is very clear at this point. If we did not provide any custom
rules for content caching, CF is not going to do it out-of-the-box because it could
lead to undefined behavior.</p>
</div>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>That makes sense, imagine an HTML page with dynamic content, that is definitely not something you would want to cache by default!</p>
          </div>
        </div>
<div class="paragraph">
<p>Now that we assessed that CF does not cache HTML by default without rules that
explicitly instruct to do so, I am going to go ahead and add some caching
rules to the account of my domain. If everthing goes smoothly, I should get a
<code>HIT</code> in the <code>cf-cache-status</code> header, which means</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p><code>HIT</code>: The resource was found in Cloudflare’s cache.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Pretty straightforward, right?</p>
</div>
<div class="paragraph">
<p>It&#8217;s reasonable to cache every single HTML page that is present on my website,
because articles remain the same once you publish them, so there&#8217;s no need for
CF to talk back to the origin server every time someone want to read one. This
is going to introduce some small issues down the road as I&#8217;ll show you, but for
the moment let&#8217;s keep our focus on caching.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s go ahead and create some rules so that content gets cached. CF offers a
lot of APIs that you can use to control all the things that you would usually
see from the web client, I&#8217;m going to use those in this example because GUIs
are boring.</p>
</div>
<div class="paragraph">
<p>To create a page rule I can make use of the
<a href="https://developers.cloudflare.com/api/operations/page-rules-create-a-page-rule"><code>pagerules</code></a>
API</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell session">$ curl -X POST \
  --url "https://api.cloudflare.com/client/v4/zones/&lt;zone_id&gt;/pagerules" \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer &lt;api_token&gt;' \
  --data '{
    "actions": [
      {
        "id": "browser_cache_ttl",
        "value": 7200
      },
      {
        "id": "cache_level",
        "value": "cache_everything"
      },
      {
        "id": "edge_cache_ttl",
        "value": 259200
      }
    ],
    "priority": 1,
    "status": "active",
    "targets": [
      {
        "constraint": {
          "operator": "matches",
          "value": "mattrighetti.com/*"
        },
        "target": "url"
      }
    ]
  }'</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the query above I&#8217;m telling CF to cache everthing that starts with the url
<code>mattrighetti.com/</code>. Actions are executed in order when a URL is requested, in
this case I&#8217;m specifying that I want user browsers to keep visited pages in
cache (<code>browser_cache_ttl</code>) for two hours, that I would like CF CDN to keep
my pages in cache (<code>edge_cache_ttl</code>) for three days and that I would like this
rule to be turned on immediately with <code>status &#8594; active</code>.</p>
</div>
<div class="paragraph">
<p>Once we make the request above, rule will be in place and active. We can double check that with
<a href="https://developers.cloudflare.com/api/operations/page-rules-list-page-rules"><code>pagerules</code></a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell session">$ curl -X GET \
  --url https://api.cloudflare.com/client/v4/zones/&lt;zone_id&gt;/pagerules \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer &lt;api_token&gt;' \
  | jq</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="nl">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"..."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"targets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"url"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"constraint"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"operator"</span><span class="p">:</span><span class="w"> </span><span class="s2">"matches"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"mattrighetti.com/*"</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"actions"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"browser_cache_ttl"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="mi">7200</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cache_level"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cache_everything"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"edge_cache_ttl"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="mi">259200</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"priority"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"active"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"created_on"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-02-24T22:46:36.000000Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"modified_on"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-02-24T22:51:09.000000Z"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"success"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"errors"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"messages"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span><span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>That should be it, I expect the changes to take some time before actually
working but in my case it worked almost instantly.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s try again to fire a request now that we&#8217;re caching every HTML page.
The very first time I expect cache to <code>MISS</code> because CF is a pull CDN, so the
content has to be pulled from the origin server the very first time.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>In a pull CDN, the content is cached on servers located at strategic points
around the world. When a user requests the content, the CDN determines the
user&#8217;s location and routes the request to the closest server. The server then
retrieves the content from the origin server (where the content is stored),
caches it locally, and delivers it to the user.</p>
</div>
</blockquote>
</div>
<div class="ulist">
<ul>
<li>
<p>First query</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="response headers">&gt; HTTP/2 200
&gt; date: Fri, 24 Feb 2023 22:51:53 GMT
&gt; content-type: text/HTML; charset=utf-8
&gt; last-modified: Fri, 24 Feb 2023 09:10:51 GMT
...
&gt; cf-cache-status: MISS</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Second query</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="response headers">&gt; HTTP/2 200
&gt; date: Fri, 24 Feb 2023 22:55:10 GMT
&gt; content-type: text/HTML; charset=utf-8
&gt; last-modified: Fri, 24 Feb 2023 09:10:51 GMT
...
&gt; cf-cache-status: HIT</code></pre>
</div>
</div>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>Hey! That's our <code>HIT</code>!</p>
          </div>
        </div>
<div class="paragraph">
<p>You can try to query my website by yourself, most of the content is now served
through CF cache, as fast as it gets.</p>
</div>
<div class="paragraph">
<p>It&#8217;s not all sunshine and rainbows though. As I anticipated before, this kind of
caching introduces some new issues. What do you think is going to happen if I
post a new article? Well, in practical terms, you&#8217;re not going to see it until
CF updates its edge cache, which we set to take place every three days in the
caching rule.</p>
</div>
<div class="paragraph">
<p>Actually, it is a bit incorrect to say that you won&#8217;t be able to see it. To be
precise, you won&#8217;t be able to see that I posted a new article if you navigate to
my webiste, because every article that I post is inserted into the main list
that is shown in the homepage, and the new article is not going to appear
immediately. Wonder why? Well, the homepage that your browser is going to show
you is either the one that is cached locally (remember <code>browser_cache_ttl</code>?) or
the one that CF is going to send back you, which is still a previously cached
version of the homepage that does not contain my new article.</p>
</div>
<div class="paragraph">
<p>There still is a way you can view my article: write its URL manually in your
browser&#8217;s search bar. Now, I don&#8217;t expect anyone to do that, but it&#8217;s definitely
possible. You would need to:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Set some kind of notification on my website&#8217;s GitHub repo that notifies you every time I push
something on the remote <code>master</code> branch</p>
</li>
<li>
<p>Check if a new post has been added in the last commit, i.e.
<code>_posts/2023-03-05-i-have-been-doing-cdn-caching-wrong.adoc</code></p>
</li>
<li>
<p>Navigate to
<code>mattrighetti.com/2023/03/05/i-have-been-doing-cdn-caching-wrong.html</code>, notice the
pattern <code>filename &#8594; URL</code>?</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Why would this work? Easy, that URL refers to a file that is not cached by CF,
because it&#8217;s just been created. At that point CF will try to ask if the resource
is actually present on the server - which it is - cache the page and return it to
your browser.</p>
</div>
<div class="paragraph">
<p>What if I push some typo fixes to my freshly created article? You guessed it,
nobody would be able to see those fixes because the page has now been cached by
CF and you are only going to see the original article for quite some time, typos
included.</p>
</div>
<div class="paragraph">
<p>We can clearly see that the problem here is that nobody is going to see changes
that I make to cached content, possibly for days.</p>
</div>
        <div class="dialog professor" title="Professor">
          <div class="dialog-head">
          <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 80 80" width="240px" height="240px"><path d="M 22.912109 9 C 19.960756 9 16.358303 9.7221658 13.375 11.421875 C 10.391697 13.121584 8 15.945797 8 19.863281 C 8 23.912396 10.891498 29.481134 13.701172 34.283203 C 16.296271 38.718537 18.669822 42.066616 19.050781 42.601562 C 17.846834 43.88996 17.980826 45.617638 18.001953 46.048828 C 18.091373 47.889143 19.090293 49.025828 20.119141 50.009766 C 21.147988 50.993703 22.29396 52.003168 23.417969 54.146484 C 23.539513 54.378162 24.004424 55.269066 24.628906 56.189453 C 25.24048 57.090816 25.918145 58.062135 27 58.542969 L 27 62 A 1.0001 1.0001 0 1 0 29 62 L 29 58.896484 C 29.354145 58.891575 29.868383 58.864096 30.429688 58.5625 C 31.787375 57.836032 31.951153 56.396403 31.988281 56.148438 A 1.0001 1.0001 0 1 0 30.011719 55.851562 C 29.992849 55.977598 29.808687 56.625296 29.484375 56.798828 A 1.0001 1.0001 0 0 0 29.484375 56.800781 C 29.32398 56.886961 29.109495 56.908203 28.824219 56.908203 C 28.42168 56.908203 28.114506 56.845583 27.839844 56.730469 A 1.0001 1.0001 0 0 0 27.837891 56.730469 C 27.590274 56.626904 26.829471 55.871519 26.283203 55.066406 C 25.736935 54.261294 25.312909 53.452119 25.189453 53.216797 C 23.919462 50.795113 22.489106 49.508516 21.501953 48.564453 C 20.5148 47.62039 20.058624 47.197857 19.998047 45.951172 C 19.976167 45.504675 19.999847 44.424134 20.576172 43.884766 C 21.028522 43.465344 21.714425 43.416172 22.232422 43.408203 C 23.766212 43.383873 24.938922 44.373548 25.3125 44.726562 A 1.0002743 1.0002743 0 1 0 26.6875 43.273438 C 26.275119 42.883757 25.089926 41.848234 23.351562 41.519531 C 23.684054 41.310892 24.051927 41.094628 24.453125 40.890625 C 25.797547 40.207705 29.03107 39.122361 33.191406 38.230469 C 33.362903 39.669244 33.848762 40.995803 34.662109 41.990234 C 35.637853 43.183182 36.971947 44 38.431641 44 L 47 44 L 47 43.970703 C 47.165836 43.983009 47.331031 44 47.5 44 C 51.713438 44 55 40.110516 55 35.5 C 55 35.333552 54.986972 35.170279 54.978516 35.005859 C 55.073803 35.01009 56.315831 35.06789 58.087891 35.404297 C 59.928007 35.753621 62.199459 36.410722 63.869141 37.503906 C 65.629152 38.655646 66.920293 40.814446 67.544922 42.654297 C 67.845362 43.539246 67.971865 44.326947 67.982422 44.830078 C 67.8245 44.776948 67.775568 44.787958 67.476562 44.662109 C 66.877167 44.409819 66.00089 44.047905 64.669922 43.699219 C 63.396201 43.366066 62.05944 43.286417 60.980469 43.095703 C 59.901498 42.904989 59.211917 42.607238 58.945312 42.208984 C 58.739458 41.900705 58.727505 41.54692 58.730469 41.353516 L 58.730469 41.351562 C 58.747339 40.563466 59.456845 39.915621 59.625 39.78125 A 1.0004882 1.0004882 0 1 0 58.375 38.21875 C 58.105295 38.434268 56.766737 39.493484 56.730469 41.3125 A 1.0001 1.0001 0 0 0 56.730469 41.316406 C 56.729579 41.371576 56.669939 42.401916 57.283203 43.320312 A 1.0001 1.0001 0 0 0 57.283203 43.322266 C 58.065599 44.491012 59.390783 44.844917 60.632812 45.064453 C 61.206024 45.165771 61.701344 45.250974 62.261719 45.326172 A 1.0001 1.0001 0 0 0 62.365234 45.669922 C 62.365234 45.669922 64.86532 50.149397 70.380859 52.326172 C 70.066178 52.387382 69.842456 52.467172 69.421875 52.509766 C 67.775834 52.676464 65.347141 52.681641 61.869141 52.681641 C 60.410926 52.681641 59.025939 52.816151 57.824219 53.234375 C 56.622499 53.652599 55.548945 54.41984 55.070312 55.630859 A 1.0001 1.0001 0 1 0 56.929688 56.367188 C 57.147056 55.817206 57.616939 55.425526 58.480469 55.125 C 59.343999 54.824474 60.544355 54.681641 61.869141 54.681641 C 62.686115 54.681641 63.272154 54.67395 63.980469 54.671875 C 63.991735 54.744254 64 54.705608 64 55 C 64 55.437053 63.877671 55.664997 63.5625 55.982422 C 63.247329 56.299847 62.713826 56.63574 62.078125 56.990234 C 60.806723 57.699222 59.073341 58.493869 58.189453 60.285156 C 56.857013 62.98452 55.733424 64.124354 53.070312 65.472656 C 51.996454 66.016788 51.078649 66.994555 50.269531 68.115234 C 49.460414 69.235914 48.788791 70.501858 48.398438 71.6875 A 1.0001 1.0001 0 1 0 50.296875 72.3125 C 50.602522 71.384142 51.198696 70.24818 51.892578 69.287109 C 52.58646 68.326039 53.408468 67.542727 53.974609 67.255859 C 56.877498 65.786161 58.534815 64.106558 59.984375 61.169922 C 60.491487 60.142209 61.715387 59.48209 63.052734 58.736328 C 63.721408 58.363447 64.404296 57.972872 64.980469 57.392578 C 65.556642 56.812284 66 55.971947 66 55 C 66 54.863078 65.984562 54.780633 65.980469 54.662109 C 67.402198 54.642097 68.628908 54.600673 69.623047 54.5 C 71.455256 54.314448 72.78119 53.916388 73.710938 52.974609 A 1.0001 1.0001 0 0 0 73.199219 51.291016 C 68.046363 50.247259 65.904396 47.324169 65.021484 45.927734 C 65.635572 46.129085 66.311463 46.339874 66.701172 46.503906 C 67.290277 46.751872 67.803666 47 68.490234 47 C 69.069103 47 69.600788 46.524089 69.783203 46.121094 C 69.965618 45.718098 70 45.334232 70 44.916016 C 70 44.079583 69.804185 43.091793 69.4375 42.011719 C 68.93179 40.522147 68.087632 38.874396 66.859375 37.494141 C 67.586499 36.16648 68 34.528283 68 32.751953 C 68 30.707785 67.458226 28.840877 66.513672 27.423828 C 65.569118 26.00678 64.148 25 62.5 25 C 62.198677 25 61.907673 25.043753 61.623047 25.107422 C 60.608562 23.557292 58.772228 22.865658 57.222656 22.474609 C 55.724809 22.096614 54.696278 22.068044 54.404297 22.054688 C 53.369258 20.624763 51.713906 19.85094 50.222656 19.474609 C 48.853601 19.129115 48.072381 19.115957 47.646484 19.091797 C 46.698895 17.029339 44.859694 15.934026 43.265625 15.457031 C 41.714286 14.992823 40.640372 15.046519 40.339844 15.052734 C 40.200011 14.970291 37.831103 13.568401 34.46875 12.085938 C 31.009066 10.56056 26.67809 9 22.912109 9 z M 22.912109 11 C 26.103129 11 30.317543 12.43944 33.662109 13.914062 C 36.591489 15.205629 38.559962 16.332428 39.078125 16.632812 C 39.031274 16.749234 39 16.874603 39 17 C 39 17.26 39.109063 17.520937 39.289062 17.710938 L 39.439453 17.830078 C 39.499453 17.870078 39.559141 17.899922 39.619141 17.919922 C 39.679141 17.949922 39.740781 17.970469 39.800781 17.980469 C 39.870781 17.990469 39.94 18 40 18 C 40.26 18 40.520938 17.890937 40.710938 17.710938 C 40.879411 17.533105 40.977202 17.29191 40.990234 17.048828 C 41.462183 17.094999 42.05333 17.182117 42.691406 17.373047 C 44.090367 17.791659 45.481694 18.583147 46.050781 20.3125 A 1.0001 1.0001 0 0 0 46.136719 20.503906 C 46.115766 20.542254 46.092861 20.580793 46.080078 20.619141 C 46.050078 20.679141 46.029531 20.740547 46.019531 20.810547 C 46.009531 20.870547 46 20.94 46 21 C 46 21.26 46.109063 21.520937 46.289062 21.710938 C 46.479062 21.890938 46.74 22 47 22 C 47.13 22 47.260859 21.979922 47.380859 21.919922 C 47.510859 21.869922 47.620937 21.800937 47.710938 21.710938 C 47.86877 21.544337 47.957243 21.320799 47.980469 21.09375 C 48.470812 21.153682 49.078329 21.246548 49.734375 21.412109 C 51.191603 21.779855 52.640369 22.505079 53.103516 23.443359 A 1.0001 1.0001 0 0 0 53.966797 24 C 53.966797 24 55.277147 24.04436 56.734375 24.412109 C 57.726571 24.6625 58.706905 25.080934 59.382812 25.617188 C 58.824296 25.86258 58.539744 25.98812 57.689453 26.361328 C 56.959362 26.681778 56.226486 27.003639 55.669922 27.248047 C 55.113358 27.492455 54.829216 27.614987 54.699219 27.673828 L 54.695312 27.675781 L 54.691406 27.677734 C 53.992541 28.001013 53.204998 28.546857 52.652344 29.335938 C 51.318755 27.899257 49.518306 27 47.5 27 C 46.088192 27 44.784831 27.445042 43.669922 28.199219 L 43.619141 28.074219 C 43.619141 28.074219 41.839903 28.806549 40.052734 29.541016 C 39.15915 29.908249 38.263012 30.277439 37.587891 30.554688 C 37.25033 30.69331 36.967179 30.808775 36.767578 30.890625 C 36.667778 30.931555 36.589701 30.964028 36.535156 30.986328 C 36.507886 30.997478 36.486666 31.006019 36.472656 31.011719 L 36.46875 31.013672 C 34.671404 31.696821 33.47822 33.590501 33.173828 36.177734 C 28.67056 37.106859 25.2554 38.241503 23.546875 39.109375 C 21.798376 39.998459 20.656347 40.983978 20.472656 41.144531 C 19.868962 40.289449 17.808667 37.342736 15.427734 33.273438 C 12.672408 28.564256 10 22.859167 10 19.863281 C 10 16.735766 11.783287 14.629244 14.365234 13.158203 C 16.947182 11.687162 20.298462 11 22.912109 11 z M 19 16 A 2 2 0 0 0 19 20 A 2 2 0 0 0 19 16 z M 35.697266 16.384766 C 35.567734 16.369922 35.433281 16.379922 35.300781 16.419922 C 34.770781 16.579922 34.470859 17.139922 34.630859 17.669922 C 34.760859 18.099922 35.159844 18.380859 35.589844 18.380859 C 35.679844 18.380859 35.779141 18.369844 35.869141 18.339844 C 36.399141 18.179844 36.700781 17.619609 36.550781 17.099609 C 36.430781 16.702109 36.085859 16.429297 35.697266 16.384766 z M 31.787109 18.501953 C 31.532109 18.481953 31.270547 18.560234 31.060547 18.740234 C 30.640547 19.100234 30.589219 19.740156 30.949219 20.160156 C 31.149219 20.390156 31.430937 20.5 31.710938 20.5 C 31.940937 20.5 32.169375 20.419766 32.359375 20.259766 C 32.779375 19.899766 32.830703 19.269609 32.470703 18.849609 C 32.290703 18.639609 32.042109 18.521953 31.787109 18.501953 z M 43.460938 20.029297 C 42.900937 20.079297 42.489297 20.549609 42.529297 21.099609 C 42.569297 21.629609 42.999297 22.029297 43.529297 22.029297 L 43.599609 22.029297 C 44.149609 21.989297 44.559531 21.510938 44.519531 20.960938 C 44.479531 20.410937 44.010937 19.999297 43.460938 20.029297 z M 40.207031 20.570312 C 40.0775 20.557344 39.943047 20.569375 39.810547 20.609375 C 39.280547 20.779375 38.990391 21.339375 39.150391 21.859375 C 39.280391 22.289375 39.679375 22.570312 40.109375 22.570312 C 40.199375 22.570312 40.300391 22.549531 40.400391 22.519531 C 40.930391 22.359531 41.220547 21.799531 41.060547 21.269531 C 40.940547 20.872031 40.595625 20.609219 40.207031 20.570312 z M 28.90625 22.005859 C 28.808594 22.015547 28.711641 22.040078 28.619141 22.080078 C 28.499141 22.130078 28.389063 22.199063 28.289062 22.289062 C 28.109062 22.479062 28 22.74 28 23 C 28 23.13 28.030078 23.260859 28.080078 23.380859 C 28.130078 23.510859 28.199063 23.610937 28.289062 23.710938 C 28.389062 23.800938 28.499141 23.869922 28.619141 23.919922 C 28.739141 23.969922 28.87 24 29 24 C 29.26 24 29.520938 23.890938 29.710938 23.710938 C 29.800938 23.610938 29.869922 23.510859 29.919922 23.380859 C 29.979922 23.260859 30 23.13 30 23 C 30 22.74 29.890937 22.479063 29.710938 22.289062 C 29.500937 22.079062 29.199219 21.976797 28.90625 22.005859 z M 37.169922 22.267578 C 36.914922 22.252578 36.654219 22.334531 36.449219 22.519531 C 36.039219 22.889531 35.999141 23.519453 36.369141 23.939453 C 36.569141 24.159453 36.839141 24.269531 37.119141 24.269531 C 37.349141 24.269531 37.589297 24.179766 37.779297 24.009766 C 38.189297 23.639766 38.229375 23.009609 37.859375 22.599609 C 37.674375 22.394609 37.424922 22.282578 37.169922 22.267578 z M 18.5 24 A 1.5 1.5 0 0 0 18.5 27 A 1.5 1.5 0 0 0 18.5 24 z M 34.800781 25.019531 C 34.740781 25.029531 34.679141 25.050078 34.619141 25.080078 C 34.559141 25.100078 34.499453 25.129922 34.439453 25.169922 C 34.389453 25.199922 34.339062 25.249063 34.289062 25.289062 C 34.109062 25.479062 34 25.74 34 26 C 34 26.26 34.109063 26.520937 34.289062 26.710938 C 34.339063 26.750938 34.389453 26.800078 34.439453 26.830078 C 34.499453 26.870078 34.559141 26.899922 34.619141 26.919922 C 34.679141 26.949922 34.740781 26.970469 34.800781 26.980469 C 34.870781 26.990469 34.94 27 35 27 C 35.06 27 35.129219 26.990469 35.199219 26.980469 C 35.259219 26.970469 35.320859 26.949922 35.380859 26.919922 C 35.440859 26.899922 35.500547 26.870078 35.560547 26.830078 C 35.610547 26.800078 35.660938 26.750937 35.710938 26.710938 C 35.750938 26.660938 35.800078 26.610547 35.830078 26.560547 C 35.870078 26.500547 35.899922 26.440859 35.919922 26.380859 C 35.949922 26.320859 35.970469 26.259219 35.980469 26.199219 C 35.990469 26.129219 36 26.06 36 26 C 36 25.94 35.990469 25.870781 35.980469 25.800781 C 35.970469 25.740781 35.949922 25.679141 35.919922 25.619141 C 35.899922 25.559141 35.870078 25.499453 35.830078 25.439453 C 35.800078 25.389453 35.750937 25.339063 35.710938 25.289062 C 35.660937 25.249062 35.610547 25.199922 35.560547 25.169922 C 35.500547 25.129922 35.440859 25.100078 35.380859 25.080078 C 35.320859 25.050078 35.259219 25.029531 35.199219 25.019531 C 35.069219 24.989531 34.930781 24.989531 34.800781 25.019531 z M 62.5 27 C 63.337 27 64.165413 27.504798 64.849609 28.53125 C 65.533805 29.557702 66 31.068121 66 32.751953 C 66 34.00733 65.737519 35.160765 65.320312 36.09375 C 65.200872 36.006694 65.089403 35.911589 64.964844 35.830078 C 63.115425 34.619215 60.926832 33.96549 59.054688 33.570312 C 59.029888 33.300341 59 33.032794 59 32.751953 C 59 31.068121 59.466195 29.557702 60.150391 28.53125 C 60.834587 27.504798 61.663 27 62.5 27 z M 57.916016 28.445312 C 57.328962 29.690383 57 31.166369 57 32.751953 C 57 32.906001 57.009389 33.055718 57.015625 33.207031 C 55.772365 33.037808 54.913216 33 54.912109 33 A 1.0001 1.0001 0 0 0 54.673828 33.027344 C 54.498232 32.374737 54.249591 31.758461 53.947266 31.179688 L 53.982422 31.185547 C 54.0947 30.58994 54.973824 29.750039 55.53125 29.492188 C 55.45871 29.525108 55.922938 29.320384 56.474609 29.078125 C 56.871683 28.903755 57.404225 28.670009 57.916016 28.445312 z M 47.5 29 C 50.466269 29 53 31.826245 53 35.5 C 53 39.173755 50.466269 42 47.5 42 C 44.533731 42 42 39.173755 42 35.5 C 42 31.826245 44.533731 29 47.5 29 z M 40.976562 31.322266 C 40.355891 32.56516 40 33.991941 40 35.5 C 40 38.077287 41.028118 40.426794 42.669922 42 L 38.431641 42 C 37.756334 42 36.895938 41.562119 36.210938 40.724609 C 35.525937 39.8871 35.042969 38.697103 35.042969 37.390625 C 35.042969 34.679516 36.061342 33.310422 37.177734 32.884766 C 37.177734 32.884766 37.179688 32.882812 37.179688 32.882812 C 37.226627 32.865252 37.212823 32.868871 37.226562 32.863281 C 37.242672 32.856681 37.265109 32.849281 37.292969 32.837891 C 37.348679 32.815111 37.427234 32.781294 37.527344 32.740234 C 37.727564 32.658134 38.009936 32.542986 38.347656 32.404297 C 39.023097 32.126919 39.918835 31.757892 40.8125 31.390625 C 40.894854 31.35678 40.894409 31.356021 40.976562 31.322266 z M 52.027344 45.986328 A 1.0001 1.0001 0 0 0 51.001953 47.056641 C 51.12024 49.123838 50.810157 50.953649 50.085938 52.595703 A 1.0001 1.0001 0 0 0 50.083984 52.597656 C 49.747402 53.362036 49.483444 53.693798 49.085938 54.595703 C 48.224157 56.549649 47.86824 58.719838 48.001953 61.056641 A 1.0001 1.0001 0 1 0 49.998047 60.943359 C 49.87976 58.876162 50.189842 57.046351 50.914062 55.404297 A 1.0001 1.0001 0 0 0 50.916016 55.402344 C 51.249338 54.645539 51.513827 54.312598 51.914062 53.404297 C 52.775843 51.450351 53.13176 49.280162 52.998047 46.943359 A 1.0001 1.0001 0 0 0 52.027344 45.986328 z M 27.988281 47.988281 A 1.0001 1.0001 0 0 0 27.167969 49.554688 C 27.834713 50.554304 28.500713 51.554304 29.167969 52.554688 A 1.0001 1.0001 0 1 0 30.832031 51.445312 C 30.165287 50.445696 29.499287 49.445696 28.832031 48.445312 A 1.0001 1.0001 0 0 0 27.988281 47.988281 z M 28 64.330078 C 27.45 64.330078 27 64.780078 27 65.330078 C 27 65.890078 27.45 66.330078 28 66.330078 C 28.55 66.330078 29 65.890078 29 65.330078 C 29 64.780078 28.55 64.330078 28 64.330078 z M 28 67.669922 C 27.45 67.669922 27 68.119922 27 68.669922 C 27 69.219922 27.45 69.669922 28 69.669922 C 28.55 69.669922 29 69.219922 29 68.669922 C 29 68.119922 28.55 67.669922 28 67.669922 z M 28.09375 71.005859 C 27.800781 70.976797 27.499063 71.079062 27.289062 71.289062 L 27.169922 71.439453 C 27.129922 71.499453 27.100078 71.559141 27.080078 71.619141 C 27.050078 71.679141 27.029531 71.740781 27.019531 71.800781 C 27.009531 71.870781 27 71.93 27 72 C 27 72.13 27.030078 72.260859 27.080078 72.380859 C 27.130078 72.500859 27.199063 72.610938 27.289062 72.710938 C 27.479062 72.890937 27.74 73 28 73 C 28.13 73 28.260859 72.969922 28.380859 72.919922 C 28.500859 72.869922 28.610937 72.800938 28.710938 72.710938 C 28.800938 72.610937 28.869922 72.500859 28.919922 72.380859 C 28.969922 72.260859 29 72.13 29 72 C 29 71.93 28.990469 71.870781 28.980469 71.800781 C 28.970469 71.740781 28.949922 71.679141 28.919922 71.619141 C 28.899922 71.559141 28.870078 71.499453 28.830078 71.439453 L 28.710938 71.289062 C 28.610938 71.199063 28.500859 71.130078 28.380859 71.080078 C 28.288359 71.040078 28.191406 71.015547 28.09375 71.005859 z"/></svg>
          </div>
          <div class="dialog-text">
          <p>What a headache, there must be another way around this!</p>
          </div>
        </div>
<div class="paragraph">
<p>Luckily for us, there is a way. When you open up your website domain on the CF
dashboard, one of the first things that you notice is that shiny blue button labeled
<strong>Purge Cache</strong>, which is the solution to all our problems.</p>
</div>
<div class="paragraph">
<p><strong>Purge Cache</strong> is going to do exactly what the word says: empty the CF cache so
that everything will need to be cached and served all over again, this time with
the latest available content, of course.</p>
</div>
<div class="paragraph">
<p>The easy solution would be to purge everything and just forget about the rest,
but I love the people at CF and I want to purge just what&#8217;s necessary.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s recall what I said before, what do I really need to update when I push a
new article to my website?</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Home page, so that new articles appear in the list</p>
</li>
<li>
<p>Article page, in case I push typos fixes or changes</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Again, CF has an API to do just this, that&#8217;s the
<a href="https://developers.cloudflare.com/api/operations/zone-purge"><code>purge_cache</code></a> method,
which takes a list of file URLs to remove from cache. Enterprise users have a lot
more choice here, if you pay the extra money you can pass prefixes, hosts and
tags, but I&#8217;m currenlty enjoying my free-tier so I can only pass an array of
URLs.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell session">curl -X POST \
  --url https://api.cloudflare.com/client/v4/zones/&lt;zone_id&gt;/purge_cache \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer &lt;api_token&gt;' \
  --data '{
  "files": [
    "https://mattrighetti.com/",
    "https://mattrighetti.com/2022/03/05/i-have-been-doing-cdn-caching-wrong.html",
  ]
}'</code></pre>
</div>
</div>
<div class="paragraph">
<p>Request above is pretty self expainatory, we&#8217;re telling CF to purge the
content of the URLs:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>mattrighetti.com/</code> &#8594; the homepage</p>
</li>
<li>
<p><code>mattrighetti.com/2022/03/05/i-have-been-doing-cdn-caching-wrong.html</code> &#8594; the article</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>If we request the content of those URLs, we&#8217;re going to get a <code>MISS</code> again, and
the new content will be served and cached from the origin server. Cool, right?</p>
</div>
<div class="paragraph">
<p>If you and me are like-minded, you should be able to see another problem.</p>
</div>
        <div class="dialog professor" title="Professor">
          <div class="dialog-head">
          <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 80 80" width="240px" height="240px"><path d="M 22.912109 9 C 19.960756 9 16.358303 9.7221658 13.375 11.421875 C 10.391697 13.121584 8 15.945797 8 19.863281 C 8 23.912396 10.891498 29.481134 13.701172 34.283203 C 16.296271 38.718537 18.669822 42.066616 19.050781 42.601562 C 17.846834 43.88996 17.980826 45.617638 18.001953 46.048828 C 18.091373 47.889143 19.090293 49.025828 20.119141 50.009766 C 21.147988 50.993703 22.29396 52.003168 23.417969 54.146484 C 23.539513 54.378162 24.004424 55.269066 24.628906 56.189453 C 25.24048 57.090816 25.918145 58.062135 27 58.542969 L 27 62 A 1.0001 1.0001 0 1 0 29 62 L 29 58.896484 C 29.354145 58.891575 29.868383 58.864096 30.429688 58.5625 C 31.787375 57.836032 31.951153 56.396403 31.988281 56.148438 A 1.0001 1.0001 0 1 0 30.011719 55.851562 C 29.992849 55.977598 29.808687 56.625296 29.484375 56.798828 A 1.0001 1.0001 0 0 0 29.484375 56.800781 C 29.32398 56.886961 29.109495 56.908203 28.824219 56.908203 C 28.42168 56.908203 28.114506 56.845583 27.839844 56.730469 A 1.0001 1.0001 0 0 0 27.837891 56.730469 C 27.590274 56.626904 26.829471 55.871519 26.283203 55.066406 C 25.736935 54.261294 25.312909 53.452119 25.189453 53.216797 C 23.919462 50.795113 22.489106 49.508516 21.501953 48.564453 C 20.5148 47.62039 20.058624 47.197857 19.998047 45.951172 C 19.976167 45.504675 19.999847 44.424134 20.576172 43.884766 C 21.028522 43.465344 21.714425 43.416172 22.232422 43.408203 C 23.766212 43.383873 24.938922 44.373548 25.3125 44.726562 A 1.0002743 1.0002743 0 1 0 26.6875 43.273438 C 26.275119 42.883757 25.089926 41.848234 23.351562 41.519531 C 23.684054 41.310892 24.051927 41.094628 24.453125 40.890625 C 25.797547 40.207705 29.03107 39.122361 33.191406 38.230469 C 33.362903 39.669244 33.848762 40.995803 34.662109 41.990234 C 35.637853 43.183182 36.971947 44 38.431641 44 L 47 44 L 47 43.970703 C 47.165836 43.983009 47.331031 44 47.5 44 C 51.713438 44 55 40.110516 55 35.5 C 55 35.333552 54.986972 35.170279 54.978516 35.005859 C 55.073803 35.01009 56.315831 35.06789 58.087891 35.404297 C 59.928007 35.753621 62.199459 36.410722 63.869141 37.503906 C 65.629152 38.655646 66.920293 40.814446 67.544922 42.654297 C 67.845362 43.539246 67.971865 44.326947 67.982422 44.830078 C 67.8245 44.776948 67.775568 44.787958 67.476562 44.662109 C 66.877167 44.409819 66.00089 44.047905 64.669922 43.699219 C 63.396201 43.366066 62.05944 43.286417 60.980469 43.095703 C 59.901498 42.904989 59.211917 42.607238 58.945312 42.208984 C 58.739458 41.900705 58.727505 41.54692 58.730469 41.353516 L 58.730469 41.351562 C 58.747339 40.563466 59.456845 39.915621 59.625 39.78125 A 1.0004882 1.0004882 0 1 0 58.375 38.21875 C 58.105295 38.434268 56.766737 39.493484 56.730469 41.3125 A 1.0001 1.0001 0 0 0 56.730469 41.316406 C 56.729579 41.371576 56.669939 42.401916 57.283203 43.320312 A 1.0001 1.0001 0 0 0 57.283203 43.322266 C 58.065599 44.491012 59.390783 44.844917 60.632812 45.064453 C 61.206024 45.165771 61.701344 45.250974 62.261719 45.326172 A 1.0001 1.0001 0 0 0 62.365234 45.669922 C 62.365234 45.669922 64.86532 50.149397 70.380859 52.326172 C 70.066178 52.387382 69.842456 52.467172 69.421875 52.509766 C 67.775834 52.676464 65.347141 52.681641 61.869141 52.681641 C 60.410926 52.681641 59.025939 52.816151 57.824219 53.234375 C 56.622499 53.652599 55.548945 54.41984 55.070312 55.630859 A 1.0001 1.0001 0 1 0 56.929688 56.367188 C 57.147056 55.817206 57.616939 55.425526 58.480469 55.125 C 59.343999 54.824474 60.544355 54.681641 61.869141 54.681641 C 62.686115 54.681641 63.272154 54.67395 63.980469 54.671875 C 63.991735 54.744254 64 54.705608 64 55 C 64 55.437053 63.877671 55.664997 63.5625 55.982422 C 63.247329 56.299847 62.713826 56.63574 62.078125 56.990234 C 60.806723 57.699222 59.073341 58.493869 58.189453 60.285156 C 56.857013 62.98452 55.733424 64.124354 53.070312 65.472656 C 51.996454 66.016788 51.078649 66.994555 50.269531 68.115234 C 49.460414 69.235914 48.788791 70.501858 48.398438 71.6875 A 1.0001 1.0001 0 1 0 50.296875 72.3125 C 50.602522 71.384142 51.198696 70.24818 51.892578 69.287109 C 52.58646 68.326039 53.408468 67.542727 53.974609 67.255859 C 56.877498 65.786161 58.534815 64.106558 59.984375 61.169922 C 60.491487 60.142209 61.715387 59.48209 63.052734 58.736328 C 63.721408 58.363447 64.404296 57.972872 64.980469 57.392578 C 65.556642 56.812284 66 55.971947 66 55 C 66 54.863078 65.984562 54.780633 65.980469 54.662109 C 67.402198 54.642097 68.628908 54.600673 69.623047 54.5 C 71.455256 54.314448 72.78119 53.916388 73.710938 52.974609 A 1.0001 1.0001 0 0 0 73.199219 51.291016 C 68.046363 50.247259 65.904396 47.324169 65.021484 45.927734 C 65.635572 46.129085 66.311463 46.339874 66.701172 46.503906 C 67.290277 46.751872 67.803666 47 68.490234 47 C 69.069103 47 69.600788 46.524089 69.783203 46.121094 C 69.965618 45.718098 70 45.334232 70 44.916016 C 70 44.079583 69.804185 43.091793 69.4375 42.011719 C 68.93179 40.522147 68.087632 38.874396 66.859375 37.494141 C 67.586499 36.16648 68 34.528283 68 32.751953 C 68 30.707785 67.458226 28.840877 66.513672 27.423828 C 65.569118 26.00678 64.148 25 62.5 25 C 62.198677 25 61.907673 25.043753 61.623047 25.107422 C 60.608562 23.557292 58.772228 22.865658 57.222656 22.474609 C 55.724809 22.096614 54.696278 22.068044 54.404297 22.054688 C 53.369258 20.624763 51.713906 19.85094 50.222656 19.474609 C 48.853601 19.129115 48.072381 19.115957 47.646484 19.091797 C 46.698895 17.029339 44.859694 15.934026 43.265625 15.457031 C 41.714286 14.992823 40.640372 15.046519 40.339844 15.052734 C 40.200011 14.970291 37.831103 13.568401 34.46875 12.085938 C 31.009066 10.56056 26.67809 9 22.912109 9 z M 22.912109 11 C 26.103129 11 30.317543 12.43944 33.662109 13.914062 C 36.591489 15.205629 38.559962 16.332428 39.078125 16.632812 C 39.031274 16.749234 39 16.874603 39 17 C 39 17.26 39.109063 17.520937 39.289062 17.710938 L 39.439453 17.830078 C 39.499453 17.870078 39.559141 17.899922 39.619141 17.919922 C 39.679141 17.949922 39.740781 17.970469 39.800781 17.980469 C 39.870781 17.990469 39.94 18 40 18 C 40.26 18 40.520938 17.890937 40.710938 17.710938 C 40.879411 17.533105 40.977202 17.29191 40.990234 17.048828 C 41.462183 17.094999 42.05333 17.182117 42.691406 17.373047 C 44.090367 17.791659 45.481694 18.583147 46.050781 20.3125 A 1.0001 1.0001 0 0 0 46.136719 20.503906 C 46.115766 20.542254 46.092861 20.580793 46.080078 20.619141 C 46.050078 20.679141 46.029531 20.740547 46.019531 20.810547 C 46.009531 20.870547 46 20.94 46 21 C 46 21.26 46.109063 21.520937 46.289062 21.710938 C 46.479062 21.890938 46.74 22 47 22 C 47.13 22 47.260859 21.979922 47.380859 21.919922 C 47.510859 21.869922 47.620937 21.800937 47.710938 21.710938 C 47.86877 21.544337 47.957243 21.320799 47.980469 21.09375 C 48.470812 21.153682 49.078329 21.246548 49.734375 21.412109 C 51.191603 21.779855 52.640369 22.505079 53.103516 23.443359 A 1.0001 1.0001 0 0 0 53.966797 24 C 53.966797 24 55.277147 24.04436 56.734375 24.412109 C 57.726571 24.6625 58.706905 25.080934 59.382812 25.617188 C 58.824296 25.86258 58.539744 25.98812 57.689453 26.361328 C 56.959362 26.681778 56.226486 27.003639 55.669922 27.248047 C 55.113358 27.492455 54.829216 27.614987 54.699219 27.673828 L 54.695312 27.675781 L 54.691406 27.677734 C 53.992541 28.001013 53.204998 28.546857 52.652344 29.335938 C 51.318755 27.899257 49.518306 27 47.5 27 C 46.088192 27 44.784831 27.445042 43.669922 28.199219 L 43.619141 28.074219 C 43.619141 28.074219 41.839903 28.806549 40.052734 29.541016 C 39.15915 29.908249 38.263012 30.277439 37.587891 30.554688 C 37.25033 30.69331 36.967179 30.808775 36.767578 30.890625 C 36.667778 30.931555 36.589701 30.964028 36.535156 30.986328 C 36.507886 30.997478 36.486666 31.006019 36.472656 31.011719 L 36.46875 31.013672 C 34.671404 31.696821 33.47822 33.590501 33.173828 36.177734 C 28.67056 37.106859 25.2554 38.241503 23.546875 39.109375 C 21.798376 39.998459 20.656347 40.983978 20.472656 41.144531 C 19.868962 40.289449 17.808667 37.342736 15.427734 33.273438 C 12.672408 28.564256 10 22.859167 10 19.863281 C 10 16.735766 11.783287 14.629244 14.365234 13.158203 C 16.947182 11.687162 20.298462 11 22.912109 11 z M 19 16 A 2 2 0 0 0 19 20 A 2 2 0 0 0 19 16 z M 35.697266 16.384766 C 35.567734 16.369922 35.433281 16.379922 35.300781 16.419922 C 34.770781 16.579922 34.470859 17.139922 34.630859 17.669922 C 34.760859 18.099922 35.159844 18.380859 35.589844 18.380859 C 35.679844 18.380859 35.779141 18.369844 35.869141 18.339844 C 36.399141 18.179844 36.700781 17.619609 36.550781 17.099609 C 36.430781 16.702109 36.085859 16.429297 35.697266 16.384766 z M 31.787109 18.501953 C 31.532109 18.481953 31.270547 18.560234 31.060547 18.740234 C 30.640547 19.100234 30.589219 19.740156 30.949219 20.160156 C 31.149219 20.390156 31.430937 20.5 31.710938 20.5 C 31.940937 20.5 32.169375 20.419766 32.359375 20.259766 C 32.779375 19.899766 32.830703 19.269609 32.470703 18.849609 C 32.290703 18.639609 32.042109 18.521953 31.787109 18.501953 z M 43.460938 20.029297 C 42.900937 20.079297 42.489297 20.549609 42.529297 21.099609 C 42.569297 21.629609 42.999297 22.029297 43.529297 22.029297 L 43.599609 22.029297 C 44.149609 21.989297 44.559531 21.510938 44.519531 20.960938 C 44.479531 20.410937 44.010937 19.999297 43.460938 20.029297 z M 40.207031 20.570312 C 40.0775 20.557344 39.943047 20.569375 39.810547 20.609375 C 39.280547 20.779375 38.990391 21.339375 39.150391 21.859375 C 39.280391 22.289375 39.679375 22.570312 40.109375 22.570312 C 40.199375 22.570312 40.300391 22.549531 40.400391 22.519531 C 40.930391 22.359531 41.220547 21.799531 41.060547 21.269531 C 40.940547 20.872031 40.595625 20.609219 40.207031 20.570312 z M 28.90625 22.005859 C 28.808594 22.015547 28.711641 22.040078 28.619141 22.080078 C 28.499141 22.130078 28.389063 22.199063 28.289062 22.289062 C 28.109062 22.479062 28 22.74 28 23 C 28 23.13 28.030078 23.260859 28.080078 23.380859 C 28.130078 23.510859 28.199063 23.610937 28.289062 23.710938 C 28.389062 23.800938 28.499141 23.869922 28.619141 23.919922 C 28.739141 23.969922 28.87 24 29 24 C 29.26 24 29.520938 23.890938 29.710938 23.710938 C 29.800938 23.610938 29.869922 23.510859 29.919922 23.380859 C 29.979922 23.260859 30 23.13 30 23 C 30 22.74 29.890937 22.479063 29.710938 22.289062 C 29.500937 22.079062 29.199219 21.976797 28.90625 22.005859 z M 37.169922 22.267578 C 36.914922 22.252578 36.654219 22.334531 36.449219 22.519531 C 36.039219 22.889531 35.999141 23.519453 36.369141 23.939453 C 36.569141 24.159453 36.839141 24.269531 37.119141 24.269531 C 37.349141 24.269531 37.589297 24.179766 37.779297 24.009766 C 38.189297 23.639766 38.229375 23.009609 37.859375 22.599609 C 37.674375 22.394609 37.424922 22.282578 37.169922 22.267578 z M 18.5 24 A 1.5 1.5 0 0 0 18.5 27 A 1.5 1.5 0 0 0 18.5 24 z M 34.800781 25.019531 C 34.740781 25.029531 34.679141 25.050078 34.619141 25.080078 C 34.559141 25.100078 34.499453 25.129922 34.439453 25.169922 C 34.389453 25.199922 34.339062 25.249063 34.289062 25.289062 C 34.109062 25.479062 34 25.74 34 26 C 34 26.26 34.109063 26.520937 34.289062 26.710938 C 34.339063 26.750938 34.389453 26.800078 34.439453 26.830078 C 34.499453 26.870078 34.559141 26.899922 34.619141 26.919922 C 34.679141 26.949922 34.740781 26.970469 34.800781 26.980469 C 34.870781 26.990469 34.94 27 35 27 C 35.06 27 35.129219 26.990469 35.199219 26.980469 C 35.259219 26.970469 35.320859 26.949922 35.380859 26.919922 C 35.440859 26.899922 35.500547 26.870078 35.560547 26.830078 C 35.610547 26.800078 35.660938 26.750937 35.710938 26.710938 C 35.750938 26.660938 35.800078 26.610547 35.830078 26.560547 C 35.870078 26.500547 35.899922 26.440859 35.919922 26.380859 C 35.949922 26.320859 35.970469 26.259219 35.980469 26.199219 C 35.990469 26.129219 36 26.06 36 26 C 36 25.94 35.990469 25.870781 35.980469 25.800781 C 35.970469 25.740781 35.949922 25.679141 35.919922 25.619141 C 35.899922 25.559141 35.870078 25.499453 35.830078 25.439453 C 35.800078 25.389453 35.750937 25.339063 35.710938 25.289062 C 35.660937 25.249062 35.610547 25.199922 35.560547 25.169922 C 35.500547 25.129922 35.440859 25.100078 35.380859 25.080078 C 35.320859 25.050078 35.259219 25.029531 35.199219 25.019531 C 35.069219 24.989531 34.930781 24.989531 34.800781 25.019531 z M 62.5 27 C 63.337 27 64.165413 27.504798 64.849609 28.53125 C 65.533805 29.557702 66 31.068121 66 32.751953 C 66 34.00733 65.737519 35.160765 65.320312 36.09375 C 65.200872 36.006694 65.089403 35.911589 64.964844 35.830078 C 63.115425 34.619215 60.926832 33.96549 59.054688 33.570312 C 59.029888 33.300341 59 33.032794 59 32.751953 C 59 31.068121 59.466195 29.557702 60.150391 28.53125 C 60.834587 27.504798 61.663 27 62.5 27 z M 57.916016 28.445312 C 57.328962 29.690383 57 31.166369 57 32.751953 C 57 32.906001 57.009389 33.055718 57.015625 33.207031 C 55.772365 33.037808 54.913216 33 54.912109 33 A 1.0001 1.0001 0 0 0 54.673828 33.027344 C 54.498232 32.374737 54.249591 31.758461 53.947266 31.179688 L 53.982422 31.185547 C 54.0947 30.58994 54.973824 29.750039 55.53125 29.492188 C 55.45871 29.525108 55.922938 29.320384 56.474609 29.078125 C 56.871683 28.903755 57.404225 28.670009 57.916016 28.445312 z M 47.5 29 C 50.466269 29 53 31.826245 53 35.5 C 53 39.173755 50.466269 42 47.5 42 C 44.533731 42 42 39.173755 42 35.5 C 42 31.826245 44.533731 29 47.5 29 z M 40.976562 31.322266 C 40.355891 32.56516 40 33.991941 40 35.5 C 40 38.077287 41.028118 40.426794 42.669922 42 L 38.431641 42 C 37.756334 42 36.895938 41.562119 36.210938 40.724609 C 35.525937 39.8871 35.042969 38.697103 35.042969 37.390625 C 35.042969 34.679516 36.061342 33.310422 37.177734 32.884766 C 37.177734 32.884766 37.179688 32.882812 37.179688 32.882812 C 37.226627 32.865252 37.212823 32.868871 37.226562 32.863281 C 37.242672 32.856681 37.265109 32.849281 37.292969 32.837891 C 37.348679 32.815111 37.427234 32.781294 37.527344 32.740234 C 37.727564 32.658134 38.009936 32.542986 38.347656 32.404297 C 39.023097 32.126919 39.918835 31.757892 40.8125 31.390625 C 40.894854 31.35678 40.894409 31.356021 40.976562 31.322266 z M 52.027344 45.986328 A 1.0001 1.0001 0 0 0 51.001953 47.056641 C 51.12024 49.123838 50.810157 50.953649 50.085938 52.595703 A 1.0001 1.0001 0 0 0 50.083984 52.597656 C 49.747402 53.362036 49.483444 53.693798 49.085938 54.595703 C 48.224157 56.549649 47.86824 58.719838 48.001953 61.056641 A 1.0001 1.0001 0 1 0 49.998047 60.943359 C 49.87976 58.876162 50.189842 57.046351 50.914062 55.404297 A 1.0001 1.0001 0 0 0 50.916016 55.402344 C 51.249338 54.645539 51.513827 54.312598 51.914062 53.404297 C 52.775843 51.450351 53.13176 49.280162 52.998047 46.943359 A 1.0001 1.0001 0 0 0 52.027344 45.986328 z M 27.988281 47.988281 A 1.0001 1.0001 0 0 0 27.167969 49.554688 C 27.834713 50.554304 28.500713 51.554304 29.167969 52.554688 A 1.0001 1.0001 0 1 0 30.832031 51.445312 C 30.165287 50.445696 29.499287 49.445696 28.832031 48.445312 A 1.0001 1.0001 0 0 0 27.988281 47.988281 z M 28 64.330078 C 27.45 64.330078 27 64.780078 27 65.330078 C 27 65.890078 27.45 66.330078 28 66.330078 C 28.55 66.330078 29 65.890078 29 65.330078 C 29 64.780078 28.55 64.330078 28 64.330078 z M 28 67.669922 C 27.45 67.669922 27 68.119922 27 68.669922 C 27 69.219922 27.45 69.669922 28 69.669922 C 28.55 69.669922 29 69.219922 29 68.669922 C 29 68.119922 28.55 67.669922 28 67.669922 z M 28.09375 71.005859 C 27.800781 70.976797 27.499063 71.079062 27.289062 71.289062 L 27.169922 71.439453 C 27.129922 71.499453 27.100078 71.559141 27.080078 71.619141 C 27.050078 71.679141 27.029531 71.740781 27.019531 71.800781 C 27.009531 71.870781 27 71.93 27 72 C 27 72.13 27.030078 72.260859 27.080078 72.380859 C 27.130078 72.500859 27.199063 72.610938 27.289062 72.710938 C 27.479062 72.890937 27.74 73 28 73 C 28.13 73 28.260859 72.969922 28.380859 72.919922 C 28.500859 72.869922 28.610937 72.800938 28.710938 72.710938 C 28.800938 72.610937 28.869922 72.500859 28.919922 72.380859 C 28.969922 72.260859 29 72.13 29 72 C 29 71.93 28.990469 71.870781 28.980469 71.800781 C 28.970469 71.740781 28.949922 71.679141 28.919922 71.619141 C 28.899922 71.559141 28.870078 71.499453 28.830078 71.439453 L 28.710938 71.289062 C 28.610938 71.199063 28.500859 71.130078 28.380859 71.080078 C 28.288359 71.040078 28.191406 71.015547 28.09375 71.005859 z"/></svg>
          </div>
          <div class="dialog-text">
          <p>Ehw, who wants to do that every time something is pushed to remote? I can't even remember the damn API request!</p>
          </div>
        </div>
<div class="paragraph">
<p>This gets very tedious, very quick. I would like my CI/CD to take care of all
this, automatically. With little knowledge of <code>git</code> and some bash scripting, it
should be easy enough to craft a script that:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Checks which file has been changed in the commit</p>
</li>
<li>
<p>Transforms filenames into their respective URLs</p>
</li>
<li>
<p><code>curl</code> CF APIs as soon as the new content is published on the server</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Let me think out loud the possible steps. I&#8217;m going to tackle this one step at a
time and I&#8217;m going to assume that the outputs of each command is going to be
piped, in order, to the next command.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Check which files have been changed</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell session">$ git diff --name-only HEAD HEAD^1 | grep _posts

_posts/2023-02-24-i-have-been-doing-caching-wrong.adoc</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Transform filenames into URLs</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell session">$ sed 's/_posts\///' | \
  sed 's/\.adoc//' | \
  awk -F '-' '{ printf("https://mattrighetti.com/%s/%s/%s/%s.html", $1, $2, $3, substr($0,12)) }'

https://mattrighetti.com/2023/03/05/i-have-been-doing-cdn-caching-wrong.html</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Create JSON from returned values</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell session">$ jq -Rn '{"files":["https://mattrighetti.com/", inputs]}'

{
  "files": [
    "https://mattrighetti.com/"
    "https://mattrighetti.com/2023/03/05/i-have-been-doing-cdn-caching-wrong.html",
  ]
}</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>curl</code> CF APIs</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell session">$ curl -X POST \
      --url https://api.cloudflare.com/client/v4/zones/&lt;zone_id&gt;/purge_cache \
      -H 'Content-Type: application/json' \
      -H 'Authorization: Bearer &lt;api_token&gt;' \
      --data-binary @-

{
  "success": true,
  "errors": [],
  "messages": [],
  "result": {
    "id": "fc418140aa167fb1f3326ffc9f393c"
  }
}</code></pre>
</div>
</div>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>Here <code>@-</code> will take the input from pipe</p>
          </div>
        </div>
<div class="paragraph">
<p>I wrote quite a bit of commands but it&#8217;s mainly string manipulation to get a
valid URL of an article from its filename.</p>
</div>
<div class="paragraph">
<p>I can add this little script to my GH Action that is going to be triggered right
after the content has been deployed on the origin server. This is the step that
I&#8217;m adding to the existing
<a href="https://github.com/mattrighetti/mattrighetti.github.io/blob/f85f7cef1cb435f52a4e730e321bae3da363393f/.github/workflows/ci.yml#L38-L51">action</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml"><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Purge CF Cache</span>
  <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">sleep 60</span>
    <span class="s">git diff --name-only HEAD HEAD~1 | \</span>
    <span class="s">grep _posts | \</span>
    <span class="s">sed 's/_posts\///' | sed 's/\.adoc//' | \</span>
    <span class="s">awk -F '-' '{ printf("https://mattrighetti.com/%s/%s/%s/%s.html", $1, $2, $3, substr($0,12)) }' | \</span>
    <span class="s">jq -Rn '{"files": ["https://mattrighetti.com/", inputs]}' | \</span>
    <span class="s">curl -s -X POST \</span>
      <span class="s">--url https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache \</span>
      <span class="s">-H 'Content-Type: application/json' \</span>
      <span class="s">-H 'Authorization: Bearer ${{ secrets.CF_API_TOKEN }}' \</span>
      <span class="s">--data-binary @- | \</span>
    <span class="s">jq</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>And voila! GH Actions will now do the hard and redundant work for us.</p>
</div>
<div class="paragraph">
<p>It took me quite a bit of time, but now the workflow that I have to adopt
to post new articles on my website is basically the same as before, with the
addition that now content is cached and delivered faster to my readers.</p>
</div>
<div class="paragraph">
<p>I&#8217;m going to conclude this article with the graph that now shows what I initally
expected. This is the data after a week of content caching, take a look</p>
</div>
<div class="charts-container">
    <div class="chart-single-container">
        <h4>Bandwidth Saved</h4>
        <div class="ct-chart" id="chart3"></div>
    </div>
</div>
<script>
    let cached_data_2 = {
        labels: ['Cached', 'Uncached'],
        series: [63, 9]
    }

    var options3 = {
        chartPadding: 30,
        showLabel: true,
        height: 300,
        labelInterpolationFnc: function(value) {
            return value + ' ' + Math.round(cached_data_2.series[cached_data_2.labels.indexOf(value)] / cached_data_2.series.reduce(sum) * 100) + '%';
        }
    };

    new Chartist.Pie('#chart3', cached_data_2, options3);
</script>]]></content><author><name>Mattia Righetti</name></author><summary type="html"><![CDATA[One of the nice things that reaching the HN frontpage gives you is that your website, or content in general, will get flooded by requests by the community. This is so frequent that it gained the name Hug of Death among the HN members, because usually servers are not able to keep up with the overwhelming clicks of the HN users and they either crash or make you wait for minutes to get a response back.]]></summary></entry><entry><title type="html">AsciiDoc, Liquid and Jekyll</title><link href="https://mattrighetti.com/2023/02/22/asciidoc-liquid-and-jekyll.html" rel="alternate" type="text/html" title="AsciiDoc, Liquid and Jekyll" /><published>2023-02-22T00:00:00+00:00</published><updated>2023-02-22T00:00:00+00:00</updated><id>https://mattrighetti.com/2023/02/22/asciidoc-liquid-and-jekyll</id><content type="html" xml:base="https://mattrighetti.com/2023/02/22/asciidoc-liquid-and-jekyll.html"><![CDATA[<div class="paragraph">
<p>A couple of days ago I was giving a little update to my website and I needed a way
to create and inject custom HTML into some of my posts.</p>
</div>
        <div class="dialog professor" title="Professor">
          <div class="dialog-head">
          <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 80 80" width="240px" height="240px"><path d="M 22.912109 9 C 19.960756 9 16.358303 9.7221658 13.375 11.421875 C 10.391697 13.121584 8 15.945797 8 19.863281 C 8 23.912396 10.891498 29.481134 13.701172 34.283203 C 16.296271 38.718537 18.669822 42.066616 19.050781 42.601562 C 17.846834 43.88996 17.980826 45.617638 18.001953 46.048828 C 18.091373 47.889143 19.090293 49.025828 20.119141 50.009766 C 21.147988 50.993703 22.29396 52.003168 23.417969 54.146484 C 23.539513 54.378162 24.004424 55.269066 24.628906 56.189453 C 25.24048 57.090816 25.918145 58.062135 27 58.542969 L 27 62 A 1.0001 1.0001 0 1 0 29 62 L 29 58.896484 C 29.354145 58.891575 29.868383 58.864096 30.429688 58.5625 C 31.787375 57.836032 31.951153 56.396403 31.988281 56.148438 A 1.0001 1.0001 0 1 0 30.011719 55.851562 C 29.992849 55.977598 29.808687 56.625296 29.484375 56.798828 A 1.0001 1.0001 0 0 0 29.484375 56.800781 C 29.32398 56.886961 29.109495 56.908203 28.824219 56.908203 C 28.42168 56.908203 28.114506 56.845583 27.839844 56.730469 A 1.0001 1.0001 0 0 0 27.837891 56.730469 C 27.590274 56.626904 26.829471 55.871519 26.283203 55.066406 C 25.736935 54.261294 25.312909 53.452119 25.189453 53.216797 C 23.919462 50.795113 22.489106 49.508516 21.501953 48.564453 C 20.5148 47.62039 20.058624 47.197857 19.998047 45.951172 C 19.976167 45.504675 19.999847 44.424134 20.576172 43.884766 C 21.028522 43.465344 21.714425 43.416172 22.232422 43.408203 C 23.766212 43.383873 24.938922 44.373548 25.3125 44.726562 A 1.0002743 1.0002743 0 1 0 26.6875 43.273438 C 26.275119 42.883757 25.089926 41.848234 23.351562 41.519531 C 23.684054 41.310892 24.051927 41.094628 24.453125 40.890625 C 25.797547 40.207705 29.03107 39.122361 33.191406 38.230469 C 33.362903 39.669244 33.848762 40.995803 34.662109 41.990234 C 35.637853 43.183182 36.971947 44 38.431641 44 L 47 44 L 47 43.970703 C 47.165836 43.983009 47.331031 44 47.5 44 C 51.713438 44 55 40.110516 55 35.5 C 55 35.333552 54.986972 35.170279 54.978516 35.005859 C 55.073803 35.01009 56.315831 35.06789 58.087891 35.404297 C 59.928007 35.753621 62.199459 36.410722 63.869141 37.503906 C 65.629152 38.655646 66.920293 40.814446 67.544922 42.654297 C 67.845362 43.539246 67.971865 44.326947 67.982422 44.830078 C 67.8245 44.776948 67.775568 44.787958 67.476562 44.662109 C 66.877167 44.409819 66.00089 44.047905 64.669922 43.699219 C 63.396201 43.366066 62.05944 43.286417 60.980469 43.095703 C 59.901498 42.904989 59.211917 42.607238 58.945312 42.208984 C 58.739458 41.900705 58.727505 41.54692 58.730469 41.353516 L 58.730469 41.351562 C 58.747339 40.563466 59.456845 39.915621 59.625 39.78125 A 1.0004882 1.0004882 0 1 0 58.375 38.21875 C 58.105295 38.434268 56.766737 39.493484 56.730469 41.3125 A 1.0001 1.0001 0 0 0 56.730469 41.316406 C 56.729579 41.371576 56.669939 42.401916 57.283203 43.320312 A 1.0001 1.0001 0 0 0 57.283203 43.322266 C 58.065599 44.491012 59.390783 44.844917 60.632812 45.064453 C 61.206024 45.165771 61.701344 45.250974 62.261719 45.326172 A 1.0001 1.0001 0 0 0 62.365234 45.669922 C 62.365234 45.669922 64.86532 50.149397 70.380859 52.326172 C 70.066178 52.387382 69.842456 52.467172 69.421875 52.509766 C 67.775834 52.676464 65.347141 52.681641 61.869141 52.681641 C 60.410926 52.681641 59.025939 52.816151 57.824219 53.234375 C 56.622499 53.652599 55.548945 54.41984 55.070312 55.630859 A 1.0001 1.0001 0 1 0 56.929688 56.367188 C 57.147056 55.817206 57.616939 55.425526 58.480469 55.125 C 59.343999 54.824474 60.544355 54.681641 61.869141 54.681641 C 62.686115 54.681641 63.272154 54.67395 63.980469 54.671875 C 63.991735 54.744254 64 54.705608 64 55 C 64 55.437053 63.877671 55.664997 63.5625 55.982422 C 63.247329 56.299847 62.713826 56.63574 62.078125 56.990234 C 60.806723 57.699222 59.073341 58.493869 58.189453 60.285156 C 56.857013 62.98452 55.733424 64.124354 53.070312 65.472656 C 51.996454 66.016788 51.078649 66.994555 50.269531 68.115234 C 49.460414 69.235914 48.788791 70.501858 48.398438 71.6875 A 1.0001 1.0001 0 1 0 50.296875 72.3125 C 50.602522 71.384142 51.198696 70.24818 51.892578 69.287109 C 52.58646 68.326039 53.408468 67.542727 53.974609 67.255859 C 56.877498 65.786161 58.534815 64.106558 59.984375 61.169922 C 60.491487 60.142209 61.715387 59.48209 63.052734 58.736328 C 63.721408 58.363447 64.404296 57.972872 64.980469 57.392578 C 65.556642 56.812284 66 55.971947 66 55 C 66 54.863078 65.984562 54.780633 65.980469 54.662109 C 67.402198 54.642097 68.628908 54.600673 69.623047 54.5 C 71.455256 54.314448 72.78119 53.916388 73.710938 52.974609 A 1.0001 1.0001 0 0 0 73.199219 51.291016 C 68.046363 50.247259 65.904396 47.324169 65.021484 45.927734 C 65.635572 46.129085 66.311463 46.339874 66.701172 46.503906 C 67.290277 46.751872 67.803666 47 68.490234 47 C 69.069103 47 69.600788 46.524089 69.783203 46.121094 C 69.965618 45.718098 70 45.334232 70 44.916016 C 70 44.079583 69.804185 43.091793 69.4375 42.011719 C 68.93179 40.522147 68.087632 38.874396 66.859375 37.494141 C 67.586499 36.16648 68 34.528283 68 32.751953 C 68 30.707785 67.458226 28.840877 66.513672 27.423828 C 65.569118 26.00678 64.148 25 62.5 25 C 62.198677 25 61.907673 25.043753 61.623047 25.107422 C 60.608562 23.557292 58.772228 22.865658 57.222656 22.474609 C 55.724809 22.096614 54.696278 22.068044 54.404297 22.054688 C 53.369258 20.624763 51.713906 19.85094 50.222656 19.474609 C 48.853601 19.129115 48.072381 19.115957 47.646484 19.091797 C 46.698895 17.029339 44.859694 15.934026 43.265625 15.457031 C 41.714286 14.992823 40.640372 15.046519 40.339844 15.052734 C 40.200011 14.970291 37.831103 13.568401 34.46875 12.085938 C 31.009066 10.56056 26.67809 9 22.912109 9 z M 22.912109 11 C 26.103129 11 30.317543 12.43944 33.662109 13.914062 C 36.591489 15.205629 38.559962 16.332428 39.078125 16.632812 C 39.031274 16.749234 39 16.874603 39 17 C 39 17.26 39.109063 17.520937 39.289062 17.710938 L 39.439453 17.830078 C 39.499453 17.870078 39.559141 17.899922 39.619141 17.919922 C 39.679141 17.949922 39.740781 17.970469 39.800781 17.980469 C 39.870781 17.990469 39.94 18 40 18 C 40.26 18 40.520938 17.890937 40.710938 17.710938 C 40.879411 17.533105 40.977202 17.29191 40.990234 17.048828 C 41.462183 17.094999 42.05333 17.182117 42.691406 17.373047 C 44.090367 17.791659 45.481694 18.583147 46.050781 20.3125 A 1.0001 1.0001 0 0 0 46.136719 20.503906 C 46.115766 20.542254 46.092861 20.580793 46.080078 20.619141 C 46.050078 20.679141 46.029531 20.740547 46.019531 20.810547 C 46.009531 20.870547 46 20.94 46 21 C 46 21.26 46.109063 21.520937 46.289062 21.710938 C 46.479062 21.890938 46.74 22 47 22 C 47.13 22 47.260859 21.979922 47.380859 21.919922 C 47.510859 21.869922 47.620937 21.800937 47.710938 21.710938 C 47.86877 21.544337 47.957243 21.320799 47.980469 21.09375 C 48.470812 21.153682 49.078329 21.246548 49.734375 21.412109 C 51.191603 21.779855 52.640369 22.505079 53.103516 23.443359 A 1.0001 1.0001 0 0 0 53.966797 24 C 53.966797 24 55.277147 24.04436 56.734375 24.412109 C 57.726571 24.6625 58.706905 25.080934 59.382812 25.617188 C 58.824296 25.86258 58.539744 25.98812 57.689453 26.361328 C 56.959362 26.681778 56.226486 27.003639 55.669922 27.248047 C 55.113358 27.492455 54.829216 27.614987 54.699219 27.673828 L 54.695312 27.675781 L 54.691406 27.677734 C 53.992541 28.001013 53.204998 28.546857 52.652344 29.335938 C 51.318755 27.899257 49.518306 27 47.5 27 C 46.088192 27 44.784831 27.445042 43.669922 28.199219 L 43.619141 28.074219 C 43.619141 28.074219 41.839903 28.806549 40.052734 29.541016 C 39.15915 29.908249 38.263012 30.277439 37.587891 30.554688 C 37.25033 30.69331 36.967179 30.808775 36.767578 30.890625 C 36.667778 30.931555 36.589701 30.964028 36.535156 30.986328 C 36.507886 30.997478 36.486666 31.006019 36.472656 31.011719 L 36.46875 31.013672 C 34.671404 31.696821 33.47822 33.590501 33.173828 36.177734 C 28.67056 37.106859 25.2554 38.241503 23.546875 39.109375 C 21.798376 39.998459 20.656347 40.983978 20.472656 41.144531 C 19.868962 40.289449 17.808667 37.342736 15.427734 33.273438 C 12.672408 28.564256 10 22.859167 10 19.863281 C 10 16.735766 11.783287 14.629244 14.365234 13.158203 C 16.947182 11.687162 20.298462 11 22.912109 11 z M 19 16 A 2 2 0 0 0 19 20 A 2 2 0 0 0 19 16 z M 35.697266 16.384766 C 35.567734 16.369922 35.433281 16.379922 35.300781 16.419922 C 34.770781 16.579922 34.470859 17.139922 34.630859 17.669922 C 34.760859 18.099922 35.159844 18.380859 35.589844 18.380859 C 35.679844 18.380859 35.779141 18.369844 35.869141 18.339844 C 36.399141 18.179844 36.700781 17.619609 36.550781 17.099609 C 36.430781 16.702109 36.085859 16.429297 35.697266 16.384766 z M 31.787109 18.501953 C 31.532109 18.481953 31.270547 18.560234 31.060547 18.740234 C 30.640547 19.100234 30.589219 19.740156 30.949219 20.160156 C 31.149219 20.390156 31.430937 20.5 31.710938 20.5 C 31.940937 20.5 32.169375 20.419766 32.359375 20.259766 C 32.779375 19.899766 32.830703 19.269609 32.470703 18.849609 C 32.290703 18.639609 32.042109 18.521953 31.787109 18.501953 z M 43.460938 20.029297 C 42.900937 20.079297 42.489297 20.549609 42.529297 21.099609 C 42.569297 21.629609 42.999297 22.029297 43.529297 22.029297 L 43.599609 22.029297 C 44.149609 21.989297 44.559531 21.510938 44.519531 20.960938 C 44.479531 20.410937 44.010937 19.999297 43.460938 20.029297 z M 40.207031 20.570312 C 40.0775 20.557344 39.943047 20.569375 39.810547 20.609375 C 39.280547 20.779375 38.990391 21.339375 39.150391 21.859375 C 39.280391 22.289375 39.679375 22.570312 40.109375 22.570312 C 40.199375 22.570312 40.300391 22.549531 40.400391 22.519531 C 40.930391 22.359531 41.220547 21.799531 41.060547 21.269531 C 40.940547 20.872031 40.595625 20.609219 40.207031 20.570312 z M 28.90625 22.005859 C 28.808594 22.015547 28.711641 22.040078 28.619141 22.080078 C 28.499141 22.130078 28.389063 22.199063 28.289062 22.289062 C 28.109062 22.479062 28 22.74 28 23 C 28 23.13 28.030078 23.260859 28.080078 23.380859 C 28.130078 23.510859 28.199063 23.610937 28.289062 23.710938 C 28.389062 23.800938 28.499141 23.869922 28.619141 23.919922 C 28.739141 23.969922 28.87 24 29 24 C 29.26 24 29.520938 23.890938 29.710938 23.710938 C 29.800938 23.610938 29.869922 23.510859 29.919922 23.380859 C 29.979922 23.260859 30 23.13 30 23 C 30 22.74 29.890937 22.479063 29.710938 22.289062 C 29.500937 22.079062 29.199219 21.976797 28.90625 22.005859 z M 37.169922 22.267578 C 36.914922 22.252578 36.654219 22.334531 36.449219 22.519531 C 36.039219 22.889531 35.999141 23.519453 36.369141 23.939453 C 36.569141 24.159453 36.839141 24.269531 37.119141 24.269531 C 37.349141 24.269531 37.589297 24.179766 37.779297 24.009766 C 38.189297 23.639766 38.229375 23.009609 37.859375 22.599609 C 37.674375 22.394609 37.424922 22.282578 37.169922 22.267578 z M 18.5 24 A 1.5 1.5 0 0 0 18.5 27 A 1.5 1.5 0 0 0 18.5 24 z M 34.800781 25.019531 C 34.740781 25.029531 34.679141 25.050078 34.619141 25.080078 C 34.559141 25.100078 34.499453 25.129922 34.439453 25.169922 C 34.389453 25.199922 34.339062 25.249063 34.289062 25.289062 C 34.109062 25.479062 34 25.74 34 26 C 34 26.26 34.109063 26.520937 34.289062 26.710938 C 34.339063 26.750938 34.389453 26.800078 34.439453 26.830078 C 34.499453 26.870078 34.559141 26.899922 34.619141 26.919922 C 34.679141 26.949922 34.740781 26.970469 34.800781 26.980469 C 34.870781 26.990469 34.94 27 35 27 C 35.06 27 35.129219 26.990469 35.199219 26.980469 C 35.259219 26.970469 35.320859 26.949922 35.380859 26.919922 C 35.440859 26.899922 35.500547 26.870078 35.560547 26.830078 C 35.610547 26.800078 35.660938 26.750937 35.710938 26.710938 C 35.750938 26.660938 35.800078 26.610547 35.830078 26.560547 C 35.870078 26.500547 35.899922 26.440859 35.919922 26.380859 C 35.949922 26.320859 35.970469 26.259219 35.980469 26.199219 C 35.990469 26.129219 36 26.06 36 26 C 36 25.94 35.990469 25.870781 35.980469 25.800781 C 35.970469 25.740781 35.949922 25.679141 35.919922 25.619141 C 35.899922 25.559141 35.870078 25.499453 35.830078 25.439453 C 35.800078 25.389453 35.750937 25.339063 35.710938 25.289062 C 35.660937 25.249062 35.610547 25.199922 35.560547 25.169922 C 35.500547 25.129922 35.440859 25.100078 35.380859 25.080078 C 35.320859 25.050078 35.259219 25.029531 35.199219 25.019531 C 35.069219 24.989531 34.930781 24.989531 34.800781 25.019531 z M 62.5 27 C 63.337 27 64.165413 27.504798 64.849609 28.53125 C 65.533805 29.557702 66 31.068121 66 32.751953 C 66 34.00733 65.737519 35.160765 65.320312 36.09375 C 65.200872 36.006694 65.089403 35.911589 64.964844 35.830078 C 63.115425 34.619215 60.926832 33.96549 59.054688 33.570312 C 59.029888 33.300341 59 33.032794 59 32.751953 C 59 31.068121 59.466195 29.557702 60.150391 28.53125 C 60.834587 27.504798 61.663 27 62.5 27 z M 57.916016 28.445312 C 57.328962 29.690383 57 31.166369 57 32.751953 C 57 32.906001 57.009389 33.055718 57.015625 33.207031 C 55.772365 33.037808 54.913216 33 54.912109 33 A 1.0001 1.0001 0 0 0 54.673828 33.027344 C 54.498232 32.374737 54.249591 31.758461 53.947266 31.179688 L 53.982422 31.185547 C 54.0947 30.58994 54.973824 29.750039 55.53125 29.492188 C 55.45871 29.525108 55.922938 29.320384 56.474609 29.078125 C 56.871683 28.903755 57.404225 28.670009 57.916016 28.445312 z M 47.5 29 C 50.466269 29 53 31.826245 53 35.5 C 53 39.173755 50.466269 42 47.5 42 C 44.533731 42 42 39.173755 42 35.5 C 42 31.826245 44.533731 29 47.5 29 z M 40.976562 31.322266 C 40.355891 32.56516 40 33.991941 40 35.5 C 40 38.077287 41.028118 40.426794 42.669922 42 L 38.431641 42 C 37.756334 42 36.895938 41.562119 36.210938 40.724609 C 35.525937 39.8871 35.042969 38.697103 35.042969 37.390625 C 35.042969 34.679516 36.061342 33.310422 37.177734 32.884766 C 37.177734 32.884766 37.179688 32.882812 37.179688 32.882812 C 37.226627 32.865252 37.212823 32.868871 37.226562 32.863281 C 37.242672 32.856681 37.265109 32.849281 37.292969 32.837891 C 37.348679 32.815111 37.427234 32.781294 37.527344 32.740234 C 37.727564 32.658134 38.009936 32.542986 38.347656 32.404297 C 39.023097 32.126919 39.918835 31.757892 40.8125 31.390625 C 40.894854 31.35678 40.894409 31.356021 40.976562 31.322266 z M 52.027344 45.986328 A 1.0001 1.0001 0 0 0 51.001953 47.056641 C 51.12024 49.123838 50.810157 50.953649 50.085938 52.595703 A 1.0001 1.0001 0 0 0 50.083984 52.597656 C 49.747402 53.362036 49.483444 53.693798 49.085938 54.595703 C 48.224157 56.549649 47.86824 58.719838 48.001953 61.056641 A 1.0001 1.0001 0 1 0 49.998047 60.943359 C 49.87976 58.876162 50.189842 57.046351 50.914062 55.404297 A 1.0001 1.0001 0 0 0 50.916016 55.402344 C 51.249338 54.645539 51.513827 54.312598 51.914062 53.404297 C 52.775843 51.450351 53.13176 49.280162 52.998047 46.943359 A 1.0001 1.0001 0 0 0 52.027344 45.986328 z M 27.988281 47.988281 A 1.0001 1.0001 0 0 0 27.167969 49.554688 C 27.834713 50.554304 28.500713 51.554304 29.167969 52.554688 A 1.0001 1.0001 0 1 0 30.832031 51.445312 C 30.165287 50.445696 29.499287 49.445696 28.832031 48.445312 A 1.0001 1.0001 0 0 0 27.988281 47.988281 z M 28 64.330078 C 27.45 64.330078 27 64.780078 27 65.330078 C 27 65.890078 27.45 66.330078 28 66.330078 C 28.55 66.330078 29 65.890078 29 65.330078 C 29 64.780078 28.55 64.330078 28 64.330078 z M 28 67.669922 C 27.45 67.669922 27 68.119922 27 68.669922 C 27 69.219922 27.45 69.669922 28 69.669922 C 28.55 69.669922 29 69.219922 29 68.669922 C 29 68.119922 28.55 67.669922 28 67.669922 z M 28.09375 71.005859 C 27.800781 70.976797 27.499063 71.079062 27.289062 71.289062 L 27.169922 71.439453 C 27.129922 71.499453 27.100078 71.559141 27.080078 71.619141 C 27.050078 71.679141 27.029531 71.740781 27.019531 71.800781 C 27.009531 71.870781 27 71.93 27 72 C 27 72.13 27.030078 72.260859 27.080078 72.380859 C 27.130078 72.500859 27.199063 72.610938 27.289062 72.710938 C 27.479062 72.890937 27.74 73 28 73 C 28.13 73 28.260859 72.969922 28.380859 72.919922 C 28.500859 72.869922 28.610937 72.800938 28.710938 72.710938 C 28.800938 72.610937 28.869922 72.500859 28.919922 72.380859 C 28.969922 72.260859 29 72.13 29 72 C 29 71.93 28.990469 71.870781 28.980469 71.800781 C 28.970469 71.740781 28.949922 71.679141 28.919922 71.619141 C 28.899922 71.559141 28.870078 71.499453 28.830078 71.439453 L 28.710938 71.289062 C 28.610938 71.199063 28.500859 71.130078 28.380859 71.080078 C 28.288359 71.040078 28.191406 71.015547 28.09375 71.005859 z"/></svg>
          </div>
          <div class="dialog-text">
          <p>Hehe, something tells me that you are talking about me and this cool chat!</p>
          </div>
        </div>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>Yeah... now let me talk a bit more about the website</p>
          </div>
        </div>
<div class="paragraph">
<p>My website is entirely statically generated, I&#8217;m specifically using Jekyll which
is a very well known static site generator. It is served through GitHub Pages
and I use Cloudflare to cache and route traffic to the GitHub page.</p>
</div>
<div class="paragraph">
<p>At the time I decided to go for Jeyll because I wanted to learn its internals
and because it seemed that it offered a lot of flexibility for technical blogs
like mine. Jekyll has a huge community and there are a lot of useful plugins to
integrate in the framework, one of my favorite is the AsciiDoc plugin.</p>
</div>
<div class="paragraph">
<p>For those of you that don&#8217;t know what <a href="https://asciidoc.org">AsciiDoc</a>:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>AsciiDoc is a plain text markup language for writing technical content. It&#8217;s
packed with semantic elements and equipped with features to modularize and reuse
content. AsciiDoc content can be composed using a text editor, managed in a
version control system, and published to multiple output formats.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>As you might guess, I am writing all my articles using AsciiDoc because it gives
me even more flexibility on top of what Jekyll already offers. If you want to
use AsciiDoc too you need to declare the plugin in the <code>_config.yml</code> of your
root directory</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml"><span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">jekyll-asciidoc</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Let&#8217;s see if Jekyll really is as flexible as I initially thought.</p>
</div>
<div class="paragraph">
<p>To create the chat section above I need to find a way to make Jekyll generate
HTML code from a specific syntax, there is really no other way around it in this
scenario because exploiting generated HTML classes and CSS is not really
feasible here, at least for me.  Since I&#8217;m going to use these chat-like sections
a lot in the future, I would like to end up with a construct that is very
similar to common AsciiDoc syntax, to write the professor&#8217;s chat above I would
need to write something like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">[chat, professor]
--
Hehe, something tells me that you are talking about me and this cool chat!
--</code></pre>
</div>
</div>
<div class="paragraph">
<p>For those of you that are familiar with AsciiDoc, this snippet might be
familiar. It&#8217;s an <a href="https://docs.asciidoctor.org/asciidoc/latest/blocks/">AsciiDoc
Block</a>. The above snippet would be the ideal final result, but let&#8217;s go ahead
and see what Jekyll offers out-of-the-box first.</p>
</div>
<div class="paragraph">
<p>Jekyll has a special feature that enables you to create custom components called
<a href="https://jekyllrb.com/docs/includes/">includes</a> which could be written in HTML and
you call/include them directly in your posts. To use this feature you just need
to</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Declare your HTML component</p>
</li>
<li>
<p>Include the component in your post with a special syntax</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Every custom component that you whish to include in your post must live under
the <code>_includes</code> directory in your root Jekyll folder. I&#8217;m going to call mine
<code>chat.html</code> and it contains this HTML snippet</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dialog {{ include.character }}"</span> <span class="na">title=</span><span class="s">"{{ include.character }}"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dialog-head"</span><span class="nt">&gt;</span>
        {% include character.svg %}
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dialog-text"</span><span class="nt">&gt;</span>
        {{ include.text | markdownify }}
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre>
</div>
</div>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>Before we continue, see those <code>{{ include ... }}</code> and <code>{% include ... %}</code>? That's <a href="https://shopify.github.io/liquid/">Liquid templating</a> syntax. With Jekyll you can make use of that pretty much everywhere in the project. For the moment, just consider each element in those bracket as a variable.</p>
          </div>
        </div>
<div class="paragraph">
<p>These components are HTML files that can contain whatever you&#8217;d like them to
contain.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dialog {{ include.character }}"</span> <span class="na">title=</span><span class="s">"{{ include.character | capitalize }}"</span><span class="nt">&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This snippet is creating a <code>&lt;div&gt;</code> and also injecting <code>{{ include.character }}</code>
as its class, along with the title <code>{{ include.character }}</code></p>
</div>
        <div class="dialog professor" title="Professor">
          <div class="dialog-head">
          <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 80 80" width="240px" height="240px"><path d="M 22.912109 9 C 19.960756 9 16.358303 9.7221658 13.375 11.421875 C 10.391697 13.121584 8 15.945797 8 19.863281 C 8 23.912396 10.891498 29.481134 13.701172 34.283203 C 16.296271 38.718537 18.669822 42.066616 19.050781 42.601562 C 17.846834 43.88996 17.980826 45.617638 18.001953 46.048828 C 18.091373 47.889143 19.090293 49.025828 20.119141 50.009766 C 21.147988 50.993703 22.29396 52.003168 23.417969 54.146484 C 23.539513 54.378162 24.004424 55.269066 24.628906 56.189453 C 25.24048 57.090816 25.918145 58.062135 27 58.542969 L 27 62 A 1.0001 1.0001 0 1 0 29 62 L 29 58.896484 C 29.354145 58.891575 29.868383 58.864096 30.429688 58.5625 C 31.787375 57.836032 31.951153 56.396403 31.988281 56.148438 A 1.0001 1.0001 0 1 0 30.011719 55.851562 C 29.992849 55.977598 29.808687 56.625296 29.484375 56.798828 A 1.0001 1.0001 0 0 0 29.484375 56.800781 C 29.32398 56.886961 29.109495 56.908203 28.824219 56.908203 C 28.42168 56.908203 28.114506 56.845583 27.839844 56.730469 A 1.0001 1.0001 0 0 0 27.837891 56.730469 C 27.590274 56.626904 26.829471 55.871519 26.283203 55.066406 C 25.736935 54.261294 25.312909 53.452119 25.189453 53.216797 C 23.919462 50.795113 22.489106 49.508516 21.501953 48.564453 C 20.5148 47.62039 20.058624 47.197857 19.998047 45.951172 C 19.976167 45.504675 19.999847 44.424134 20.576172 43.884766 C 21.028522 43.465344 21.714425 43.416172 22.232422 43.408203 C 23.766212 43.383873 24.938922 44.373548 25.3125 44.726562 A 1.0002743 1.0002743 0 1 0 26.6875 43.273438 C 26.275119 42.883757 25.089926 41.848234 23.351562 41.519531 C 23.684054 41.310892 24.051927 41.094628 24.453125 40.890625 C 25.797547 40.207705 29.03107 39.122361 33.191406 38.230469 C 33.362903 39.669244 33.848762 40.995803 34.662109 41.990234 C 35.637853 43.183182 36.971947 44 38.431641 44 L 47 44 L 47 43.970703 C 47.165836 43.983009 47.331031 44 47.5 44 C 51.713438 44 55 40.110516 55 35.5 C 55 35.333552 54.986972 35.170279 54.978516 35.005859 C 55.073803 35.01009 56.315831 35.06789 58.087891 35.404297 C 59.928007 35.753621 62.199459 36.410722 63.869141 37.503906 C 65.629152 38.655646 66.920293 40.814446 67.544922 42.654297 C 67.845362 43.539246 67.971865 44.326947 67.982422 44.830078 C 67.8245 44.776948 67.775568 44.787958 67.476562 44.662109 C 66.877167 44.409819 66.00089 44.047905 64.669922 43.699219 C 63.396201 43.366066 62.05944 43.286417 60.980469 43.095703 C 59.901498 42.904989 59.211917 42.607238 58.945312 42.208984 C 58.739458 41.900705 58.727505 41.54692 58.730469 41.353516 L 58.730469 41.351562 C 58.747339 40.563466 59.456845 39.915621 59.625 39.78125 A 1.0004882 1.0004882 0 1 0 58.375 38.21875 C 58.105295 38.434268 56.766737 39.493484 56.730469 41.3125 A 1.0001 1.0001 0 0 0 56.730469 41.316406 C 56.729579 41.371576 56.669939 42.401916 57.283203 43.320312 A 1.0001 1.0001 0 0 0 57.283203 43.322266 C 58.065599 44.491012 59.390783 44.844917 60.632812 45.064453 C 61.206024 45.165771 61.701344 45.250974 62.261719 45.326172 A 1.0001 1.0001 0 0 0 62.365234 45.669922 C 62.365234 45.669922 64.86532 50.149397 70.380859 52.326172 C 70.066178 52.387382 69.842456 52.467172 69.421875 52.509766 C 67.775834 52.676464 65.347141 52.681641 61.869141 52.681641 C 60.410926 52.681641 59.025939 52.816151 57.824219 53.234375 C 56.622499 53.652599 55.548945 54.41984 55.070312 55.630859 A 1.0001 1.0001 0 1 0 56.929688 56.367188 C 57.147056 55.817206 57.616939 55.425526 58.480469 55.125 C 59.343999 54.824474 60.544355 54.681641 61.869141 54.681641 C 62.686115 54.681641 63.272154 54.67395 63.980469 54.671875 C 63.991735 54.744254 64 54.705608 64 55 C 64 55.437053 63.877671 55.664997 63.5625 55.982422 C 63.247329 56.299847 62.713826 56.63574 62.078125 56.990234 C 60.806723 57.699222 59.073341 58.493869 58.189453 60.285156 C 56.857013 62.98452 55.733424 64.124354 53.070312 65.472656 C 51.996454 66.016788 51.078649 66.994555 50.269531 68.115234 C 49.460414 69.235914 48.788791 70.501858 48.398438 71.6875 A 1.0001 1.0001 0 1 0 50.296875 72.3125 C 50.602522 71.384142 51.198696 70.24818 51.892578 69.287109 C 52.58646 68.326039 53.408468 67.542727 53.974609 67.255859 C 56.877498 65.786161 58.534815 64.106558 59.984375 61.169922 C 60.491487 60.142209 61.715387 59.48209 63.052734 58.736328 C 63.721408 58.363447 64.404296 57.972872 64.980469 57.392578 C 65.556642 56.812284 66 55.971947 66 55 C 66 54.863078 65.984562 54.780633 65.980469 54.662109 C 67.402198 54.642097 68.628908 54.600673 69.623047 54.5 C 71.455256 54.314448 72.78119 53.916388 73.710938 52.974609 A 1.0001 1.0001 0 0 0 73.199219 51.291016 C 68.046363 50.247259 65.904396 47.324169 65.021484 45.927734 C 65.635572 46.129085 66.311463 46.339874 66.701172 46.503906 C 67.290277 46.751872 67.803666 47 68.490234 47 C 69.069103 47 69.600788 46.524089 69.783203 46.121094 C 69.965618 45.718098 70 45.334232 70 44.916016 C 70 44.079583 69.804185 43.091793 69.4375 42.011719 C 68.93179 40.522147 68.087632 38.874396 66.859375 37.494141 C 67.586499 36.16648 68 34.528283 68 32.751953 C 68 30.707785 67.458226 28.840877 66.513672 27.423828 C 65.569118 26.00678 64.148 25 62.5 25 C 62.198677 25 61.907673 25.043753 61.623047 25.107422 C 60.608562 23.557292 58.772228 22.865658 57.222656 22.474609 C 55.724809 22.096614 54.696278 22.068044 54.404297 22.054688 C 53.369258 20.624763 51.713906 19.85094 50.222656 19.474609 C 48.853601 19.129115 48.072381 19.115957 47.646484 19.091797 C 46.698895 17.029339 44.859694 15.934026 43.265625 15.457031 C 41.714286 14.992823 40.640372 15.046519 40.339844 15.052734 C 40.200011 14.970291 37.831103 13.568401 34.46875 12.085938 C 31.009066 10.56056 26.67809 9 22.912109 9 z M 22.912109 11 C 26.103129 11 30.317543 12.43944 33.662109 13.914062 C 36.591489 15.205629 38.559962 16.332428 39.078125 16.632812 C 39.031274 16.749234 39 16.874603 39 17 C 39 17.26 39.109063 17.520937 39.289062 17.710938 L 39.439453 17.830078 C 39.499453 17.870078 39.559141 17.899922 39.619141 17.919922 C 39.679141 17.949922 39.740781 17.970469 39.800781 17.980469 C 39.870781 17.990469 39.94 18 40 18 C 40.26 18 40.520938 17.890937 40.710938 17.710938 C 40.879411 17.533105 40.977202 17.29191 40.990234 17.048828 C 41.462183 17.094999 42.05333 17.182117 42.691406 17.373047 C 44.090367 17.791659 45.481694 18.583147 46.050781 20.3125 A 1.0001 1.0001 0 0 0 46.136719 20.503906 C 46.115766 20.542254 46.092861 20.580793 46.080078 20.619141 C 46.050078 20.679141 46.029531 20.740547 46.019531 20.810547 C 46.009531 20.870547 46 20.94 46 21 C 46 21.26 46.109063 21.520937 46.289062 21.710938 C 46.479062 21.890938 46.74 22 47 22 C 47.13 22 47.260859 21.979922 47.380859 21.919922 C 47.510859 21.869922 47.620937 21.800937 47.710938 21.710938 C 47.86877 21.544337 47.957243 21.320799 47.980469 21.09375 C 48.470812 21.153682 49.078329 21.246548 49.734375 21.412109 C 51.191603 21.779855 52.640369 22.505079 53.103516 23.443359 A 1.0001 1.0001 0 0 0 53.966797 24 C 53.966797 24 55.277147 24.04436 56.734375 24.412109 C 57.726571 24.6625 58.706905 25.080934 59.382812 25.617188 C 58.824296 25.86258 58.539744 25.98812 57.689453 26.361328 C 56.959362 26.681778 56.226486 27.003639 55.669922 27.248047 C 55.113358 27.492455 54.829216 27.614987 54.699219 27.673828 L 54.695312 27.675781 L 54.691406 27.677734 C 53.992541 28.001013 53.204998 28.546857 52.652344 29.335938 C 51.318755 27.899257 49.518306 27 47.5 27 C 46.088192 27 44.784831 27.445042 43.669922 28.199219 L 43.619141 28.074219 C 43.619141 28.074219 41.839903 28.806549 40.052734 29.541016 C 39.15915 29.908249 38.263012 30.277439 37.587891 30.554688 C 37.25033 30.69331 36.967179 30.808775 36.767578 30.890625 C 36.667778 30.931555 36.589701 30.964028 36.535156 30.986328 C 36.507886 30.997478 36.486666 31.006019 36.472656 31.011719 L 36.46875 31.013672 C 34.671404 31.696821 33.47822 33.590501 33.173828 36.177734 C 28.67056 37.106859 25.2554 38.241503 23.546875 39.109375 C 21.798376 39.998459 20.656347 40.983978 20.472656 41.144531 C 19.868962 40.289449 17.808667 37.342736 15.427734 33.273438 C 12.672408 28.564256 10 22.859167 10 19.863281 C 10 16.735766 11.783287 14.629244 14.365234 13.158203 C 16.947182 11.687162 20.298462 11 22.912109 11 z M 19 16 A 2 2 0 0 0 19 20 A 2 2 0 0 0 19 16 z M 35.697266 16.384766 C 35.567734 16.369922 35.433281 16.379922 35.300781 16.419922 C 34.770781 16.579922 34.470859 17.139922 34.630859 17.669922 C 34.760859 18.099922 35.159844 18.380859 35.589844 18.380859 C 35.679844 18.380859 35.779141 18.369844 35.869141 18.339844 C 36.399141 18.179844 36.700781 17.619609 36.550781 17.099609 C 36.430781 16.702109 36.085859 16.429297 35.697266 16.384766 z M 31.787109 18.501953 C 31.532109 18.481953 31.270547 18.560234 31.060547 18.740234 C 30.640547 19.100234 30.589219 19.740156 30.949219 20.160156 C 31.149219 20.390156 31.430937 20.5 31.710938 20.5 C 31.940937 20.5 32.169375 20.419766 32.359375 20.259766 C 32.779375 19.899766 32.830703 19.269609 32.470703 18.849609 C 32.290703 18.639609 32.042109 18.521953 31.787109 18.501953 z M 43.460938 20.029297 C 42.900937 20.079297 42.489297 20.549609 42.529297 21.099609 C 42.569297 21.629609 42.999297 22.029297 43.529297 22.029297 L 43.599609 22.029297 C 44.149609 21.989297 44.559531 21.510938 44.519531 20.960938 C 44.479531 20.410937 44.010937 19.999297 43.460938 20.029297 z M 40.207031 20.570312 C 40.0775 20.557344 39.943047 20.569375 39.810547 20.609375 C 39.280547 20.779375 38.990391 21.339375 39.150391 21.859375 C 39.280391 22.289375 39.679375 22.570312 40.109375 22.570312 C 40.199375 22.570312 40.300391 22.549531 40.400391 22.519531 C 40.930391 22.359531 41.220547 21.799531 41.060547 21.269531 C 40.940547 20.872031 40.595625 20.609219 40.207031 20.570312 z M 28.90625 22.005859 C 28.808594 22.015547 28.711641 22.040078 28.619141 22.080078 C 28.499141 22.130078 28.389063 22.199063 28.289062 22.289062 C 28.109062 22.479062 28 22.74 28 23 C 28 23.13 28.030078 23.260859 28.080078 23.380859 C 28.130078 23.510859 28.199063 23.610937 28.289062 23.710938 C 28.389062 23.800938 28.499141 23.869922 28.619141 23.919922 C 28.739141 23.969922 28.87 24 29 24 C 29.26 24 29.520938 23.890938 29.710938 23.710938 C 29.800938 23.610938 29.869922 23.510859 29.919922 23.380859 C 29.979922 23.260859 30 23.13 30 23 C 30 22.74 29.890937 22.479063 29.710938 22.289062 C 29.500937 22.079062 29.199219 21.976797 28.90625 22.005859 z M 37.169922 22.267578 C 36.914922 22.252578 36.654219 22.334531 36.449219 22.519531 C 36.039219 22.889531 35.999141 23.519453 36.369141 23.939453 C 36.569141 24.159453 36.839141 24.269531 37.119141 24.269531 C 37.349141 24.269531 37.589297 24.179766 37.779297 24.009766 C 38.189297 23.639766 38.229375 23.009609 37.859375 22.599609 C 37.674375 22.394609 37.424922 22.282578 37.169922 22.267578 z M 18.5 24 A 1.5 1.5 0 0 0 18.5 27 A 1.5 1.5 0 0 0 18.5 24 z M 34.800781 25.019531 C 34.740781 25.029531 34.679141 25.050078 34.619141 25.080078 C 34.559141 25.100078 34.499453 25.129922 34.439453 25.169922 C 34.389453 25.199922 34.339062 25.249063 34.289062 25.289062 C 34.109062 25.479062 34 25.74 34 26 C 34 26.26 34.109063 26.520937 34.289062 26.710938 C 34.339063 26.750938 34.389453 26.800078 34.439453 26.830078 C 34.499453 26.870078 34.559141 26.899922 34.619141 26.919922 C 34.679141 26.949922 34.740781 26.970469 34.800781 26.980469 C 34.870781 26.990469 34.94 27 35 27 C 35.06 27 35.129219 26.990469 35.199219 26.980469 C 35.259219 26.970469 35.320859 26.949922 35.380859 26.919922 C 35.440859 26.899922 35.500547 26.870078 35.560547 26.830078 C 35.610547 26.800078 35.660938 26.750937 35.710938 26.710938 C 35.750938 26.660938 35.800078 26.610547 35.830078 26.560547 C 35.870078 26.500547 35.899922 26.440859 35.919922 26.380859 C 35.949922 26.320859 35.970469 26.259219 35.980469 26.199219 C 35.990469 26.129219 36 26.06 36 26 C 36 25.94 35.990469 25.870781 35.980469 25.800781 C 35.970469 25.740781 35.949922 25.679141 35.919922 25.619141 C 35.899922 25.559141 35.870078 25.499453 35.830078 25.439453 C 35.800078 25.389453 35.750937 25.339063 35.710938 25.289062 C 35.660937 25.249062 35.610547 25.199922 35.560547 25.169922 C 35.500547 25.129922 35.440859 25.100078 35.380859 25.080078 C 35.320859 25.050078 35.259219 25.029531 35.199219 25.019531 C 35.069219 24.989531 34.930781 24.989531 34.800781 25.019531 z M 62.5 27 C 63.337 27 64.165413 27.504798 64.849609 28.53125 C 65.533805 29.557702 66 31.068121 66 32.751953 C 66 34.00733 65.737519 35.160765 65.320312 36.09375 C 65.200872 36.006694 65.089403 35.911589 64.964844 35.830078 C 63.115425 34.619215 60.926832 33.96549 59.054688 33.570312 C 59.029888 33.300341 59 33.032794 59 32.751953 C 59 31.068121 59.466195 29.557702 60.150391 28.53125 C 60.834587 27.504798 61.663 27 62.5 27 z M 57.916016 28.445312 C 57.328962 29.690383 57 31.166369 57 32.751953 C 57 32.906001 57.009389 33.055718 57.015625 33.207031 C 55.772365 33.037808 54.913216 33 54.912109 33 A 1.0001 1.0001 0 0 0 54.673828 33.027344 C 54.498232 32.374737 54.249591 31.758461 53.947266 31.179688 L 53.982422 31.185547 C 54.0947 30.58994 54.973824 29.750039 55.53125 29.492188 C 55.45871 29.525108 55.922938 29.320384 56.474609 29.078125 C 56.871683 28.903755 57.404225 28.670009 57.916016 28.445312 z M 47.5 29 C 50.466269 29 53 31.826245 53 35.5 C 53 39.173755 50.466269 42 47.5 42 C 44.533731 42 42 39.173755 42 35.5 C 42 31.826245 44.533731 29 47.5 29 z M 40.976562 31.322266 C 40.355891 32.56516 40 33.991941 40 35.5 C 40 38.077287 41.028118 40.426794 42.669922 42 L 38.431641 42 C 37.756334 42 36.895938 41.562119 36.210938 40.724609 C 35.525937 39.8871 35.042969 38.697103 35.042969 37.390625 C 35.042969 34.679516 36.061342 33.310422 37.177734 32.884766 C 37.177734 32.884766 37.179688 32.882812 37.179688 32.882812 C 37.226627 32.865252 37.212823 32.868871 37.226562 32.863281 C 37.242672 32.856681 37.265109 32.849281 37.292969 32.837891 C 37.348679 32.815111 37.427234 32.781294 37.527344 32.740234 C 37.727564 32.658134 38.009936 32.542986 38.347656 32.404297 C 39.023097 32.126919 39.918835 31.757892 40.8125 31.390625 C 40.894854 31.35678 40.894409 31.356021 40.976562 31.322266 z M 52.027344 45.986328 A 1.0001 1.0001 0 0 0 51.001953 47.056641 C 51.12024 49.123838 50.810157 50.953649 50.085938 52.595703 A 1.0001 1.0001 0 0 0 50.083984 52.597656 C 49.747402 53.362036 49.483444 53.693798 49.085938 54.595703 C 48.224157 56.549649 47.86824 58.719838 48.001953 61.056641 A 1.0001 1.0001 0 1 0 49.998047 60.943359 C 49.87976 58.876162 50.189842 57.046351 50.914062 55.404297 A 1.0001 1.0001 0 0 0 50.916016 55.402344 C 51.249338 54.645539 51.513827 54.312598 51.914062 53.404297 C 52.775843 51.450351 53.13176 49.280162 52.998047 46.943359 A 1.0001 1.0001 0 0 0 52.027344 45.986328 z M 27.988281 47.988281 A 1.0001 1.0001 0 0 0 27.167969 49.554688 C 27.834713 50.554304 28.500713 51.554304 29.167969 52.554688 A 1.0001 1.0001 0 1 0 30.832031 51.445312 C 30.165287 50.445696 29.499287 49.445696 28.832031 48.445312 A 1.0001 1.0001 0 0 0 27.988281 47.988281 z M 28 64.330078 C 27.45 64.330078 27 64.780078 27 65.330078 C 27 65.890078 27.45 66.330078 28 66.330078 C 28.55 66.330078 29 65.890078 29 65.330078 C 29 64.780078 28.55 64.330078 28 64.330078 z M 28 67.669922 C 27.45 67.669922 27 68.119922 27 68.669922 C 27 69.219922 27.45 69.669922 28 69.669922 C 28.55 69.669922 29 69.219922 29 68.669922 C 29 68.119922 28.55 67.669922 28 67.669922 z M 28.09375 71.005859 C 27.800781 70.976797 27.499063 71.079062 27.289062 71.289062 L 27.169922 71.439453 C 27.129922 71.499453 27.100078 71.559141 27.080078 71.619141 C 27.050078 71.679141 27.029531 71.740781 27.019531 71.800781 C 27.009531 71.870781 27 71.93 27 72 C 27 72.13 27.030078 72.260859 27.080078 72.380859 C 27.130078 72.500859 27.199063 72.610938 27.289062 72.710938 C 27.479062 72.890937 27.74 73 28 73 C 28.13 73 28.260859 72.969922 28.380859 72.919922 C 28.500859 72.869922 28.610937 72.800938 28.710938 72.710938 C 28.800938 72.610937 28.869922 72.500859 28.919922 72.380859 C 28.969922 72.260859 29 72.13 29 72 C 29 71.93 28.990469 71.870781 28.980469 71.800781 C 28.970469 71.740781 28.949922 71.679141 28.919922 71.619141 C 28.899922 71.559141 28.870078 71.499453 28.830078 71.439453 L 28.710938 71.289062 C 28.610938 71.199063 28.500859 71.130078 28.380859 71.080078 C 28.288359 71.040078 28.191406 71.015547 28.09375 71.005859 z"/></svg>
          </div>
          <div class="dialog-text">
          <p>That looks intuitive, are those variable that you can pass to the component? If so, how?</p>
          </div>
        </div>
<div class="paragraph">
<p>Remember that each element enclosed in <code>{% %}</code> and <code>{{ }}</code> is a variable? You
can pass those vars from the post in which you&#8217;d like to insert this custom
component, this is how it would look like in the post</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="markdown">{% include chat.html character="matt" text="Hey there, here is some text in a chat!" %}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This is pretty straightforward, Jekyll is going to insert the HTML snippet in
the statically generated page and it will also populate the snippet with the
variables that you declared in the <code>include</code> construct.</p>
</div>
<div class="paragraph">
<p>This is the basic approach that you would go through to customize your Jekyll
website, what I did not tell you is that this is only going to work if you are
using the default Jekyll document language, which is Markdown. That&#8217;s unfortunate,
because I&#8217;ve transitioned every single post of my website to AsciiDoc just a
couple of months ago and I don&#8217;t plan to move back to Markdown just for this.</p>
</div>
        <div class="dialog professor" title="Professor">
          <div class="dialog-head">
          <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 80 80" width="240px" height="240px"><path d="M 22.912109 9 C 19.960756 9 16.358303 9.7221658 13.375 11.421875 C 10.391697 13.121584 8 15.945797 8 19.863281 C 8 23.912396 10.891498 29.481134 13.701172 34.283203 C 16.296271 38.718537 18.669822 42.066616 19.050781 42.601562 C 17.846834 43.88996 17.980826 45.617638 18.001953 46.048828 C 18.091373 47.889143 19.090293 49.025828 20.119141 50.009766 C 21.147988 50.993703 22.29396 52.003168 23.417969 54.146484 C 23.539513 54.378162 24.004424 55.269066 24.628906 56.189453 C 25.24048 57.090816 25.918145 58.062135 27 58.542969 L 27 62 A 1.0001 1.0001 0 1 0 29 62 L 29 58.896484 C 29.354145 58.891575 29.868383 58.864096 30.429688 58.5625 C 31.787375 57.836032 31.951153 56.396403 31.988281 56.148438 A 1.0001 1.0001 0 1 0 30.011719 55.851562 C 29.992849 55.977598 29.808687 56.625296 29.484375 56.798828 A 1.0001 1.0001 0 0 0 29.484375 56.800781 C 29.32398 56.886961 29.109495 56.908203 28.824219 56.908203 C 28.42168 56.908203 28.114506 56.845583 27.839844 56.730469 A 1.0001 1.0001 0 0 0 27.837891 56.730469 C 27.590274 56.626904 26.829471 55.871519 26.283203 55.066406 C 25.736935 54.261294 25.312909 53.452119 25.189453 53.216797 C 23.919462 50.795113 22.489106 49.508516 21.501953 48.564453 C 20.5148 47.62039 20.058624 47.197857 19.998047 45.951172 C 19.976167 45.504675 19.999847 44.424134 20.576172 43.884766 C 21.028522 43.465344 21.714425 43.416172 22.232422 43.408203 C 23.766212 43.383873 24.938922 44.373548 25.3125 44.726562 A 1.0002743 1.0002743 0 1 0 26.6875 43.273438 C 26.275119 42.883757 25.089926 41.848234 23.351562 41.519531 C 23.684054 41.310892 24.051927 41.094628 24.453125 40.890625 C 25.797547 40.207705 29.03107 39.122361 33.191406 38.230469 C 33.362903 39.669244 33.848762 40.995803 34.662109 41.990234 C 35.637853 43.183182 36.971947 44 38.431641 44 L 47 44 L 47 43.970703 C 47.165836 43.983009 47.331031 44 47.5 44 C 51.713438 44 55 40.110516 55 35.5 C 55 35.333552 54.986972 35.170279 54.978516 35.005859 C 55.073803 35.01009 56.315831 35.06789 58.087891 35.404297 C 59.928007 35.753621 62.199459 36.410722 63.869141 37.503906 C 65.629152 38.655646 66.920293 40.814446 67.544922 42.654297 C 67.845362 43.539246 67.971865 44.326947 67.982422 44.830078 C 67.8245 44.776948 67.775568 44.787958 67.476562 44.662109 C 66.877167 44.409819 66.00089 44.047905 64.669922 43.699219 C 63.396201 43.366066 62.05944 43.286417 60.980469 43.095703 C 59.901498 42.904989 59.211917 42.607238 58.945312 42.208984 C 58.739458 41.900705 58.727505 41.54692 58.730469 41.353516 L 58.730469 41.351562 C 58.747339 40.563466 59.456845 39.915621 59.625 39.78125 A 1.0004882 1.0004882 0 1 0 58.375 38.21875 C 58.105295 38.434268 56.766737 39.493484 56.730469 41.3125 A 1.0001 1.0001 0 0 0 56.730469 41.316406 C 56.729579 41.371576 56.669939 42.401916 57.283203 43.320312 A 1.0001 1.0001 0 0 0 57.283203 43.322266 C 58.065599 44.491012 59.390783 44.844917 60.632812 45.064453 C 61.206024 45.165771 61.701344 45.250974 62.261719 45.326172 A 1.0001 1.0001 0 0 0 62.365234 45.669922 C 62.365234 45.669922 64.86532 50.149397 70.380859 52.326172 C 70.066178 52.387382 69.842456 52.467172 69.421875 52.509766 C 67.775834 52.676464 65.347141 52.681641 61.869141 52.681641 C 60.410926 52.681641 59.025939 52.816151 57.824219 53.234375 C 56.622499 53.652599 55.548945 54.41984 55.070312 55.630859 A 1.0001 1.0001 0 1 0 56.929688 56.367188 C 57.147056 55.817206 57.616939 55.425526 58.480469 55.125 C 59.343999 54.824474 60.544355 54.681641 61.869141 54.681641 C 62.686115 54.681641 63.272154 54.67395 63.980469 54.671875 C 63.991735 54.744254 64 54.705608 64 55 C 64 55.437053 63.877671 55.664997 63.5625 55.982422 C 63.247329 56.299847 62.713826 56.63574 62.078125 56.990234 C 60.806723 57.699222 59.073341 58.493869 58.189453 60.285156 C 56.857013 62.98452 55.733424 64.124354 53.070312 65.472656 C 51.996454 66.016788 51.078649 66.994555 50.269531 68.115234 C 49.460414 69.235914 48.788791 70.501858 48.398438 71.6875 A 1.0001 1.0001 0 1 0 50.296875 72.3125 C 50.602522 71.384142 51.198696 70.24818 51.892578 69.287109 C 52.58646 68.326039 53.408468 67.542727 53.974609 67.255859 C 56.877498 65.786161 58.534815 64.106558 59.984375 61.169922 C 60.491487 60.142209 61.715387 59.48209 63.052734 58.736328 C 63.721408 58.363447 64.404296 57.972872 64.980469 57.392578 C 65.556642 56.812284 66 55.971947 66 55 C 66 54.863078 65.984562 54.780633 65.980469 54.662109 C 67.402198 54.642097 68.628908 54.600673 69.623047 54.5 C 71.455256 54.314448 72.78119 53.916388 73.710938 52.974609 A 1.0001 1.0001 0 0 0 73.199219 51.291016 C 68.046363 50.247259 65.904396 47.324169 65.021484 45.927734 C 65.635572 46.129085 66.311463 46.339874 66.701172 46.503906 C 67.290277 46.751872 67.803666 47 68.490234 47 C 69.069103 47 69.600788 46.524089 69.783203 46.121094 C 69.965618 45.718098 70 45.334232 70 44.916016 C 70 44.079583 69.804185 43.091793 69.4375 42.011719 C 68.93179 40.522147 68.087632 38.874396 66.859375 37.494141 C 67.586499 36.16648 68 34.528283 68 32.751953 C 68 30.707785 67.458226 28.840877 66.513672 27.423828 C 65.569118 26.00678 64.148 25 62.5 25 C 62.198677 25 61.907673 25.043753 61.623047 25.107422 C 60.608562 23.557292 58.772228 22.865658 57.222656 22.474609 C 55.724809 22.096614 54.696278 22.068044 54.404297 22.054688 C 53.369258 20.624763 51.713906 19.85094 50.222656 19.474609 C 48.853601 19.129115 48.072381 19.115957 47.646484 19.091797 C 46.698895 17.029339 44.859694 15.934026 43.265625 15.457031 C 41.714286 14.992823 40.640372 15.046519 40.339844 15.052734 C 40.200011 14.970291 37.831103 13.568401 34.46875 12.085938 C 31.009066 10.56056 26.67809 9 22.912109 9 z M 22.912109 11 C 26.103129 11 30.317543 12.43944 33.662109 13.914062 C 36.591489 15.205629 38.559962 16.332428 39.078125 16.632812 C 39.031274 16.749234 39 16.874603 39 17 C 39 17.26 39.109063 17.520937 39.289062 17.710938 L 39.439453 17.830078 C 39.499453 17.870078 39.559141 17.899922 39.619141 17.919922 C 39.679141 17.949922 39.740781 17.970469 39.800781 17.980469 C 39.870781 17.990469 39.94 18 40 18 C 40.26 18 40.520938 17.890937 40.710938 17.710938 C 40.879411 17.533105 40.977202 17.29191 40.990234 17.048828 C 41.462183 17.094999 42.05333 17.182117 42.691406 17.373047 C 44.090367 17.791659 45.481694 18.583147 46.050781 20.3125 A 1.0001 1.0001 0 0 0 46.136719 20.503906 C 46.115766 20.542254 46.092861 20.580793 46.080078 20.619141 C 46.050078 20.679141 46.029531 20.740547 46.019531 20.810547 C 46.009531 20.870547 46 20.94 46 21 C 46 21.26 46.109063 21.520937 46.289062 21.710938 C 46.479062 21.890938 46.74 22 47 22 C 47.13 22 47.260859 21.979922 47.380859 21.919922 C 47.510859 21.869922 47.620937 21.800937 47.710938 21.710938 C 47.86877 21.544337 47.957243 21.320799 47.980469 21.09375 C 48.470812 21.153682 49.078329 21.246548 49.734375 21.412109 C 51.191603 21.779855 52.640369 22.505079 53.103516 23.443359 A 1.0001 1.0001 0 0 0 53.966797 24 C 53.966797 24 55.277147 24.04436 56.734375 24.412109 C 57.726571 24.6625 58.706905 25.080934 59.382812 25.617188 C 58.824296 25.86258 58.539744 25.98812 57.689453 26.361328 C 56.959362 26.681778 56.226486 27.003639 55.669922 27.248047 C 55.113358 27.492455 54.829216 27.614987 54.699219 27.673828 L 54.695312 27.675781 L 54.691406 27.677734 C 53.992541 28.001013 53.204998 28.546857 52.652344 29.335938 C 51.318755 27.899257 49.518306 27 47.5 27 C 46.088192 27 44.784831 27.445042 43.669922 28.199219 L 43.619141 28.074219 C 43.619141 28.074219 41.839903 28.806549 40.052734 29.541016 C 39.15915 29.908249 38.263012 30.277439 37.587891 30.554688 C 37.25033 30.69331 36.967179 30.808775 36.767578 30.890625 C 36.667778 30.931555 36.589701 30.964028 36.535156 30.986328 C 36.507886 30.997478 36.486666 31.006019 36.472656 31.011719 L 36.46875 31.013672 C 34.671404 31.696821 33.47822 33.590501 33.173828 36.177734 C 28.67056 37.106859 25.2554 38.241503 23.546875 39.109375 C 21.798376 39.998459 20.656347 40.983978 20.472656 41.144531 C 19.868962 40.289449 17.808667 37.342736 15.427734 33.273438 C 12.672408 28.564256 10 22.859167 10 19.863281 C 10 16.735766 11.783287 14.629244 14.365234 13.158203 C 16.947182 11.687162 20.298462 11 22.912109 11 z M 19 16 A 2 2 0 0 0 19 20 A 2 2 0 0 0 19 16 z M 35.697266 16.384766 C 35.567734 16.369922 35.433281 16.379922 35.300781 16.419922 C 34.770781 16.579922 34.470859 17.139922 34.630859 17.669922 C 34.760859 18.099922 35.159844 18.380859 35.589844 18.380859 C 35.679844 18.380859 35.779141 18.369844 35.869141 18.339844 C 36.399141 18.179844 36.700781 17.619609 36.550781 17.099609 C 36.430781 16.702109 36.085859 16.429297 35.697266 16.384766 z M 31.787109 18.501953 C 31.532109 18.481953 31.270547 18.560234 31.060547 18.740234 C 30.640547 19.100234 30.589219 19.740156 30.949219 20.160156 C 31.149219 20.390156 31.430937 20.5 31.710938 20.5 C 31.940937 20.5 32.169375 20.419766 32.359375 20.259766 C 32.779375 19.899766 32.830703 19.269609 32.470703 18.849609 C 32.290703 18.639609 32.042109 18.521953 31.787109 18.501953 z M 43.460938 20.029297 C 42.900937 20.079297 42.489297 20.549609 42.529297 21.099609 C 42.569297 21.629609 42.999297 22.029297 43.529297 22.029297 L 43.599609 22.029297 C 44.149609 21.989297 44.559531 21.510938 44.519531 20.960938 C 44.479531 20.410937 44.010937 19.999297 43.460938 20.029297 z M 40.207031 20.570312 C 40.0775 20.557344 39.943047 20.569375 39.810547 20.609375 C 39.280547 20.779375 38.990391 21.339375 39.150391 21.859375 C 39.280391 22.289375 39.679375 22.570312 40.109375 22.570312 C 40.199375 22.570312 40.300391 22.549531 40.400391 22.519531 C 40.930391 22.359531 41.220547 21.799531 41.060547 21.269531 C 40.940547 20.872031 40.595625 20.609219 40.207031 20.570312 z M 28.90625 22.005859 C 28.808594 22.015547 28.711641 22.040078 28.619141 22.080078 C 28.499141 22.130078 28.389063 22.199063 28.289062 22.289062 C 28.109062 22.479062 28 22.74 28 23 C 28 23.13 28.030078 23.260859 28.080078 23.380859 C 28.130078 23.510859 28.199063 23.610937 28.289062 23.710938 C 28.389062 23.800938 28.499141 23.869922 28.619141 23.919922 C 28.739141 23.969922 28.87 24 29 24 C 29.26 24 29.520938 23.890938 29.710938 23.710938 C 29.800938 23.610938 29.869922 23.510859 29.919922 23.380859 C 29.979922 23.260859 30 23.13 30 23 C 30 22.74 29.890937 22.479063 29.710938 22.289062 C 29.500937 22.079062 29.199219 21.976797 28.90625 22.005859 z M 37.169922 22.267578 C 36.914922 22.252578 36.654219 22.334531 36.449219 22.519531 C 36.039219 22.889531 35.999141 23.519453 36.369141 23.939453 C 36.569141 24.159453 36.839141 24.269531 37.119141 24.269531 C 37.349141 24.269531 37.589297 24.179766 37.779297 24.009766 C 38.189297 23.639766 38.229375 23.009609 37.859375 22.599609 C 37.674375 22.394609 37.424922 22.282578 37.169922 22.267578 z M 18.5 24 A 1.5 1.5 0 0 0 18.5 27 A 1.5 1.5 0 0 0 18.5 24 z M 34.800781 25.019531 C 34.740781 25.029531 34.679141 25.050078 34.619141 25.080078 C 34.559141 25.100078 34.499453 25.129922 34.439453 25.169922 C 34.389453 25.199922 34.339062 25.249063 34.289062 25.289062 C 34.109062 25.479062 34 25.74 34 26 C 34 26.26 34.109063 26.520937 34.289062 26.710938 C 34.339063 26.750938 34.389453 26.800078 34.439453 26.830078 C 34.499453 26.870078 34.559141 26.899922 34.619141 26.919922 C 34.679141 26.949922 34.740781 26.970469 34.800781 26.980469 C 34.870781 26.990469 34.94 27 35 27 C 35.06 27 35.129219 26.990469 35.199219 26.980469 C 35.259219 26.970469 35.320859 26.949922 35.380859 26.919922 C 35.440859 26.899922 35.500547 26.870078 35.560547 26.830078 C 35.610547 26.800078 35.660938 26.750937 35.710938 26.710938 C 35.750938 26.660938 35.800078 26.610547 35.830078 26.560547 C 35.870078 26.500547 35.899922 26.440859 35.919922 26.380859 C 35.949922 26.320859 35.970469 26.259219 35.980469 26.199219 C 35.990469 26.129219 36 26.06 36 26 C 36 25.94 35.990469 25.870781 35.980469 25.800781 C 35.970469 25.740781 35.949922 25.679141 35.919922 25.619141 C 35.899922 25.559141 35.870078 25.499453 35.830078 25.439453 C 35.800078 25.389453 35.750937 25.339063 35.710938 25.289062 C 35.660937 25.249062 35.610547 25.199922 35.560547 25.169922 C 35.500547 25.129922 35.440859 25.100078 35.380859 25.080078 C 35.320859 25.050078 35.259219 25.029531 35.199219 25.019531 C 35.069219 24.989531 34.930781 24.989531 34.800781 25.019531 z M 62.5 27 C 63.337 27 64.165413 27.504798 64.849609 28.53125 C 65.533805 29.557702 66 31.068121 66 32.751953 C 66 34.00733 65.737519 35.160765 65.320312 36.09375 C 65.200872 36.006694 65.089403 35.911589 64.964844 35.830078 C 63.115425 34.619215 60.926832 33.96549 59.054688 33.570312 C 59.029888 33.300341 59 33.032794 59 32.751953 C 59 31.068121 59.466195 29.557702 60.150391 28.53125 C 60.834587 27.504798 61.663 27 62.5 27 z M 57.916016 28.445312 C 57.328962 29.690383 57 31.166369 57 32.751953 C 57 32.906001 57.009389 33.055718 57.015625 33.207031 C 55.772365 33.037808 54.913216 33 54.912109 33 A 1.0001 1.0001 0 0 0 54.673828 33.027344 C 54.498232 32.374737 54.249591 31.758461 53.947266 31.179688 L 53.982422 31.185547 C 54.0947 30.58994 54.973824 29.750039 55.53125 29.492188 C 55.45871 29.525108 55.922938 29.320384 56.474609 29.078125 C 56.871683 28.903755 57.404225 28.670009 57.916016 28.445312 z M 47.5 29 C 50.466269 29 53 31.826245 53 35.5 C 53 39.173755 50.466269 42 47.5 42 C 44.533731 42 42 39.173755 42 35.5 C 42 31.826245 44.533731 29 47.5 29 z M 40.976562 31.322266 C 40.355891 32.56516 40 33.991941 40 35.5 C 40 38.077287 41.028118 40.426794 42.669922 42 L 38.431641 42 C 37.756334 42 36.895938 41.562119 36.210938 40.724609 C 35.525937 39.8871 35.042969 38.697103 35.042969 37.390625 C 35.042969 34.679516 36.061342 33.310422 37.177734 32.884766 C 37.177734 32.884766 37.179688 32.882812 37.179688 32.882812 C 37.226627 32.865252 37.212823 32.868871 37.226562 32.863281 C 37.242672 32.856681 37.265109 32.849281 37.292969 32.837891 C 37.348679 32.815111 37.427234 32.781294 37.527344 32.740234 C 37.727564 32.658134 38.009936 32.542986 38.347656 32.404297 C 39.023097 32.126919 39.918835 31.757892 40.8125 31.390625 C 40.894854 31.35678 40.894409 31.356021 40.976562 31.322266 z M 52.027344 45.986328 A 1.0001 1.0001 0 0 0 51.001953 47.056641 C 51.12024 49.123838 50.810157 50.953649 50.085938 52.595703 A 1.0001 1.0001 0 0 0 50.083984 52.597656 C 49.747402 53.362036 49.483444 53.693798 49.085938 54.595703 C 48.224157 56.549649 47.86824 58.719838 48.001953 61.056641 A 1.0001 1.0001 0 1 0 49.998047 60.943359 C 49.87976 58.876162 50.189842 57.046351 50.914062 55.404297 A 1.0001 1.0001 0 0 0 50.916016 55.402344 C 51.249338 54.645539 51.513827 54.312598 51.914062 53.404297 C 52.775843 51.450351 53.13176 49.280162 52.998047 46.943359 A 1.0001 1.0001 0 0 0 52.027344 45.986328 z M 27.988281 47.988281 A 1.0001 1.0001 0 0 0 27.167969 49.554688 C 27.834713 50.554304 28.500713 51.554304 29.167969 52.554688 A 1.0001 1.0001 0 1 0 30.832031 51.445312 C 30.165287 50.445696 29.499287 49.445696 28.832031 48.445312 A 1.0001 1.0001 0 0 0 27.988281 47.988281 z M 28 64.330078 C 27.45 64.330078 27 64.780078 27 65.330078 C 27 65.890078 27.45 66.330078 28 66.330078 C 28.55 66.330078 29 65.890078 29 65.330078 C 29 64.780078 28.55 64.330078 28 64.330078 z M 28 67.669922 C 27.45 67.669922 27 68.119922 27 68.669922 C 27 69.219922 27.45 69.669922 28 69.669922 C 28.55 69.669922 29 69.219922 29 68.669922 C 29 68.119922 28.55 67.669922 28 67.669922 z M 28.09375 71.005859 C 27.800781 70.976797 27.499063 71.079062 27.289062 71.289062 L 27.169922 71.439453 C 27.129922 71.499453 27.100078 71.559141 27.080078 71.619141 C 27.050078 71.679141 27.029531 71.740781 27.019531 71.800781 C 27.009531 71.870781 27 71.93 27 72 C 27 72.13 27.030078 72.260859 27.080078 72.380859 C 27.130078 72.500859 27.199063 72.610938 27.289062 72.710938 C 27.479062 72.890937 27.74 73 28 73 C 28.13 73 28.260859 72.969922 28.380859 72.919922 C 28.500859 72.869922 28.610937 72.800938 28.710938 72.710938 C 28.800938 72.610937 28.869922 72.500859 28.919922 72.380859 C 28.969922 72.260859 29 72.13 29 72 C 29 71.93 28.990469 71.870781 28.980469 71.800781 C 28.970469 71.740781 28.949922 71.679141 28.919922 71.619141 C 28.899922 71.559141 28.870078 71.499453 28.830078 71.439453 L 28.710938 71.289062 C 28.610938 71.199063 28.500859 71.130078 28.380859 71.080078 C 28.288359 71.040078 28.191406 71.015547 28.09375 71.005859 z"/></svg>
          </div>
          <div class="dialog-text">
          <p>What happens if we use the <code>include</code> syntax in AsciiDoc? Maybe we're lucky and it's going to work</p>
          </div>
        </div>
<div class="paragraph">
<p>AsciiDoc does not support Liquid syntax by default, so what&#8217;s going to happen is
that you&#8217;re going to find <code>{% include chat.html &#8230;&#8203; %}</code> verbatim in your post,
just like this</p>
</div>
<div class="paragraph">
<p>{% include chat.html character="matt" text="Hey there! We got a probelm here :(" %}</p>
</div>
<div class="paragraph">
<p>Not a great start, especially because there are not a lot of similar scenarios
out there surprisingly, at least I couldn&#8217;t find that much by first googling the
problem. My
<a href="https://stackoverflow.com/questions/75482246/how-can-i-render-html-using-liquid-in-asciidoc-in-jekyll">StackOverflow</a>
question didn&#8217;t receive any answers too, speak volumes since Jekyll and
AsciiDoc have a very big community.</p>
</div>
<div class="paragraph">
<p>I&#8217;m alone in this, let&#8217;s see if I can find something on GitHub.</p>
</div>
<div class="paragraph">
<p>The plugin that I&#8217;m using to generate HTML from AsciiDoc is
<a href="https://github.com/asciidoctor/jekyll-asciidoc">jekyll-asciidoc</a>, maybe we can
find something interesting in there. By making a project-wide search of the word
<code>liquid</code> I immediately get to this
<a href="https://github.com/asciidoctor/jekyll-asciidoc/blob/89b8f55f5312e4a0f1bca496bd9217d53d5b21dd/docs/modules/ROOT/pages/liquid.adoc">documentation
page</a> which is just what I am looking for, lucky me.</p>
</div>
<div class="paragraph">
<p>After reading the docs, it seems like all I need to do is enable Liquid
preprocessing by appending <code>:page-liquid:</code> at the top of my post. That is going
to parse and generate Liquid code before sending the result to the AsciiDoc
generator. Indeed, if we now add that tag at the top and reload the
page, we&#8217;re going to be presented with this</p>
</div>
<div class="paragraph">
<p>&lt;div class="dialog matt" title="matt"&gt; &lt;div class="dialog-head"&gt;
&lt;svg&gt;&#8230;&#8203;&#8230;&#8203;&lt;/svg&gt; &lt;/div&gt; &lt;div class="dialog-text"&gt;Hey there! Finally we made
it! This chat that you&#8217;re reading is the generated and injected component!
&lt;/div&gt; &lt;/div&gt;</p>
</div>
<div class="paragraph">
<p>Almost there, now Liquid preprocessing correctly generates my custom HTML
component, but it&#8217;s not really injected in the page source. That is because the
Liquid preprocessor only generates the content, but when everything is passed to
the AsciiDoc generator it is interpreted as content text. If we really want to
inject that HTML code in the static page, we need a way to tell the AsciiDoc
generator that. This is a common feature of the language luckily, AsciiDoc lets
you inject raw HTML code in the page, you just need to wrap it in a <code>++++</code>
block. The final syntax we reached is this</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">++++
{% include chat.html character="matt" text="Hey there! Finally we made it! This chat that you're reading is the generated and injected component!" %}
++++</code></pre>
</div>
</div>
<div class="paragraph">
<p>Let&#8217;s go through the entire generation process:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Liquid preprocessing</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">++++
&lt;div class="dialog matt" title="matt"&gt;
    &lt;div class="dialog-head"&gt;
        &lt;svg&gt;......&lt;/svg&gt;
    &lt;/div&gt;
    &lt;div class="dialog-text"&gt;
        Hey there! Finally we made it! This chat that you're reading is the generated and injected component!
    &lt;/div&gt;
&lt;/div&gt;
++++</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>AsciiDoc generation (and HTML injection)</p>
</li>
</ul>
</div>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>Hey there! Finally we made it! This chat that you're reading is the generated and injected component!</p>
          </div>
        </div>
<div class="paragraph">
<p>Ok, we made some progress, we are now able to use the include feature Jekyll
offers to render custom HTML. But we&#8217;re far from the initial AsciiDoc-like
syntax that I wanted to achieve. Can we do better?</p>
</div>
<div class="paragraph">
<p>The greates feature of AsciiDoc probably is its Extension API, which makes the
language extremely powerful and extensible.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>An extension is a library that enriches the AsciiDoc content either by
introducing new syntax or weaving additional features into the output.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>This is what we need! It&#8217;s also a feature supported by the <code>jekyll-asciidoc</code>
plugin. What we could do is create a new extension that recognizes the <code>[chat]</code>
block by directly declaring a custom block <code>Asciidoctor::Extension</code>.</p>
</div>
        <div class="dialog professor" title="Professor">
          <div class="dialog-head">
          <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 80 80" width="240px" height="240px"><path d="M 22.912109 9 C 19.960756 9 16.358303 9.7221658 13.375 11.421875 C 10.391697 13.121584 8 15.945797 8 19.863281 C 8 23.912396 10.891498 29.481134 13.701172 34.283203 C 16.296271 38.718537 18.669822 42.066616 19.050781 42.601562 C 17.846834 43.88996 17.980826 45.617638 18.001953 46.048828 C 18.091373 47.889143 19.090293 49.025828 20.119141 50.009766 C 21.147988 50.993703 22.29396 52.003168 23.417969 54.146484 C 23.539513 54.378162 24.004424 55.269066 24.628906 56.189453 C 25.24048 57.090816 25.918145 58.062135 27 58.542969 L 27 62 A 1.0001 1.0001 0 1 0 29 62 L 29 58.896484 C 29.354145 58.891575 29.868383 58.864096 30.429688 58.5625 C 31.787375 57.836032 31.951153 56.396403 31.988281 56.148438 A 1.0001 1.0001 0 1 0 30.011719 55.851562 C 29.992849 55.977598 29.808687 56.625296 29.484375 56.798828 A 1.0001 1.0001 0 0 0 29.484375 56.800781 C 29.32398 56.886961 29.109495 56.908203 28.824219 56.908203 C 28.42168 56.908203 28.114506 56.845583 27.839844 56.730469 A 1.0001 1.0001 0 0 0 27.837891 56.730469 C 27.590274 56.626904 26.829471 55.871519 26.283203 55.066406 C 25.736935 54.261294 25.312909 53.452119 25.189453 53.216797 C 23.919462 50.795113 22.489106 49.508516 21.501953 48.564453 C 20.5148 47.62039 20.058624 47.197857 19.998047 45.951172 C 19.976167 45.504675 19.999847 44.424134 20.576172 43.884766 C 21.028522 43.465344 21.714425 43.416172 22.232422 43.408203 C 23.766212 43.383873 24.938922 44.373548 25.3125 44.726562 A 1.0002743 1.0002743 0 1 0 26.6875 43.273438 C 26.275119 42.883757 25.089926 41.848234 23.351562 41.519531 C 23.684054 41.310892 24.051927 41.094628 24.453125 40.890625 C 25.797547 40.207705 29.03107 39.122361 33.191406 38.230469 C 33.362903 39.669244 33.848762 40.995803 34.662109 41.990234 C 35.637853 43.183182 36.971947 44 38.431641 44 L 47 44 L 47 43.970703 C 47.165836 43.983009 47.331031 44 47.5 44 C 51.713438 44 55 40.110516 55 35.5 C 55 35.333552 54.986972 35.170279 54.978516 35.005859 C 55.073803 35.01009 56.315831 35.06789 58.087891 35.404297 C 59.928007 35.753621 62.199459 36.410722 63.869141 37.503906 C 65.629152 38.655646 66.920293 40.814446 67.544922 42.654297 C 67.845362 43.539246 67.971865 44.326947 67.982422 44.830078 C 67.8245 44.776948 67.775568 44.787958 67.476562 44.662109 C 66.877167 44.409819 66.00089 44.047905 64.669922 43.699219 C 63.396201 43.366066 62.05944 43.286417 60.980469 43.095703 C 59.901498 42.904989 59.211917 42.607238 58.945312 42.208984 C 58.739458 41.900705 58.727505 41.54692 58.730469 41.353516 L 58.730469 41.351562 C 58.747339 40.563466 59.456845 39.915621 59.625 39.78125 A 1.0004882 1.0004882 0 1 0 58.375 38.21875 C 58.105295 38.434268 56.766737 39.493484 56.730469 41.3125 A 1.0001 1.0001 0 0 0 56.730469 41.316406 C 56.729579 41.371576 56.669939 42.401916 57.283203 43.320312 A 1.0001 1.0001 0 0 0 57.283203 43.322266 C 58.065599 44.491012 59.390783 44.844917 60.632812 45.064453 C 61.206024 45.165771 61.701344 45.250974 62.261719 45.326172 A 1.0001 1.0001 0 0 0 62.365234 45.669922 C 62.365234 45.669922 64.86532 50.149397 70.380859 52.326172 C 70.066178 52.387382 69.842456 52.467172 69.421875 52.509766 C 67.775834 52.676464 65.347141 52.681641 61.869141 52.681641 C 60.410926 52.681641 59.025939 52.816151 57.824219 53.234375 C 56.622499 53.652599 55.548945 54.41984 55.070312 55.630859 A 1.0001 1.0001 0 1 0 56.929688 56.367188 C 57.147056 55.817206 57.616939 55.425526 58.480469 55.125 C 59.343999 54.824474 60.544355 54.681641 61.869141 54.681641 C 62.686115 54.681641 63.272154 54.67395 63.980469 54.671875 C 63.991735 54.744254 64 54.705608 64 55 C 64 55.437053 63.877671 55.664997 63.5625 55.982422 C 63.247329 56.299847 62.713826 56.63574 62.078125 56.990234 C 60.806723 57.699222 59.073341 58.493869 58.189453 60.285156 C 56.857013 62.98452 55.733424 64.124354 53.070312 65.472656 C 51.996454 66.016788 51.078649 66.994555 50.269531 68.115234 C 49.460414 69.235914 48.788791 70.501858 48.398438 71.6875 A 1.0001 1.0001 0 1 0 50.296875 72.3125 C 50.602522 71.384142 51.198696 70.24818 51.892578 69.287109 C 52.58646 68.326039 53.408468 67.542727 53.974609 67.255859 C 56.877498 65.786161 58.534815 64.106558 59.984375 61.169922 C 60.491487 60.142209 61.715387 59.48209 63.052734 58.736328 C 63.721408 58.363447 64.404296 57.972872 64.980469 57.392578 C 65.556642 56.812284 66 55.971947 66 55 C 66 54.863078 65.984562 54.780633 65.980469 54.662109 C 67.402198 54.642097 68.628908 54.600673 69.623047 54.5 C 71.455256 54.314448 72.78119 53.916388 73.710938 52.974609 A 1.0001 1.0001 0 0 0 73.199219 51.291016 C 68.046363 50.247259 65.904396 47.324169 65.021484 45.927734 C 65.635572 46.129085 66.311463 46.339874 66.701172 46.503906 C 67.290277 46.751872 67.803666 47 68.490234 47 C 69.069103 47 69.600788 46.524089 69.783203 46.121094 C 69.965618 45.718098 70 45.334232 70 44.916016 C 70 44.079583 69.804185 43.091793 69.4375 42.011719 C 68.93179 40.522147 68.087632 38.874396 66.859375 37.494141 C 67.586499 36.16648 68 34.528283 68 32.751953 C 68 30.707785 67.458226 28.840877 66.513672 27.423828 C 65.569118 26.00678 64.148 25 62.5 25 C 62.198677 25 61.907673 25.043753 61.623047 25.107422 C 60.608562 23.557292 58.772228 22.865658 57.222656 22.474609 C 55.724809 22.096614 54.696278 22.068044 54.404297 22.054688 C 53.369258 20.624763 51.713906 19.85094 50.222656 19.474609 C 48.853601 19.129115 48.072381 19.115957 47.646484 19.091797 C 46.698895 17.029339 44.859694 15.934026 43.265625 15.457031 C 41.714286 14.992823 40.640372 15.046519 40.339844 15.052734 C 40.200011 14.970291 37.831103 13.568401 34.46875 12.085938 C 31.009066 10.56056 26.67809 9 22.912109 9 z M 22.912109 11 C 26.103129 11 30.317543 12.43944 33.662109 13.914062 C 36.591489 15.205629 38.559962 16.332428 39.078125 16.632812 C 39.031274 16.749234 39 16.874603 39 17 C 39 17.26 39.109063 17.520937 39.289062 17.710938 L 39.439453 17.830078 C 39.499453 17.870078 39.559141 17.899922 39.619141 17.919922 C 39.679141 17.949922 39.740781 17.970469 39.800781 17.980469 C 39.870781 17.990469 39.94 18 40 18 C 40.26 18 40.520938 17.890937 40.710938 17.710938 C 40.879411 17.533105 40.977202 17.29191 40.990234 17.048828 C 41.462183 17.094999 42.05333 17.182117 42.691406 17.373047 C 44.090367 17.791659 45.481694 18.583147 46.050781 20.3125 A 1.0001 1.0001 0 0 0 46.136719 20.503906 C 46.115766 20.542254 46.092861 20.580793 46.080078 20.619141 C 46.050078 20.679141 46.029531 20.740547 46.019531 20.810547 C 46.009531 20.870547 46 20.94 46 21 C 46 21.26 46.109063 21.520937 46.289062 21.710938 C 46.479062 21.890938 46.74 22 47 22 C 47.13 22 47.260859 21.979922 47.380859 21.919922 C 47.510859 21.869922 47.620937 21.800937 47.710938 21.710938 C 47.86877 21.544337 47.957243 21.320799 47.980469 21.09375 C 48.470812 21.153682 49.078329 21.246548 49.734375 21.412109 C 51.191603 21.779855 52.640369 22.505079 53.103516 23.443359 A 1.0001 1.0001 0 0 0 53.966797 24 C 53.966797 24 55.277147 24.04436 56.734375 24.412109 C 57.726571 24.6625 58.706905 25.080934 59.382812 25.617188 C 58.824296 25.86258 58.539744 25.98812 57.689453 26.361328 C 56.959362 26.681778 56.226486 27.003639 55.669922 27.248047 C 55.113358 27.492455 54.829216 27.614987 54.699219 27.673828 L 54.695312 27.675781 L 54.691406 27.677734 C 53.992541 28.001013 53.204998 28.546857 52.652344 29.335938 C 51.318755 27.899257 49.518306 27 47.5 27 C 46.088192 27 44.784831 27.445042 43.669922 28.199219 L 43.619141 28.074219 C 43.619141 28.074219 41.839903 28.806549 40.052734 29.541016 C 39.15915 29.908249 38.263012 30.277439 37.587891 30.554688 C 37.25033 30.69331 36.967179 30.808775 36.767578 30.890625 C 36.667778 30.931555 36.589701 30.964028 36.535156 30.986328 C 36.507886 30.997478 36.486666 31.006019 36.472656 31.011719 L 36.46875 31.013672 C 34.671404 31.696821 33.47822 33.590501 33.173828 36.177734 C 28.67056 37.106859 25.2554 38.241503 23.546875 39.109375 C 21.798376 39.998459 20.656347 40.983978 20.472656 41.144531 C 19.868962 40.289449 17.808667 37.342736 15.427734 33.273438 C 12.672408 28.564256 10 22.859167 10 19.863281 C 10 16.735766 11.783287 14.629244 14.365234 13.158203 C 16.947182 11.687162 20.298462 11 22.912109 11 z M 19 16 A 2 2 0 0 0 19 20 A 2 2 0 0 0 19 16 z M 35.697266 16.384766 C 35.567734 16.369922 35.433281 16.379922 35.300781 16.419922 C 34.770781 16.579922 34.470859 17.139922 34.630859 17.669922 C 34.760859 18.099922 35.159844 18.380859 35.589844 18.380859 C 35.679844 18.380859 35.779141 18.369844 35.869141 18.339844 C 36.399141 18.179844 36.700781 17.619609 36.550781 17.099609 C 36.430781 16.702109 36.085859 16.429297 35.697266 16.384766 z M 31.787109 18.501953 C 31.532109 18.481953 31.270547 18.560234 31.060547 18.740234 C 30.640547 19.100234 30.589219 19.740156 30.949219 20.160156 C 31.149219 20.390156 31.430937 20.5 31.710938 20.5 C 31.940937 20.5 32.169375 20.419766 32.359375 20.259766 C 32.779375 19.899766 32.830703 19.269609 32.470703 18.849609 C 32.290703 18.639609 32.042109 18.521953 31.787109 18.501953 z M 43.460938 20.029297 C 42.900937 20.079297 42.489297 20.549609 42.529297 21.099609 C 42.569297 21.629609 42.999297 22.029297 43.529297 22.029297 L 43.599609 22.029297 C 44.149609 21.989297 44.559531 21.510938 44.519531 20.960938 C 44.479531 20.410937 44.010937 19.999297 43.460938 20.029297 z M 40.207031 20.570312 C 40.0775 20.557344 39.943047 20.569375 39.810547 20.609375 C 39.280547 20.779375 38.990391 21.339375 39.150391 21.859375 C 39.280391 22.289375 39.679375 22.570312 40.109375 22.570312 C 40.199375 22.570312 40.300391 22.549531 40.400391 22.519531 C 40.930391 22.359531 41.220547 21.799531 41.060547 21.269531 C 40.940547 20.872031 40.595625 20.609219 40.207031 20.570312 z M 28.90625 22.005859 C 28.808594 22.015547 28.711641 22.040078 28.619141 22.080078 C 28.499141 22.130078 28.389063 22.199063 28.289062 22.289062 C 28.109062 22.479062 28 22.74 28 23 C 28 23.13 28.030078 23.260859 28.080078 23.380859 C 28.130078 23.510859 28.199063 23.610937 28.289062 23.710938 C 28.389062 23.800938 28.499141 23.869922 28.619141 23.919922 C 28.739141 23.969922 28.87 24 29 24 C 29.26 24 29.520938 23.890938 29.710938 23.710938 C 29.800938 23.610938 29.869922 23.510859 29.919922 23.380859 C 29.979922 23.260859 30 23.13 30 23 C 30 22.74 29.890937 22.479063 29.710938 22.289062 C 29.500937 22.079062 29.199219 21.976797 28.90625 22.005859 z M 37.169922 22.267578 C 36.914922 22.252578 36.654219 22.334531 36.449219 22.519531 C 36.039219 22.889531 35.999141 23.519453 36.369141 23.939453 C 36.569141 24.159453 36.839141 24.269531 37.119141 24.269531 C 37.349141 24.269531 37.589297 24.179766 37.779297 24.009766 C 38.189297 23.639766 38.229375 23.009609 37.859375 22.599609 C 37.674375 22.394609 37.424922 22.282578 37.169922 22.267578 z M 18.5 24 A 1.5 1.5 0 0 0 18.5 27 A 1.5 1.5 0 0 0 18.5 24 z M 34.800781 25.019531 C 34.740781 25.029531 34.679141 25.050078 34.619141 25.080078 C 34.559141 25.100078 34.499453 25.129922 34.439453 25.169922 C 34.389453 25.199922 34.339062 25.249063 34.289062 25.289062 C 34.109062 25.479062 34 25.74 34 26 C 34 26.26 34.109063 26.520937 34.289062 26.710938 C 34.339063 26.750938 34.389453 26.800078 34.439453 26.830078 C 34.499453 26.870078 34.559141 26.899922 34.619141 26.919922 C 34.679141 26.949922 34.740781 26.970469 34.800781 26.980469 C 34.870781 26.990469 34.94 27 35 27 C 35.06 27 35.129219 26.990469 35.199219 26.980469 C 35.259219 26.970469 35.320859 26.949922 35.380859 26.919922 C 35.440859 26.899922 35.500547 26.870078 35.560547 26.830078 C 35.610547 26.800078 35.660938 26.750937 35.710938 26.710938 C 35.750938 26.660938 35.800078 26.610547 35.830078 26.560547 C 35.870078 26.500547 35.899922 26.440859 35.919922 26.380859 C 35.949922 26.320859 35.970469 26.259219 35.980469 26.199219 C 35.990469 26.129219 36 26.06 36 26 C 36 25.94 35.990469 25.870781 35.980469 25.800781 C 35.970469 25.740781 35.949922 25.679141 35.919922 25.619141 C 35.899922 25.559141 35.870078 25.499453 35.830078 25.439453 C 35.800078 25.389453 35.750937 25.339063 35.710938 25.289062 C 35.660937 25.249062 35.610547 25.199922 35.560547 25.169922 C 35.500547 25.129922 35.440859 25.100078 35.380859 25.080078 C 35.320859 25.050078 35.259219 25.029531 35.199219 25.019531 C 35.069219 24.989531 34.930781 24.989531 34.800781 25.019531 z M 62.5 27 C 63.337 27 64.165413 27.504798 64.849609 28.53125 C 65.533805 29.557702 66 31.068121 66 32.751953 C 66 34.00733 65.737519 35.160765 65.320312 36.09375 C 65.200872 36.006694 65.089403 35.911589 64.964844 35.830078 C 63.115425 34.619215 60.926832 33.96549 59.054688 33.570312 C 59.029888 33.300341 59 33.032794 59 32.751953 C 59 31.068121 59.466195 29.557702 60.150391 28.53125 C 60.834587 27.504798 61.663 27 62.5 27 z M 57.916016 28.445312 C 57.328962 29.690383 57 31.166369 57 32.751953 C 57 32.906001 57.009389 33.055718 57.015625 33.207031 C 55.772365 33.037808 54.913216 33 54.912109 33 A 1.0001 1.0001 0 0 0 54.673828 33.027344 C 54.498232 32.374737 54.249591 31.758461 53.947266 31.179688 L 53.982422 31.185547 C 54.0947 30.58994 54.973824 29.750039 55.53125 29.492188 C 55.45871 29.525108 55.922938 29.320384 56.474609 29.078125 C 56.871683 28.903755 57.404225 28.670009 57.916016 28.445312 z M 47.5 29 C 50.466269 29 53 31.826245 53 35.5 C 53 39.173755 50.466269 42 47.5 42 C 44.533731 42 42 39.173755 42 35.5 C 42 31.826245 44.533731 29 47.5 29 z M 40.976562 31.322266 C 40.355891 32.56516 40 33.991941 40 35.5 C 40 38.077287 41.028118 40.426794 42.669922 42 L 38.431641 42 C 37.756334 42 36.895938 41.562119 36.210938 40.724609 C 35.525937 39.8871 35.042969 38.697103 35.042969 37.390625 C 35.042969 34.679516 36.061342 33.310422 37.177734 32.884766 C 37.177734 32.884766 37.179688 32.882812 37.179688 32.882812 C 37.226627 32.865252 37.212823 32.868871 37.226562 32.863281 C 37.242672 32.856681 37.265109 32.849281 37.292969 32.837891 C 37.348679 32.815111 37.427234 32.781294 37.527344 32.740234 C 37.727564 32.658134 38.009936 32.542986 38.347656 32.404297 C 39.023097 32.126919 39.918835 31.757892 40.8125 31.390625 C 40.894854 31.35678 40.894409 31.356021 40.976562 31.322266 z M 52.027344 45.986328 A 1.0001 1.0001 0 0 0 51.001953 47.056641 C 51.12024 49.123838 50.810157 50.953649 50.085938 52.595703 A 1.0001 1.0001 0 0 0 50.083984 52.597656 C 49.747402 53.362036 49.483444 53.693798 49.085938 54.595703 C 48.224157 56.549649 47.86824 58.719838 48.001953 61.056641 A 1.0001 1.0001 0 1 0 49.998047 60.943359 C 49.87976 58.876162 50.189842 57.046351 50.914062 55.404297 A 1.0001 1.0001 0 0 0 50.916016 55.402344 C 51.249338 54.645539 51.513827 54.312598 51.914062 53.404297 C 52.775843 51.450351 53.13176 49.280162 52.998047 46.943359 A 1.0001 1.0001 0 0 0 52.027344 45.986328 z M 27.988281 47.988281 A 1.0001 1.0001 0 0 0 27.167969 49.554688 C 27.834713 50.554304 28.500713 51.554304 29.167969 52.554688 A 1.0001 1.0001 0 1 0 30.832031 51.445312 C 30.165287 50.445696 29.499287 49.445696 28.832031 48.445312 A 1.0001 1.0001 0 0 0 27.988281 47.988281 z M 28 64.330078 C 27.45 64.330078 27 64.780078 27 65.330078 C 27 65.890078 27.45 66.330078 28 66.330078 C 28.55 66.330078 29 65.890078 29 65.330078 C 29 64.780078 28.55 64.330078 28 64.330078 z M 28 67.669922 C 27.45 67.669922 27 68.119922 27 68.669922 C 27 69.219922 27.45 69.669922 28 69.669922 C 28.55 69.669922 29 69.219922 29 68.669922 C 29 68.119922 28.55 67.669922 28 67.669922 z M 28.09375 71.005859 C 27.800781 70.976797 27.499063 71.079062 27.289062 71.289062 L 27.169922 71.439453 C 27.129922 71.499453 27.100078 71.559141 27.080078 71.619141 C 27.050078 71.679141 27.029531 71.740781 27.019531 71.800781 C 27.009531 71.870781 27 71.93 27 72 C 27 72.13 27.030078 72.260859 27.080078 72.380859 C 27.130078 72.500859 27.199063 72.610938 27.289062 72.710938 C 27.479062 72.890937 27.74 73 28 73 C 28.13 73 28.260859 72.969922 28.380859 72.919922 C 28.500859 72.869922 28.610937 72.800938 28.710938 72.710938 C 28.800938 72.610937 28.869922 72.500859 28.919922 72.380859 C 28.969922 72.260859 29 72.13 29 72 C 29 71.93 28.990469 71.870781 28.980469 71.800781 C 28.970469 71.740781 28.949922 71.679141 28.919922 71.619141 C 28.899922 71.559141 28.870078 71.499453 28.830078 71.439453 L 28.710938 71.289062 C 28.610938 71.199063 28.500859 71.130078 28.380859 71.080078 C 28.288359 71.040078 28.191406 71.015547 28.09375 71.005859 z"/></svg>
          </div>
          <div class="dialog-text">
          <p>But wait, AsciiDoc is written in Ruby, and you don't know Ruby!</p>
          </div>
        </div>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>I don't, but let's see if I can write something good enough for the job</p>
          </div>
        </div>
<div class="paragraph">
<p><code>jekyll-asciidoc</code>
<a href="https://github.com/asciidoctor/jekyll-asciidoc#enabling-asciidoctor-extensions">plugins
docs</a> will look for potential extensions by looking in the <code>_plugins</code> directory
of the Jekyll project, so that&#8217;s where our extension is going to be saved.
This is my <code>chat-extension.rb</code> file</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="ruby"><span class="nb">require</span> <span class="s1">'asciidoctor/extensions'</span>

<span class="kp">include</span> <span class="no">Asciidoctor</span>

<span class="no">Asciidoctor</span><span class="o">::</span><span class="no">Extensions</span><span class="p">.</span><span class="nf">register</span> <span class="k">do</span>
  <span class="n">block</span> <span class="ss">:chat</span> <span class="k">do</span>
    <span class="n">process</span> <span class="k">do</span> <span class="o">|</span><span class="n">parent</span><span class="p">,</span> <span class="n">reader</span><span class="p">,</span> <span class="n">attributes</span><span class="o">|</span>
      <span class="n">character</span> <span class="o">=</span> <span class="n">attributes</span><span class="p">.</span><span class="nf">values</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

      <span class="n">svg</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="s2">"_includes/"</span> <span class="o">+</span> <span class="n">character</span> <span class="o">+</span> <span class="s2">".svg"</span><span class="p">)</span>
      <span class="n">content</span> <span class="o">=</span> <span class="n">reader</span><span class="p">.</span><span class="nf">lines</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">' '</span><span class="p">)</span>

      <span class="n">html</span> <span class="o">=</span> <span class="sx">%(
        &lt;div class="dialog #{character}" title="#{character.capitalize}"&gt;
          &lt;div class="dialog-head"&gt;
          #{svg}
          &lt;/div&gt;
          &lt;div class="dialog-text"&gt;
          &lt;p&gt;#{content}&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      )</span>

      <span class="n">create_pass_block</span> <span class="n">parent</span><span class="p">,</span> <span class="n">html</span><span class="p">,</span> <span class="p">{},</span> <span class="ss">:content_model</span> <span class="o">=&gt;</span> <span class="ss">:raw</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see, I&#8217;m not a magician with Ruby, this is
mainly strings manipulation, so it&#8217;s not that difficult.
Let me go through the code once more</p>
</div>
<div class="ulist">
<ul>
<li>
<p>I initially take the second field of the syntax block</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="ruby"><span class="c1"># [chat, professor]</span>
<span class="c1"># --</span>
<span class="c1"># ...</span>
<span class="c1"># --</span>
<span class="n">character</span> <span class="o">=</span> <span class="n">attributes</span><span class="p">.</span><span class="nf">values</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># &lt;- "professor"</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Load svg from file using the <code>character</code> variable we just read</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="ruby"><span class="n">svg</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="s2">"_includes/"</span> <span class="o">+</span> <span class="n">character</span> <span class="o">+</span> <span class="s2">".svg"</span><span class="p">)</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Put the content of the block in a string</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="ruby"><span class="c1"># this contains everything that's inside the -- block</span>
<span class="c1">#</span>
<span class="c1"># [chat, professor]</span>
<span class="c1"># --</span>
<span class="c1"># Hey there!</span>
<span class="c1"># --</span>
<span class="n">content</span> <span class="o">=</span> <span class="n">reader</span><span class="p">.</span><span class="nf">lines</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">' '</span><span class="p">)</span> <span class="c1"># &lt;- "Hey there!"</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Inject raw <code>html</code> in page</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="ruby"><span class="n">create_pass_block</span> <span class="n">parent</span><span class="p">,</span> <span class="n">html</span><span class="p">,</span> <span class="p">{},</span> <span class="ss">:content_model</span> <span class="o">=&gt;</span> <span class="ss">:raw</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If I now try to replace the original <code>include</code> syntax with</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">[chat, matt]
--
Hey there! Finally we made it! This chat that you're reading is the generated
and injected component! This time using AsciiDoc Extension
--</code></pre>
</div>
</div>
<div class="paragraph">
<p>I&#8217;m going to get</p>
</div>
        <div class="dialog matt" title="Matt">
          <div class="dialog-head">
          <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
          </div>
          <div class="dialog-text">
          <p>Hey there! Finally we made it! This chat that you're reading is the generated and injected component! This time using AsciiDoc Extension</p>
          </div>
        </div>
<div class="paragraph">
<p>That is looking really good and a lot less verbose than the initial Jekyll way,
if you inspect the page source you&#8217;re going to see that AsciiDoc now generates
the custom HTML code, as expected. The only issue that I have right now is that
the content of the block is not getting parsed since I&#8217;m just putting it into a
string variable and spitting it out in the HTML variable as-is, but that&#8217;s good enough
for what I need at the moment.</p>
</div>
<div class="paragraph">
<p>Hopefully you learned a little bit more about this topic which is not really a
big thing out there for some reason, it took me quite a lot of research to get
to this result. I guess that Ruby is the only thing blocking me from writing
more complex logic for this extension and others yet to come, but I am super
satisfied with the AsciiDoc switch, you can do literally everything you want
with the language if you start digging into the parsers and extensions.</p>
</div>]]></content><author><name>Mattia Righetti</name></author><summary type="html"><![CDATA[A couple of days ago I was giving a little update to my website and I needed a way to create and inject custom HTML into some of my posts.]]></summary></entry><entry><title type="html">Bypassing Manual Encryption Check for iOS Apps</title><link href="https://mattrighetti.com/2023/02/06/bypassing-manual-encryption-check-for-ios-apps.html" rel="alternate" type="text/html" title="Bypassing Manual Encryption Check for iOS Apps" /><published>2023-02-06T00:00:00+00:00</published><updated>2023-02-06T00:00:00+00:00</updated><id>https://mattrighetti.com/2023/02/06/bypassing-manual-encryption-check-for-ios-apps</id><content type="html" xml:base="https://mattrighetti.com/2023/02/06/bypassing-manual-encryption-check-for-ios-apps.html"><![CDATA[<div class="paragraph">
<p>This is going to be a very small and dumb one but I&#8217;ve just dicovered this,
after two years of iOS/macOS software development, so maybe it&#8217;s going to be
useful for other people as well.</p>
</div>
<div class="dialog professor" title="Professor">
    <div class="dialog-head">
        <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 80 80" width="240px" height="240px"><path d="M 22.912109 9 C 19.960756 9 16.358303 9.7221658 13.375 11.421875 C 10.391697 13.121584 8 15.945797 8 19.863281 C 8 23.912396 10.891498 29.481134 13.701172 34.283203 C 16.296271 38.718537 18.669822 42.066616 19.050781 42.601562 C 17.846834 43.88996 17.980826 45.617638 18.001953 46.048828 C 18.091373 47.889143 19.090293 49.025828 20.119141 50.009766 C 21.147988 50.993703 22.29396 52.003168 23.417969 54.146484 C 23.539513 54.378162 24.004424 55.269066 24.628906 56.189453 C 25.24048 57.090816 25.918145 58.062135 27 58.542969 L 27 62 A 1.0001 1.0001 0 1 0 29 62 L 29 58.896484 C 29.354145 58.891575 29.868383 58.864096 30.429688 58.5625 C 31.787375 57.836032 31.951153 56.396403 31.988281 56.148438 A 1.0001 1.0001 0 1 0 30.011719 55.851562 C 29.992849 55.977598 29.808687 56.625296 29.484375 56.798828 A 1.0001 1.0001 0 0 0 29.484375 56.800781 C 29.32398 56.886961 29.109495 56.908203 28.824219 56.908203 C 28.42168 56.908203 28.114506 56.845583 27.839844 56.730469 A 1.0001 1.0001 0 0 0 27.837891 56.730469 C 27.590274 56.626904 26.829471 55.871519 26.283203 55.066406 C 25.736935 54.261294 25.312909 53.452119 25.189453 53.216797 C 23.919462 50.795113 22.489106 49.508516 21.501953 48.564453 C 20.5148 47.62039 20.058624 47.197857 19.998047 45.951172 C 19.976167 45.504675 19.999847 44.424134 20.576172 43.884766 C 21.028522 43.465344 21.714425 43.416172 22.232422 43.408203 C 23.766212 43.383873 24.938922 44.373548 25.3125 44.726562 A 1.0002743 1.0002743 0 1 0 26.6875 43.273438 C 26.275119 42.883757 25.089926 41.848234 23.351562 41.519531 C 23.684054 41.310892 24.051927 41.094628 24.453125 40.890625 C 25.797547 40.207705 29.03107 39.122361 33.191406 38.230469 C 33.362903 39.669244 33.848762 40.995803 34.662109 41.990234 C 35.637853 43.183182 36.971947 44 38.431641 44 L 47 44 L 47 43.970703 C 47.165836 43.983009 47.331031 44 47.5 44 C 51.713438 44 55 40.110516 55 35.5 C 55 35.333552 54.986972 35.170279 54.978516 35.005859 C 55.073803 35.01009 56.315831 35.06789 58.087891 35.404297 C 59.928007 35.753621 62.199459 36.410722 63.869141 37.503906 C 65.629152 38.655646 66.920293 40.814446 67.544922 42.654297 C 67.845362 43.539246 67.971865 44.326947 67.982422 44.830078 C 67.8245 44.776948 67.775568 44.787958 67.476562 44.662109 C 66.877167 44.409819 66.00089 44.047905 64.669922 43.699219 C 63.396201 43.366066 62.05944 43.286417 60.980469 43.095703 C 59.901498 42.904989 59.211917 42.607238 58.945312 42.208984 C 58.739458 41.900705 58.727505 41.54692 58.730469 41.353516 L 58.730469 41.351562 C 58.747339 40.563466 59.456845 39.915621 59.625 39.78125 A 1.0004882 1.0004882 0 1 0 58.375 38.21875 C 58.105295 38.434268 56.766737 39.493484 56.730469 41.3125 A 1.0001 1.0001 0 0 0 56.730469 41.316406 C 56.729579 41.371576 56.669939 42.401916 57.283203 43.320312 A 1.0001 1.0001 0 0 0 57.283203 43.322266 C 58.065599 44.491012 59.390783 44.844917 60.632812 45.064453 C 61.206024 45.165771 61.701344 45.250974 62.261719 45.326172 A 1.0001 1.0001 0 0 0 62.365234 45.669922 C 62.365234 45.669922 64.86532 50.149397 70.380859 52.326172 C 70.066178 52.387382 69.842456 52.467172 69.421875 52.509766 C 67.775834 52.676464 65.347141 52.681641 61.869141 52.681641 C 60.410926 52.681641 59.025939 52.816151 57.824219 53.234375 C 56.622499 53.652599 55.548945 54.41984 55.070312 55.630859 A 1.0001 1.0001 0 1 0 56.929688 56.367188 C 57.147056 55.817206 57.616939 55.425526 58.480469 55.125 C 59.343999 54.824474 60.544355 54.681641 61.869141 54.681641 C 62.686115 54.681641 63.272154 54.67395 63.980469 54.671875 C 63.991735 54.744254 64 54.705608 64 55 C 64 55.437053 63.877671 55.664997 63.5625 55.982422 C 63.247329 56.299847 62.713826 56.63574 62.078125 56.990234 C 60.806723 57.699222 59.073341 58.493869 58.189453 60.285156 C 56.857013 62.98452 55.733424 64.124354 53.070312 65.472656 C 51.996454 66.016788 51.078649 66.994555 50.269531 68.115234 C 49.460414 69.235914 48.788791 70.501858 48.398438 71.6875 A 1.0001 1.0001 0 1 0 50.296875 72.3125 C 50.602522 71.384142 51.198696 70.24818 51.892578 69.287109 C 52.58646 68.326039 53.408468 67.542727 53.974609 67.255859 C 56.877498 65.786161 58.534815 64.106558 59.984375 61.169922 C 60.491487 60.142209 61.715387 59.48209 63.052734 58.736328 C 63.721408 58.363447 64.404296 57.972872 64.980469 57.392578 C 65.556642 56.812284 66 55.971947 66 55 C 66 54.863078 65.984562 54.780633 65.980469 54.662109 C 67.402198 54.642097 68.628908 54.600673 69.623047 54.5 C 71.455256 54.314448 72.78119 53.916388 73.710938 52.974609 A 1.0001 1.0001 0 0 0 73.199219 51.291016 C 68.046363 50.247259 65.904396 47.324169 65.021484 45.927734 C 65.635572 46.129085 66.311463 46.339874 66.701172 46.503906 C 67.290277 46.751872 67.803666 47 68.490234 47 C 69.069103 47 69.600788 46.524089 69.783203 46.121094 C 69.965618 45.718098 70 45.334232 70 44.916016 C 70 44.079583 69.804185 43.091793 69.4375 42.011719 C 68.93179 40.522147 68.087632 38.874396 66.859375 37.494141 C 67.586499 36.16648 68 34.528283 68 32.751953 C 68 30.707785 67.458226 28.840877 66.513672 27.423828 C 65.569118 26.00678 64.148 25 62.5 25 C 62.198677 25 61.907673 25.043753 61.623047 25.107422 C 60.608562 23.557292 58.772228 22.865658 57.222656 22.474609 C 55.724809 22.096614 54.696278 22.068044 54.404297 22.054688 C 53.369258 20.624763 51.713906 19.85094 50.222656 19.474609 C 48.853601 19.129115 48.072381 19.115957 47.646484 19.091797 C 46.698895 17.029339 44.859694 15.934026 43.265625 15.457031 C 41.714286 14.992823 40.640372 15.046519 40.339844 15.052734 C 40.200011 14.970291 37.831103 13.568401 34.46875 12.085938 C 31.009066 10.56056 26.67809 9 22.912109 9 z M 22.912109 11 C 26.103129 11 30.317543 12.43944 33.662109 13.914062 C 36.591489 15.205629 38.559962 16.332428 39.078125 16.632812 C 39.031274 16.749234 39 16.874603 39 17 C 39 17.26 39.109063 17.520937 39.289062 17.710938 L 39.439453 17.830078 C 39.499453 17.870078 39.559141 17.899922 39.619141 17.919922 C 39.679141 17.949922 39.740781 17.970469 39.800781 17.980469 C 39.870781 17.990469 39.94 18 40 18 C 40.26 18 40.520938 17.890937 40.710938 17.710938 C 40.879411 17.533105 40.977202 17.29191 40.990234 17.048828 C 41.462183 17.094999 42.05333 17.182117 42.691406 17.373047 C 44.090367 17.791659 45.481694 18.583147 46.050781 20.3125 A 1.0001 1.0001 0 0 0 46.136719 20.503906 C 46.115766 20.542254 46.092861 20.580793 46.080078 20.619141 C 46.050078 20.679141 46.029531 20.740547 46.019531 20.810547 C 46.009531 20.870547 46 20.94 46 21 C 46 21.26 46.109063 21.520937 46.289062 21.710938 C 46.479062 21.890938 46.74 22 47 22 C 47.13 22 47.260859 21.979922 47.380859 21.919922 C 47.510859 21.869922 47.620937 21.800937 47.710938 21.710938 C 47.86877 21.544337 47.957243 21.320799 47.980469 21.09375 C 48.470812 21.153682 49.078329 21.246548 49.734375 21.412109 C 51.191603 21.779855 52.640369 22.505079 53.103516 23.443359 A 1.0001 1.0001 0 0 0 53.966797 24 C 53.966797 24 55.277147 24.04436 56.734375 24.412109 C 57.726571 24.6625 58.706905 25.080934 59.382812 25.617188 C 58.824296 25.86258 58.539744 25.98812 57.689453 26.361328 C 56.959362 26.681778 56.226486 27.003639 55.669922 27.248047 C 55.113358 27.492455 54.829216 27.614987 54.699219 27.673828 L 54.695312 27.675781 L 54.691406 27.677734 C 53.992541 28.001013 53.204998 28.546857 52.652344 29.335938 C 51.318755 27.899257 49.518306 27 47.5 27 C 46.088192 27 44.784831 27.445042 43.669922 28.199219 L 43.619141 28.074219 C 43.619141 28.074219 41.839903 28.806549 40.052734 29.541016 C 39.15915 29.908249 38.263012 30.277439 37.587891 30.554688 C 37.25033 30.69331 36.967179 30.808775 36.767578 30.890625 C 36.667778 30.931555 36.589701 30.964028 36.535156 30.986328 C 36.507886 30.997478 36.486666 31.006019 36.472656 31.011719 L 36.46875 31.013672 C 34.671404 31.696821 33.47822 33.590501 33.173828 36.177734 C 28.67056 37.106859 25.2554 38.241503 23.546875 39.109375 C 21.798376 39.998459 20.656347 40.983978 20.472656 41.144531 C 19.868962 40.289449 17.808667 37.342736 15.427734 33.273438 C 12.672408 28.564256 10 22.859167 10 19.863281 C 10 16.735766 11.783287 14.629244 14.365234 13.158203 C 16.947182 11.687162 20.298462 11 22.912109 11 z M 19 16 A 2 2 0 0 0 19 20 A 2 2 0 0 0 19 16 z M 35.697266 16.384766 C 35.567734 16.369922 35.433281 16.379922 35.300781 16.419922 C 34.770781 16.579922 34.470859 17.139922 34.630859 17.669922 C 34.760859 18.099922 35.159844 18.380859 35.589844 18.380859 C 35.679844 18.380859 35.779141 18.369844 35.869141 18.339844 C 36.399141 18.179844 36.700781 17.619609 36.550781 17.099609 C 36.430781 16.702109 36.085859 16.429297 35.697266 16.384766 z M 31.787109 18.501953 C 31.532109 18.481953 31.270547 18.560234 31.060547 18.740234 C 30.640547 19.100234 30.589219 19.740156 30.949219 20.160156 C 31.149219 20.390156 31.430937 20.5 31.710938 20.5 C 31.940937 20.5 32.169375 20.419766 32.359375 20.259766 C 32.779375 19.899766 32.830703 19.269609 32.470703 18.849609 C 32.290703 18.639609 32.042109 18.521953 31.787109 18.501953 z M 43.460938 20.029297 C 42.900937 20.079297 42.489297 20.549609 42.529297 21.099609 C 42.569297 21.629609 42.999297 22.029297 43.529297 22.029297 L 43.599609 22.029297 C 44.149609 21.989297 44.559531 21.510938 44.519531 20.960938 C 44.479531 20.410937 44.010937 19.999297 43.460938 20.029297 z M 40.207031 20.570312 C 40.0775 20.557344 39.943047 20.569375 39.810547 20.609375 C 39.280547 20.779375 38.990391 21.339375 39.150391 21.859375 C 39.280391 22.289375 39.679375 22.570312 40.109375 22.570312 C 40.199375 22.570312 40.300391 22.549531 40.400391 22.519531 C 40.930391 22.359531 41.220547 21.799531 41.060547 21.269531 C 40.940547 20.872031 40.595625 20.609219 40.207031 20.570312 z M 28.90625 22.005859 C 28.808594 22.015547 28.711641 22.040078 28.619141 22.080078 C 28.499141 22.130078 28.389063 22.199063 28.289062 22.289062 C 28.109062 22.479062 28 22.74 28 23 C 28 23.13 28.030078 23.260859 28.080078 23.380859 C 28.130078 23.510859 28.199063 23.610937 28.289062 23.710938 C 28.389062 23.800938 28.499141 23.869922 28.619141 23.919922 C 28.739141 23.969922 28.87 24 29 24 C 29.26 24 29.520938 23.890938 29.710938 23.710938 C 29.800938 23.610938 29.869922 23.510859 29.919922 23.380859 C 29.979922 23.260859 30 23.13 30 23 C 30 22.74 29.890937 22.479063 29.710938 22.289062 C 29.500937 22.079062 29.199219 21.976797 28.90625 22.005859 z M 37.169922 22.267578 C 36.914922 22.252578 36.654219 22.334531 36.449219 22.519531 C 36.039219 22.889531 35.999141 23.519453 36.369141 23.939453 C 36.569141 24.159453 36.839141 24.269531 37.119141 24.269531 C 37.349141 24.269531 37.589297 24.179766 37.779297 24.009766 C 38.189297 23.639766 38.229375 23.009609 37.859375 22.599609 C 37.674375 22.394609 37.424922 22.282578 37.169922 22.267578 z M 18.5 24 A 1.5 1.5 0 0 0 18.5 27 A 1.5 1.5 0 0 0 18.5 24 z M 34.800781 25.019531 C 34.740781 25.029531 34.679141 25.050078 34.619141 25.080078 C 34.559141 25.100078 34.499453 25.129922 34.439453 25.169922 C 34.389453 25.199922 34.339062 25.249063 34.289062 25.289062 C 34.109062 25.479062 34 25.74 34 26 C 34 26.26 34.109063 26.520937 34.289062 26.710938 C 34.339063 26.750938 34.389453 26.800078 34.439453 26.830078 C 34.499453 26.870078 34.559141 26.899922 34.619141 26.919922 C 34.679141 26.949922 34.740781 26.970469 34.800781 26.980469 C 34.870781 26.990469 34.94 27 35 27 C 35.06 27 35.129219 26.990469 35.199219 26.980469 C 35.259219 26.970469 35.320859 26.949922 35.380859 26.919922 C 35.440859 26.899922 35.500547 26.870078 35.560547 26.830078 C 35.610547 26.800078 35.660938 26.750937 35.710938 26.710938 C 35.750938 26.660938 35.800078 26.610547 35.830078 26.560547 C 35.870078 26.500547 35.899922 26.440859 35.919922 26.380859 C 35.949922 26.320859 35.970469 26.259219 35.980469 26.199219 C 35.990469 26.129219 36 26.06 36 26 C 36 25.94 35.990469 25.870781 35.980469 25.800781 C 35.970469 25.740781 35.949922 25.679141 35.919922 25.619141 C 35.899922 25.559141 35.870078 25.499453 35.830078 25.439453 C 35.800078 25.389453 35.750937 25.339063 35.710938 25.289062 C 35.660937 25.249062 35.610547 25.199922 35.560547 25.169922 C 35.500547 25.129922 35.440859 25.100078 35.380859 25.080078 C 35.320859 25.050078 35.259219 25.029531 35.199219 25.019531 C 35.069219 24.989531 34.930781 24.989531 34.800781 25.019531 z M 62.5 27 C 63.337 27 64.165413 27.504798 64.849609 28.53125 C 65.533805 29.557702 66 31.068121 66 32.751953 C 66 34.00733 65.737519 35.160765 65.320312 36.09375 C 65.200872 36.006694 65.089403 35.911589 64.964844 35.830078 C 63.115425 34.619215 60.926832 33.96549 59.054688 33.570312 C 59.029888 33.300341 59 33.032794 59 32.751953 C 59 31.068121 59.466195 29.557702 60.150391 28.53125 C 60.834587 27.504798 61.663 27 62.5 27 z M 57.916016 28.445312 C 57.328962 29.690383 57 31.166369 57 32.751953 C 57 32.906001 57.009389 33.055718 57.015625 33.207031 C 55.772365 33.037808 54.913216 33 54.912109 33 A 1.0001 1.0001 0 0 0 54.673828 33.027344 C 54.498232 32.374737 54.249591 31.758461 53.947266 31.179688 L 53.982422 31.185547 C 54.0947 30.58994 54.973824 29.750039 55.53125 29.492188 C 55.45871 29.525108 55.922938 29.320384 56.474609 29.078125 C 56.871683 28.903755 57.404225 28.670009 57.916016 28.445312 z M 47.5 29 C 50.466269 29 53 31.826245 53 35.5 C 53 39.173755 50.466269 42 47.5 42 C 44.533731 42 42 39.173755 42 35.5 C 42 31.826245 44.533731 29 47.5 29 z M 40.976562 31.322266 C 40.355891 32.56516 40 33.991941 40 35.5 C 40 38.077287 41.028118 40.426794 42.669922 42 L 38.431641 42 C 37.756334 42 36.895938 41.562119 36.210938 40.724609 C 35.525937 39.8871 35.042969 38.697103 35.042969 37.390625 C 35.042969 34.679516 36.061342 33.310422 37.177734 32.884766 C 37.177734 32.884766 37.179688 32.882812 37.179688 32.882812 C 37.226627 32.865252 37.212823 32.868871 37.226562 32.863281 C 37.242672 32.856681 37.265109 32.849281 37.292969 32.837891 C 37.348679 32.815111 37.427234 32.781294 37.527344 32.740234 C 37.727564 32.658134 38.009936 32.542986 38.347656 32.404297 C 39.023097 32.126919 39.918835 31.757892 40.8125 31.390625 C 40.894854 31.35678 40.894409 31.356021 40.976562 31.322266 z M 52.027344 45.986328 A 1.0001 1.0001 0 0 0 51.001953 47.056641 C 51.12024 49.123838 50.810157 50.953649 50.085938 52.595703 A 1.0001 1.0001 0 0 0 50.083984 52.597656 C 49.747402 53.362036 49.483444 53.693798 49.085938 54.595703 C 48.224157 56.549649 47.86824 58.719838 48.001953 61.056641 A 1.0001 1.0001 0 1 0 49.998047 60.943359 C 49.87976 58.876162 50.189842 57.046351 50.914062 55.404297 A 1.0001 1.0001 0 0 0 50.916016 55.402344 C 51.249338 54.645539 51.513827 54.312598 51.914062 53.404297 C 52.775843 51.450351 53.13176 49.280162 52.998047 46.943359 A 1.0001 1.0001 0 0 0 52.027344 45.986328 z M 27.988281 47.988281 A 1.0001 1.0001 0 0 0 27.167969 49.554688 C 27.834713 50.554304 28.500713 51.554304 29.167969 52.554688 A 1.0001 1.0001 0 1 0 30.832031 51.445312 C 30.165287 50.445696 29.499287 49.445696 28.832031 48.445312 A 1.0001 1.0001 0 0 0 27.988281 47.988281 z M 28 64.330078 C 27.45 64.330078 27 64.780078 27 65.330078 C 27 65.890078 27.45 66.330078 28 66.330078 C 28.55 66.330078 29 65.890078 29 65.330078 C 29 64.780078 28.55 64.330078 28 64.330078 z M 28 67.669922 C 27.45 67.669922 27 68.119922 27 68.669922 C 27 69.219922 27.45 69.669922 28 69.669922 C 28.55 69.669922 29 69.219922 29 68.669922 C 29 68.119922 28.55 67.669922 28 67.669922 z M 28.09375 71.005859 C 27.800781 70.976797 27.499063 71.079062 27.289062 71.289062 L 27.169922 71.439453 C 27.129922 71.499453 27.100078 71.559141 27.080078 71.619141 C 27.050078 71.679141 27.029531 71.740781 27.019531 71.800781 C 27.009531 71.870781 27 71.93 27 72 C 27 72.13 27.030078 72.260859 27.080078 72.380859 C 27.130078 72.500859 27.199063 72.610938 27.289062 72.710938 C 27.479062 72.890937 27.74 73 28 73 C 28.13 73 28.260859 72.969922 28.380859 72.919922 C 28.500859 72.869922 28.610937 72.800938 28.710938 72.710938 C 28.800938 72.610937 28.869922 72.500859 28.919922 72.380859 C 28.969922 72.260859 29 72.13 29 72 C 29 71.93 28.990469 71.870781 28.980469 71.800781 C 28.970469 71.740781 28.949922 71.679141 28.919922 71.619141 C 28.899922 71.559141 28.870078 71.499453 28.830078 71.439453 L 28.710938 71.289062 C 28.610938 71.199063 28.500859 71.130078 28.380859 71.080078 C 28.288359 71.040078 28.191406 71.015547 28.09375 71.005859 z"/></svg>
    </div>
    <div class="dialog-text">
        <p>Uh, took you a lot of time my man…</p>

    </div>
</div>
<div class="dialog matt" title="Matt">
    <div class="dialog-head">
        <?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="476.000000pt" height="440.000000pt" viewBox="0 0 476.000000 440.000000" preserveAspectRatio="xMidYMid meet" id="icon"> <g transform="translate(0.000000,440.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none"> <path d="M2003 3812 c-182 -62 -283 -171 -354 -382 -41 -124 -50 -259 -24 -376 19 -89 37 -124 63 -124 15 0 146 171 268 348 1 2 32 -20 68 -47 213 -161 482 -274 721 -302 171 -20 212 -5 186 67 -18 51 -74 143 -116 194 -20 24 -34 44 -32 47 2 2 35 -4 72 -12 62 -15 70 -15 84 -1 13 14 13 22 3 62 -47 174 -163 285 -333 317 -32 6 -59 14 -59 17 0 3 26 19 58 35 45 24 58 36 60 57 5 41 -44 53 -213 53 -140 0 -164 -5 -267 -50 -16 -6 -17 -3 -11 26 4 19 7 48 8 64 0 29 -2 30 -50 33 -34 1 -76 -7 -132 -26z"/> <path d="M3347 3243 c-18 -17 -1 -44 68 -113 l75 -75 -80 -80 c-59 -59 -79 -86 -74 -98 3 -9 13 -17 21 -17 17 0 178 152 195 184 9 16 -4 33 -83 112 -89 90 -107 102 -122 87z"/> <path d="M3653 2914 c-13 -35 23 -44 182 -44 159 0 193 8 179 43 -5 15 -25 17 -180 17 -153 0 -175 -2 -181 -16z"/> <path d="M1573 2853 c-56 -86 23 -297 119 -318 30 -7 33 -14 42 -102 4 -43 25 -107 62 -189 3 -5 -98 -64 -223 -130 -252 -132 -301 -166 -355 -245 -43 -62 -311 -763 -328 -858 -26 -146 46 -285 204 -390 l40 -26 1121 0 c1085 0 1122 1 1150 19 74 47 143 118 175 178 29 54 35 75 38 148 l4 85 -132 355 c-150 405 -166 444 -216 511 -45 62 -122 112 -367 239 -156 80 -198 106 -194 119 3 9 17 44 32 78 14 35 28 92 32 128 6 65 6 65 47 84 23 10 54 32 69 50 66 78 78 271 17 271 -22 0 -22 0 -20 -87 1 -67 -21 -134 -57 -165 -10 -10 -37 -21 -59 -26 l-39 -8 -11 -86 c-16 -117 -37 -177 -90 -248 -104 -142 -275 -214 -448 -189 -208 29 -372 197 -398 407 -16 125 -15 122 -48 122 -85 0 -162 166 -116 249 28 51 -19 73 -51 24z m412 -791 c198 -119 458 -89 635 74 l55 51 230 -121 c261 -137 289 -157 339 -229 38 -56 309 -767 321 -844 9 -60 -11 -145 -48 -200 -18 -26 -60 -68 -95 -95 l-63 -48 -95 0 -94 0 0 198 0 197 78 45 c74 44 95 71 73 93 -7 7 -29 -1 -71 -27 -34 -20 -66 -36 -71 -36 -5 0 -9 115 -9 280 0 311 -2 323 -63 360 -31 19 -56 20 -852 20 -805 0 -821 0 -853 -20 -58 -36 -62 -58 -62 -369 l0 -279 -69 40 c-71 40 -91 42 -91 8 0 -12 26 -34 80 -67 l79 -48 1 -197 0 -198 -92 0 c-73 0 -99 4 -123 19 -63 39 -125 103 -152 159 -23 48 -28 69 -27 132 0 71 7 93 137 438 75 199 146 381 158 404 43 83 100 126 354 260 l240 127 50 -48 c28 -27 73 -63 100 -79z m1084 -347 c16 -8 34 -28 40 -46 7 -22 11 -190 11 -526 l0 -493 -862 2 -863 3 -3 485 c-2 326 1 497 8 522 20 71 -24 67 853 68 674 0 792 -2 816 -15z"/> <path d="M1773 2854 c-3 -9 7 -57 23 -106 39 -124 45 -128 196 -128 158 0 170 6 198 103 12 39 23 78 25 85 3 6 20 12 39 12 34 0 35 -1 61 -80 38 -115 47 -120 201 -120 155 0 163 5 200 134 14 49 23 95 20 102 -4 12 -86 14 -481 14 -429 0 -476 -2 -482 -16z"/> <path d="M3105 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3294 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 33 -17 60 -18 92 -3 42 19 57 59 57 153 0 80 -2 88 -27 116 -30 32 -75 45 -109 31z m64 -63 c7 -7 12 -42 12 -89 0 -83 -11 -103 -52 -97 -22 3 -23 8 -26 86 -3 87 5 112 37 112 9 0 22 -5 29 -12z"/> <path d="M3515 2658 c-3 -8 -4 -79 -3 -158 3 -137 4 -145 23 -145 19 0 20 7 20 155 0 140 -2 155 -18 158 -9 2 -19 -3 -22 -10z"/> <path d="M3704 2661 c-48 -20 -64 -58 -64 -147 0 -94 12 -129 51 -150 52 -27 115 -8 137 41 7 14 12 64 12 110 0 78 -2 87 -27 115 -30 32 -75 45 -109 31z m65 -65 c8 -9 11 -45 9 -98 l-3 -83 -29 -3 c-16 -2 -32 2 -37 10 -13 20 -11 162 3 176 16 16 43 15 57 -2z"/> <path d="M3342 2218 c-14 -14 -17 -275 -3 -296 5 -8 17 -12 27 -10 17 3 19 15 22 147 2 97 -1 148 -9 157 -14 17 -21 18 -37 2z"/> <path d="M3514 2220 c-12 -4 -31 -21 -43 -37 -21 -25 -22 -37 -19 -126 3 -94 4 -100 31 -123 32 -27 75 -31 116 -9 41 21 54 61 50 159 -4 76 -7 88 -29 110 -28 27 -75 39 -106 26z m64 -62 c7 -7 12 -44 12 -95 0 -78 -2 -84 -22 -92 -46 -17 -58 2 -58 92 0 84 9 107 40 107 9 0 21 -5 28 -12z"/> <path d="M3774 2220 c-12 -4 -31 -21 -43 -36 -18 -23 -21 -40 -21 -121 0 -91 1 -96 29 -124 47 -47 132 -33 159 26 14 31 16 163 2 199 -16 44 -84 74 -126 56z m64 -62 c13 -13 17 -156 4 -174 -15 -22 -42 -24 -62 -4 -26 26 -28 134 -4 168 17 24 43 29 62 10z"/> <path d="M3981 2221 c-8 -5 -11 -50 -9 -157 3 -141 4 -149 23 -149 19 0 20 8 23 151 2 121 0 153 -11 157 -8 3 -19 2 -26 -2z"/> </g> </svg>
    </div>
    <div class="dialog-text">
        <p>Well… yeah… better late than never, they say</p>

    </div>
</div>
<div class="paragraph">
<p>If you have ever archived and pushed an application to the AppStoreConnect
website you&#8217;ve certainly encountered this and you probably know how annyoing it
is to manually comply to it every. single. time.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/images/export-compliance.png" alt="export compliance">
</div>
</div>
<div class="paragraph">
<p>I&#8217;m quoting Apple</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>When you submit your app to TestFlight or the App Store, you upload your app to
a server in the United States. If you distribute your app outside the U.S. or
Canada, your app is subject to U.S. export laws, regardless of where your legal
entity is based. If your app uses, accesses, contains, implements, or
incorporates encryption, this is considered an export of encryption software,
which means your app is subject to U.S. export compliance requirements, as well
as the import compliance requirements of the countries where you distribute your
app.</p>
</div>
</blockquote>
<div class="attribution">
&#8212; Apple Developer Documentation
</div>
</div>
<div class="paragraph">
<p>For some reason I always thought that you needed to handle this check manually,
silly me. I never investigated this further, probably because I&#8217;ve never
released more than once per week so this was not a real issue, but last week I was about
to setup an Xcode Cloud pipeline to automate <code>testing &#8594; archiving &#8594; release</code>
and I realised that this very encryption compliace was blocking the entire
process. Apps could not be released because I had to first declare if the app
was or was not using some sort of encryption. So I started googling and the
solution was pretty straightforward.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Every time you submit a new version of your app, App Store Connect asks you
questions to guide you through a compliance review. <strong>You can bypass these
questions and streamline the submission process by providing the required
information in your app’s Information Property List file.</strong></p>
</div>
<div class="paragraph">
<p>Add the
<a href="https://developer.apple.com/documentation/bundleresources/information_property_list/itsappusesnonexemptencryption">ITSAppUsesNonExemptEncryption</a>
key to your app’s Info.plist file with a Boolean value that indicates whether
your app uses encryption. Set the value to NO if your app—including any
third-party libraries it links against—doesn’t use encryption, or if it only
uses forms of encryption that are exempt from export compliance documentation
requirements. Otherwise, set it to YES.</p>
</div>
</blockquote>
<div class="attribution">
&#8212; Apple Developer Documentation
</div>
</div>
<div class="paragraph">
<p>Therefore, the issue of manually checking export encryption compliance can be
bypassed by adding this key to the app&#8217;s <code>Info.plist</code> file.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="Info.plist">&lt;key&gt;ITSAppUsesNonExemptEncryption&lt;/key&gt;
&lt;false/&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>This only applies for apps that are not using encryption.
If your app is using it then you should take a look at the
<a href="https://developer.apple.com/documentation/security/complying_with_encryption_export_regulations">Apple
Developer Documentation</a> page that describes the process to do it.</p>
</div>]]></content><author><name>Mattia Righetti</name></author><summary type="html"><![CDATA[This is going to be a very small and dumb one but I&#8217;ve just dicovered this, after two years of iOS/macOS software development, so maybe it&#8217;s going to be useful for other people as well.]]></summary></entry></feed>